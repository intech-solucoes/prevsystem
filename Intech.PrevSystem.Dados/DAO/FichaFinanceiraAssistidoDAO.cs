using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Intech.PrevSystem.Dados.DAO
{
	public abstract class FichaFinanceiraAssistidoDAO : BaseDAO<FichaFinanceiraAssistidoEntidade>
	{
		public FichaFinanceiraAssistidoDAO (IDbTransaction tx = null) : base(tx) { }

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarContribuicoesDeficit(string CD_FUNDACAO, string CD_PLANO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*,         RP.DS_RUBRICA,         RP.RUBRICA_PROV_DESC  FROM GB_FICHA_FINANC_ASSISTIDO FF    INNER JOIN GB_PROCESSOS_BENEFICIO PB         ON PB.CD_FUNDACAO = FF.CD_FUNDACAO          AND PB.CD_EMPRESA  = FF.CD_EMPRESA          AND PB.CD_PLANO = FF.CD_PLANO          AND PB.CD_ESPECIE = FF.CD_ESPECIE          AND PB.ANO_PROCESSO = FF.ANO_PROCESSO          AND PB.NUM_PROCESSO = FF.NUM_PROCESSO    INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON RP.CD_RUBRICA = FF.CD_RUBRICA    WHERE PB.CD_FUNDACAO = @CD_FUNDACAO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO    AND PB.CD_PLANO = @CD_PLANO    AND FF.CD_RUBRICA IN ('7403', '7402', '7400', '7401', '2076', '2077', '2074', '2075', '7404')  ORDER BY DT_REFERENCIA DESC;", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*, RP.DS_RUBRICA, RP.RUBRICA_PROV_DESC FROM GB_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN GB_PROCESSOS_BENEFICIO   PB  ON PB.CD_FUNDACAO=FF.CD_FUNDACAO AND PB.CD_EMPRESA=FF.CD_EMPRESA AND PB.CD_PLANO=FF.CD_PLANO AND PB.CD_ESPECIE=FF.CD_ESPECIE AND PB.ANO_PROCESSO=FF.ANO_PROCESSO AND PB.NUM_PROCESSO=FF.NUM_PROCESSO INNER  JOIN GB_RUBRICAS_PREVIDENCIAL   RP  ON RP.CD_RUBRICA=FF.CD_RUBRICA WHERE PB.CD_FUNDACAO=:CD_FUNDACAO AND PB.NUM_INSCRICAO=:NUM_INSCRICAO AND PB.CD_PLANO=:CD_PLANO AND FF.CD_RUBRICA IN ('7403', '7402', '7400', '7401', '2076', '2077', '2074', '2075', '7404') ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarContribuicoesDeficitPorAno(string CD_FUNDACAO, string CD_PLANO, string NUM_INSCRICAO, DateTime @DT_REFERENCIA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*,         RP.DS_RUBRICA,         RP.RUBRICA_PROV_DESC  FROM GB_FICHA_FINANC_ASSISTIDO FF    INNER JOIN GB_PROCESSOS_BENEFICIO PB         ON PB.CD_FUNDACAO = FF.CD_FUNDACAO          AND PB.CD_EMPRESA  = FF.CD_EMPRESA          AND PB.CD_PLANO = FF.CD_PLANO          AND PB.CD_ESPECIE = FF.CD_ESPECIE          AND PB.ANO_PROCESSO = FF.ANO_PROCESSO          AND PB.NUM_PROCESSO = FF.NUM_PROCESSO    INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON RP.CD_RUBRICA = FF.CD_RUBRICA    WHERE PB.CD_FUNDACAO = @CD_FUNDACAO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO    AND PB.CD_PLANO = @CD_PLANO    AND FF.DT_REFERENCIA = @DT_REFERENCIA    AND FF.CD_RUBRICA IN ('7403', '7402', '7400', '7401', '2076', '2077', '2074', '2075', '7404')  ORDER BY DT_REFERENCIA;", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO, @DT_REFERENCIA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*, RP.DS_RUBRICA, RP.RUBRICA_PROV_DESC FROM GB_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN GB_PROCESSOS_BENEFICIO   PB  ON PB.CD_FUNDACAO=FF.CD_FUNDACAO AND PB.CD_EMPRESA=FF.CD_EMPRESA AND PB.CD_PLANO=FF.CD_PLANO AND PB.CD_ESPECIE=FF.CD_ESPECIE AND PB.ANO_PROCESSO=FF.ANO_PROCESSO AND PB.NUM_PROCESSO=FF.NUM_PROCESSO INNER  JOIN GB_RUBRICAS_PREVIDENCIAL   RP  ON RP.CD_RUBRICA=FF.CD_RUBRICA WHERE PB.CD_FUNDACAO=:CD_FUNDACAO AND PB.NUM_INSCRICAO=:NUM_INSCRICAO AND PB.CD_PLANO=:CD_PLANO AND FF.DT_REFERENCIA=:DT_REFERENCIA AND FF.CD_RUBRICA IN ('7403', '7402', '7400', '7401', '2076', '2077', '2074', '2075', '7404') ORDER BY DT_REFERENCIA", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO, @DT_REFERENCIA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarDatas(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT DISTINCT       ANO_PROCESSO,      NUM_PROCESSO,      TB_PLANOS.CD_PLANO,      TB_PLANOS.DS_PLANO,      DT_REFERENCIA,       GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA,   	DS_TIPO_FOLHA,  	GB_ESPECIE_BENEFICIO.CD_ESPECIE,  	GB_ESPECIE_BENEFICIO.DS_ESPECIE  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN TB_TIPO_FOLHA TF ON TF.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE  INNER JOIN TB_PLANOS ON TB_PLANOS.CD_FUNDACAO = GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO AND TB_PLANOS.CD_PLANO = GB_FICHA_FINANC_ASSISTIDO.CD_PLANO  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND NUM_MATRICULA = @NUM_MATRICULA    AND GB_RECEBEDOR_BENEFICIO.CD_TIPO_RECEBEDOR = 'A'  GROUP BY       ANO_PROCESSO,      NUM_PROCESSO,      TB_PLANOS.CD_PLANO,      TB_PLANOS.DS_PLANO,      DT_REFERENCIA,       DT_COMPETENCIA,       GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA,       DS_TIPO_FOLHA,  	GB_ESPECIE_BENEFICIO.CD_ESPECIE,  	GB_ESPECIE_BENEFICIO.DS_ESPECIE  ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT DISTINCT ANO_PROCESSO, NUM_PROCESSO, TB_PLANOS.CD_PLANO, TB_PLANOS.DS_PLANO, DT_REFERENCIA, GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA, DS_TIPO_FOLHA, GB_ESPECIE_BENEFICIO.CD_ESPECIE, GB_ESPECIE_BENEFICIO.DS_ESPECIE FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN TB_TIPO_FOLHA   TF  ON TF.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_PLANOS  ON TB_PLANOS.CD_FUNDACAO=GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO AND TB_PLANOS.CD_PLANO=GB_FICHA_FINANC_ASSISTIDO.CD_PLANO WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND NUM_MATRICULA=:NUM_MATRICULA AND GB_RECEBEDOR_BENEFICIO.CD_TIPO_RECEBEDOR='A' GROUP BY ANO_PROCESSO, NUM_PROCESSO, TB_PLANOS.CD_PLANO, TB_PLANOS.DS_PLANO, DT_REFERENCIA, DT_COMPETENCIA, GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA, DS_TIPO_FOLHA, GB_ESPECIE_BENEFICIO.CD_ESPECIE, GB_ESPECIE_BENEFICIO.DS_ESPECIE ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarDatasPorProcesso(int SQ_PROCESSO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT DISTINCT CR.DT_REFERENCIA,      FF.SQ_PROCESSO  FROM fi_ficha_financ_assistido FF       INNER JOIN fi_rubrica_folha_pagamento RU ON RU.SQ_RUBRICA = FF.SQ_RUBRICA       INNER JOIN fi_cronograma_credito CR ON CR.SQ_CRONOGRAMA = FF.SQ_CRONOGRAMA  WHERE FF.SQ_PROCESSO = @SQ_PROCESSO    AND RU.IR_LANCAMENTO IN ('P', 'D')    AND RU.EE_INCIDE_LIQUIDO = 'S'  ORDER BY CR.DT_REFERENCIA DESC", new { SQ_PROCESSO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT DISTINCT CR.DT_REFERENCIA, FF.SQ_PROCESSO FROM FI_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN FI_RUBRICA_FOLHA_PAGAMENTO   RU  ON RU.SQ_RUBRICA=FF.SQ_RUBRICA INNER  JOIN FI_CRONOGRAMA_CREDITO   CR  ON CR.SQ_CRONOGRAMA=FF.SQ_CRONOGRAMA WHERE FF.SQ_PROCESSO=:SQ_PROCESSO AND RU.IR_LANCAMENTO IN ('P', 'D') AND RU.EE_INCIDE_LIQUIDO='S' ORDER BY CR.DT_REFERENCIA DESC", new { SQ_PROCESSO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarDatasPorRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT       DT_REFERENCIA,      DT_COMPETENCIA,       GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA,   	DS_TIPO_FOLHA,  	GB_ESPECIE_BENEFICIO.CD_ESPECIE,  	GB_ESPECIE_BENEFICIO.DS_ESPECIE,  	GB_FICHA_FINANC_ASSISTIDO.CD_PLANO  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN TB_TIPO_FOLHA TF ON TF.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND NUM_MATRICULA = @NUM_MATRICULA  GROUP BY       DT_REFERENCIA,       DT_COMPETENCIA,       GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA,       DS_TIPO_FOLHA,  	GB_ESPECIE_BENEFICIO.CD_ESPECIE,  	GB_ESPECIE_BENEFICIO.DS_ESPECIE,  	GB_FICHA_FINANC_ASSISTIDO.CD_PLANO  ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT DT_REFERENCIA, DT_COMPETENCIA, GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA, DS_TIPO_FOLHA, GB_ESPECIE_BENEFICIO.CD_ESPECIE, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_FICHA_FINANC_ASSISTIDO.CD_PLANO FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN TB_TIPO_FOLHA   TF  ON TF.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND NUM_MATRICULA=:NUM_MATRICULA GROUP BY DT_REFERENCIA, DT_COMPETENCIA, GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA, DS_TIPO_FOLHA, GB_ESPECIE_BENEFICIO.CD_ESPECIE, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_FICHA_FINANC_ASSISTIDO.CD_PLANO ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual FichaFinanceiraAssistidoEntidade BuscarMargemConssignavel6070(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<FichaFinanceiraAssistidoEntidade>("SELECT B.NUM_MATRICULA, ISNULL(B.NUM_SEQ_GR_FAMIL,0) AS NUM_SEQ_GR_FAMIL, B.CD_EMPRESA,   	          A.CD_PLANO, A.DT_REFERENCIA, A.CD_RUBRICA, A.VALOR_MC   	     FROM GB_FICHA_FINANC_ASSISTIDO A     INNER JOIN GB_RECEBEDOR_BENEFICIO B              ON B.CD_FUNDACAO = A.CD_FUNDACAO            AND B.CD_EMPRESA = A.CD_EMPRESA  		  AND B.SEQ_RECEBEDOR = A.SEQ_RECEBEDOR     INNER JOIN EE_ENTIDADE C             ON C.COD_ENTID = B.COD_ENTID          WHERE A.CD_FUNDACAO = @CD_FUNDACAO  		  AND A.CD_EMPRESA = @CD_EMPRESA  		  AND B.NUM_MATRICULA = @NUM_MATRICULA  		  AND ISNULL(B.NUM_SEQ_GR_FAMIL,0) = 0  		  AND A.DT_REFERENCIA = (SELECT MAX(B1.DT_REFERENCIA)   		                           FROM GB_FICHA_FINANC_ASSISTIDO B1  								  WHERE B1.CD_FUNDACAO = A.CD_FUNDACAO  								    AND B1.CD_EMPRESA = A.CD_EMPRESA  									AND B1.CD_PLANO = '0001'  									AND B1.SEQ_RECEBEDOR = B.SEQ_RECEBEDOR  									AND B1.DT_REFERENCIA <= GETDATE())  		  AND A.CD_RUBRICA = '6070'  		  AND A.CD_PLANO = '0001'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<FichaFinanceiraAssistidoEntidade>("SELECT B.NUM_MATRICULA, NVL(B.NUM_SEQ_GR_FAMIL,0) AS NUM_SEQ_GR_FAMIL, B.CD_EMPRESA, A.CD_PLANO, A.DT_REFERENCIA, A.CD_RUBRICA, A.VALOR_MC FROM GB_FICHA_FINANC_ASSISTIDO  A  INNER  JOIN GB_RECEBEDOR_BENEFICIO   B  ON B.CD_FUNDACAO=A.CD_FUNDACAO AND B.CD_EMPRESA=A.CD_EMPRESA AND B.SEQ_RECEBEDOR=A.SEQ_RECEBEDOR INNER  JOIN EE_ENTIDADE   C  ON C.COD_ENTID=B.COD_ENTID WHERE A.CD_FUNDACAO=:CD_FUNDACAO AND A.CD_EMPRESA=:CD_EMPRESA AND B.NUM_MATRICULA=:NUM_MATRICULA AND NVL(B.NUM_SEQ_GR_FAMIL,0)=0 AND A.DT_REFERENCIA=(SELECT MAX(B1.DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO  B1  WHERE B1.CD_FUNDACAO=A.CD_FUNDACAO AND B1.CD_EMPRESA=A.CD_EMPRESA AND B1.CD_PLANO='0001' AND B1.SEQ_RECEBEDOR=B.SEQ_RECEBEDOR AND B1.DT_REFERENCIA<=SYSDATE) AND A.CD_RUBRICA='6070' AND A.CD_PLANO='0001'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual FichaFinanceiraAssistidoEntidade BuscarMargemConssignavel804A(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<FichaFinanceiraAssistidoEntidade>("SELECT B.NUM_MATRICULA, ISNULL(B.NUM_SEQ_GR_FAMIL,0) AS NUM_SEQ_GR_FAMIL, B.CD_EMPRESA,   	          A.CD_PLANO, A.DT_REFERENCIA, A.CD_RUBRICA, A.VALOR_MC   	     FROM GB_FICHA_FINANC_ASSISTIDO A     INNER JOIN GB_RECEBEDOR_BENEFICIO B              ON B.CD_FUNDACAO = A.CD_FUNDACAO            AND B.CD_EMPRESA = A.CD_EMPRESA  		  AND B.SEQ_RECEBEDOR = A.SEQ_RECEBEDOR     INNER JOIN EE_ENTIDADE C             ON C.COD_ENTID = B.COD_ENTID          WHERE A.CD_FUNDACAO = @CD_FUNDACAO  		  AND A.CD_EMPRESA = @CD_EMPRESA  		  AND B.NUM_MATRICULA = @NUM_MATRICULA  		  AND ISNULL(B.NUM_SEQ_GR_FAMIL,0) = 0  		  AND A.DT_REFERENCIA = (SELECT MAX(B1.DT_REFERENCIA)   		                           FROM GB_FICHA_FINANC_ASSISTIDO B1  								  WHERE B1.CD_FUNDACAO = A.CD_FUNDACAO  								    AND B1.CD_EMPRESA = A.CD_EMPRESA  									AND B1.CD_PLANO = '0001'  									AND B1.SEQ_RECEBEDOR = B.SEQ_RECEBEDOR  									AND B1.DT_REFERENCIA <= GETDATE())  		  AND A.CD_RUBRICA = '804A'  		  AND A.CD_PLANO = '0001'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<FichaFinanceiraAssistidoEntidade>("SELECT B.NUM_MATRICULA, NVL(B.NUM_SEQ_GR_FAMIL,0) AS NUM_SEQ_GR_FAMIL, B.CD_EMPRESA, A.CD_PLANO, A.DT_REFERENCIA, A.CD_RUBRICA, A.VALOR_MC FROM GB_FICHA_FINANC_ASSISTIDO  A  INNER  JOIN GB_RECEBEDOR_BENEFICIO   B  ON B.CD_FUNDACAO=A.CD_FUNDACAO AND B.CD_EMPRESA=A.CD_EMPRESA AND B.SEQ_RECEBEDOR=A.SEQ_RECEBEDOR INNER  JOIN EE_ENTIDADE   C  ON C.COD_ENTID=B.COD_ENTID WHERE A.CD_FUNDACAO=:CD_FUNDACAO AND A.CD_EMPRESA=:CD_EMPRESA AND B.NUM_MATRICULA=:NUM_MATRICULA AND NVL(B.NUM_SEQ_GR_FAMIL,0)=0 AND A.DT_REFERENCIA=(SELECT MAX(B1.DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO  B1  WHERE B1.CD_FUNDACAO=A.CD_FUNDACAO AND B1.CD_EMPRESA=A.CD_EMPRESA AND B1.CD_PLANO='0001' AND B1.SEQ_RECEBEDOR=B.SEQ_RECEBEDOR AND B1.DT_REFERENCIA<=SYSDATE) AND A.CD_RUBRICA='804A' AND A.CD_PLANO='0001'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual FichaFinanceiraAssistidoEntidade BuscarMargemConssignavel804N(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<FichaFinanceiraAssistidoEntidade>("SELECT B.NUM_MATRICULA, ISNULL(B.NUM_SEQ_GR_FAMIL,0) AS NUM_SEQ_GR_FAMIL, B.CD_EMPRESA,   	          A.CD_PLANO, A.DT_REFERENCIA, A.CD_RUBRICA, A.VALOR_MC   	     FROM GB_FICHA_FINANC_ASSISTIDO A     INNER JOIN GB_RECEBEDOR_BENEFICIO B              ON B.CD_FUNDACAO = A.CD_FUNDACAO            AND B.CD_EMPRESA = A.CD_EMPRESA  		  AND B.SEQ_RECEBEDOR = A.SEQ_RECEBEDOR     INNER JOIN EE_ENTIDADE C             ON C.COD_ENTID = B.COD_ENTID          WHERE A.CD_FUNDACAO = @CD_FUNDACAO  		  AND A.CD_EMPRESA = @CD_EMPRESA  		  AND B.NUM_MATRICULA = @NUM_MATRICULA  		  AND ISNULL(B.NUM_SEQ_GR_FAMIL,0) = 0  		  AND A.DT_REFERENCIA = (SELECT MAX(B1.DT_REFERENCIA)   		                           FROM GB_FICHA_FINANC_ASSISTIDO B1  								  WHERE B1.CD_FUNDACAO = A.CD_FUNDACAO  								    AND B1.CD_EMPRESA = A.CD_EMPRESA  									AND B1.CD_PLANO = '0001'  									AND B1.SEQ_RECEBEDOR = B.SEQ_RECEBEDOR  									AND B1.DT_REFERENCIA <= GETDATE())  		  AND A.CD_RUBRICA = '804N'  		  AND A.CD_PLANO = '0001'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<FichaFinanceiraAssistidoEntidade>("SELECT B.NUM_MATRICULA, NVL(B.NUM_SEQ_GR_FAMIL,0) AS NUM_SEQ_GR_FAMIL, B.CD_EMPRESA, A.CD_PLANO, A.DT_REFERENCIA, A.CD_RUBRICA, A.VALOR_MC FROM GB_FICHA_FINANC_ASSISTIDO  A  INNER  JOIN GB_RECEBEDOR_BENEFICIO   B  ON B.CD_FUNDACAO=A.CD_FUNDACAO AND B.CD_EMPRESA=A.CD_EMPRESA AND B.SEQ_RECEBEDOR=A.SEQ_RECEBEDOR INNER  JOIN EE_ENTIDADE   C  ON C.COD_ENTID=B.COD_ENTID WHERE A.CD_FUNDACAO=:CD_FUNDACAO AND A.CD_EMPRESA=:CD_EMPRESA AND B.NUM_MATRICULA=:NUM_MATRICULA AND NVL(B.NUM_SEQ_GR_FAMIL,0)=0 AND A.DT_REFERENCIA=(SELECT MAX(B1.DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO  B1  WHERE B1.CD_FUNDACAO=A.CD_FUNDACAO AND B1.CD_EMPRESA=A.CD_EMPRESA AND B1.CD_PLANO='0001' AND B1.SEQ_RECEBEDOR=B.SEQ_RECEBEDOR AND B1.DT_REFERENCIA<=SYSDATE) AND A.CD_RUBRICA='804N' AND A.CD_PLANO='0001'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlano(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoCompetencia(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO, DateTime DT_COMPETENCIA, string CD_TIPO_FOLHA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_COMPETENCIA = @DT_COMPETENCIA    AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA = @CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_COMPETENCIA, CD_TIPO_FOLHA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_COMPETENCIA=:DT_COMPETENCIA AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA=:CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_COMPETENCIA, CD_TIPO_FOLHA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoCompetenciaRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO, DateTime DT_COMPETENCIA, string CD_TIPO_FOLHA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_COMPETENCIA = @DT_COMPETENCIA    AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA = @CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_COMPETENCIA, CD_TIPO_FOLHA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_COMPETENCIA=:DT_COMPETENCIA AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA=:CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_COMPETENCIA, CD_TIPO_FOLHA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S'", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoReferencia(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO, DateTime DT_REFERENCIA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA    AND GB_FICHA_FINANC_ASSISTIDO.ANO_PROCESSO = @ANO_PROCESSO    AND GB_FICHA_FINANC_ASSISTIDO.NUM_PROCESSO = @NUM_PROCESSO", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA AND GB_FICHA_FINANC_ASSISTIDO.ANO_PROCESSO=:ANO_PROCESSO AND GB_FICHA_FINANC_ASSISTIDO.NUM_PROCESSO=:NUM_PROCESSO", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoReferenciaProcesso(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO, DateTime DT_REFERENCIA, string ANO_PROCESSO, string NUM_PROCESSO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA    AND GB_FICHA_FINANC_ASSISTIDO.ANO_PROCESSO = @ANO_PROCESSO    AND GB_FICHA_FINANC_ASSISTIDO.NUM_PROCESSO = @NUM_PROCESSO", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA, ANO_PROCESSO, NUM_PROCESSO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA AND GB_FICHA_FINANC_ASSISTIDO.ANO_PROCESSO=:ANO_PROCESSO AND GB_FICHA_FINANC_ASSISTIDO.NUM_PROCESSO=:NUM_PROCESSO", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA, ANO_PROCESSO, NUM_PROCESSO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoReferenciaProcessoRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO, DateTime DT_REFERENCIA, string ANO_PROCESSO, string NUM_PROCESSO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA, ANO_PROCESSO, NUM_PROCESSO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA, ANO_PROCESSO, NUM_PROCESSO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoReferenciaRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO, DateTime DT_REFERENCIA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoReferenciaTipoFolha(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO, DateTime DT_REFERENCIA, string CD_TIPO_FOLHA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA    AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA = @CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA=:CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoReferenciaTipoFolhaIncidLiquidoN(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO, DateTime DT_REFERENCIA, string CD_TIPO_FOLHA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'N'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA    AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA = @CD_TIPO_FOLHA    AND GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA IN (SELECT CD_RUBRICA FROM GB_BASE_OUTROS)", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='N' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA=:CD_TIPO_FOLHA AND GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA IN (SELECT CD_RUBRICA FROM GB_BASE_OUTROS)", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoReferenciaTipoFolhaRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO, DateTime DT_REFERENCIA, string CD_TIPO_FOLHA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA    AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA = @CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA=:CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoReferenciaTipoFolhaRecebedorIncidLiquidoN(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO, DateTime DT_REFERENCIA, string CD_TIPO_FOLHA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'N'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA    AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA = @CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='N' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA=:CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarRelatorioContracheque(int SQ_PROCESSO, DateTime DT_REFERENCIA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT DISTINCT CR.DT_REFERENCIA,      FF.SQ_PROCESSO  FROM fi_ficha_financ_assistido FF       INNER JOIN fi_rubrica_folha_pagamento RU ON RU.SQ_RUBRICA = FF.SQ_RUBRICA       INNER JOIN fi_cronograma_credito CR ON CR.SQ_CRONOGRAMA = FF.SQ_CRONOGRAMA  WHERE FF.SQ_PROCESSO = @SQ_PROCESSO    AND RU.IR_LANCAMENTO IN ('P', 'D')    AND RU.EE_INCIDE_LIQUIDO = 'S'  ORDER BY CR.DT_REFERENCIA DESC", new { SQ_PROCESSO, DT_REFERENCIA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT DISTINCT CR.DT_REFERENCIA, FF.SQ_PROCESSO FROM FI_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN FI_RUBRICA_FOLHA_PAGAMENTO   RU  ON RU.SQ_RUBRICA=FF.SQ_RUBRICA INNER  JOIN FI_CRONOGRAMA_CREDITO   CR  ON CR.SQ_CRONOGRAMA=FF.SQ_CRONOGRAMA WHERE FF.SQ_PROCESSO=:SQ_PROCESSO AND RU.IR_LANCAMENTO IN ('P', 'D') AND RU.EE_INCIDE_LIQUIDO='S' ORDER BY CR.DT_REFERENCIA DESC", new { SQ_PROCESSO, DT_REFERENCIA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarResumo(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_BRUTO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'D' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_DESCONTOS,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE FF.VALOR_MC * -1              END) AS VAL_LIQUIDO    FROM GB_FICHA_FINANC_ASSISTIDO FF         INNER JOIN GB_PROCESSOS_BENEFICIO PB ON              PB.CD_FUNDACAO  = FF.CD_FUNDACAO AND              PB.CD_EMPRESA   = FF.CD_EMPRESA AND              PB.CD_PLANO     = FF.CD_PLANO AND              PB.CD_ESPECIE   = FF.CD_ESPECIE AND              PB.NUM_PROCESSO = FF.NUM_PROCESSO AND               PB.ANO_PROCESSO = FF.ANO_PROCESSO          INNER JOIN TB_TIPO_FOLHA TF ON               TF.CD_TIPO_FOLHA = FF.CD_TIPO_FOLHA         INNER JOIN TB_PLANOS PL ON               PL.CD_FUNDACAO = FF.CD_FUNDACAO AND              PL.CD_PLANO = FF.CD_PLANO         INNER JOIN GB_ESPECIE_BENEFICIO EB ON              EB.CD_ESPECIE = FF.CD_ESPECIE         INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON              RP.CD_RUBRICA = FF.CD_RUBRICA  WHERE PB.CD_FUNDACAO = @CD_FUNDACAO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO  GROUP BY PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO  ORDER BY PL.DS_PLANO,          EB.DS_ESPECIE,         FF.DT_REFERENCIA DESC,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarResumoIncidLiquidoS(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_BRUTO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'D' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_DESCONTOS,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE FF.VALOR_MC * -1              END) AS VAL_LIQUIDO    FROM GB_FICHA_FINANC_ASSISTIDO FF         INNER JOIN GB_PROCESSOS_BENEFICIO PB ON              PB.CD_FUNDACAO  = FF.CD_FUNDACAO AND              PB.CD_EMPRESA   = FF.CD_EMPRESA AND              PB.CD_PLANO     = FF.CD_PLANO AND              PB.CD_ESPECIE   = FF.CD_ESPECIE AND              PB.NUM_PROCESSO = FF.NUM_PROCESSO AND               PB.ANO_PROCESSO = FF.ANO_PROCESSO          INNER JOIN TB_TIPO_FOLHA TF ON               TF.CD_TIPO_FOLHA = FF.CD_TIPO_FOLHA         INNER JOIN TB_PLANOS PL ON               PL.CD_FUNDACAO = FF.CD_FUNDACAO AND              PL.CD_PLANO = FF.CD_PLANO         INNER JOIN GB_ESPECIE_BENEFICIO EB ON              EB.CD_ESPECIE = FF.CD_ESPECIE         INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON              RP.CD_RUBRICA = FF.CD_RUBRICA  WHERE PB.CD_FUNDACAO = @CD_FUNDACAO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO    AND RP.INCID_LIQUIDO = 'S'  GROUP BY PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO  ORDER BY PL.DS_PLANO,          EB.DS_ESPECIE,         FF.DT_REFERENCIA DESC,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT PL.CD_PLANO, PL.DS_PLANO, EB.DS_ESPECIE, EB.CD_ESPECIE, FF.DT_REFERENCIA, TF.CD_TIPO_FOLHA, TF.DS_TIPO_FOLHA, FF.ANO_PROCESSO, FF.NUM_PROCESSO, SUM(CASE  WHEN RP.RUBRICA_PROV_DESC='P' THEN FF.VALOR_MC ELSE 0 END ) AS VAL_BRUTO, SUM(CASE  WHEN RP.RUBRICA_PROV_DESC='D' THEN FF.VALOR_MC ELSE 0 END ) AS VAL_DESCONTOS, SUM(CASE  WHEN RP.RUBRICA_PROV_DESC='P' THEN FF.VALOR_MC ELSE FF.VALOR_MC* - 1 END ) AS VAL_LIQUIDO FROM GB_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN GB_PROCESSOS_BENEFICIO   PB  ON PB.CD_FUNDACAO=FF.CD_FUNDACAO AND PB.CD_EMPRESA=FF.CD_EMPRESA AND PB.CD_PLANO=FF.CD_PLANO AND PB.CD_ESPECIE=FF.CD_ESPECIE AND PB.NUM_PROCESSO=FF.NUM_PROCESSO AND PB.ANO_PROCESSO=FF.ANO_PROCESSO INNER  JOIN TB_TIPO_FOLHA   TF  ON TF.CD_TIPO_FOLHA=FF.CD_TIPO_FOLHA INNER  JOIN TB_PLANOS   PL  ON PL.CD_FUNDACAO=FF.CD_FUNDACAO AND PL.CD_PLANO=FF.CD_PLANO INNER  JOIN GB_ESPECIE_BENEFICIO   EB  ON EB.CD_ESPECIE=FF.CD_ESPECIE INNER  JOIN GB_RUBRICAS_PREVIDENCIAL   RP  ON RP.CD_RUBRICA=FF.CD_RUBRICA WHERE PB.CD_FUNDACAO=:CD_FUNDACAO AND PB.NUM_INSCRICAO=:NUM_INSCRICAO AND RP.INCID_LIQUIDO='S' GROUP BY PL.CD_PLANO, PL.DS_PLANO, EB.DS_ESPECIE, EB.CD_ESPECIE, FF.DT_REFERENCIA, TF.CD_TIPO_FOLHA, TF.DS_TIPO_FOLHA, FF.ANO_PROCESSO, FF.NUM_PROCESSO ORDER BY PL.DS_PLANO, EB.DS_ESPECIE, FF.DT_REFERENCIA DESC, TF.DS_TIPO_FOLHA, FF.ANO_PROCESSO, FF.NUM_PROCESSO", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarResumoIncidLiquidoSUltimos5Anos(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_BRUTO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'D' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_DESCONTOS,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE FF.VALOR_MC * -1              END) AS VAL_LIQUIDO    FROM GB_FICHA_FINANC_ASSISTIDO FF         INNER JOIN GB_PROCESSOS_BENEFICIO PB ON              PB.CD_FUNDACAO  = FF.CD_FUNDACAO AND              PB.CD_EMPRESA   = FF.CD_EMPRESA AND              PB.CD_PLANO     = FF.CD_PLANO AND              PB.CD_ESPECIE   = FF.CD_ESPECIE AND              PB.NUM_PROCESSO = FF.NUM_PROCESSO AND               PB.ANO_PROCESSO = FF.ANO_PROCESSO          INNER JOIN TB_TIPO_FOLHA TF ON               TF.CD_TIPO_FOLHA = FF.CD_TIPO_FOLHA         INNER JOIN TB_PLANOS PL ON               PL.CD_FUNDACAO = FF.CD_FUNDACAO AND              PL.CD_PLANO = FF.CD_PLANO         INNER JOIN GB_ESPECIE_BENEFICIO EB ON              EB.CD_ESPECIE = FF.CD_ESPECIE         INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON              RP.CD_RUBRICA = FF.CD_RUBRICA  WHERE PB.CD_FUNDACAO = @CD_FUNDACAO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO    AND RP.INCID_LIQUIDO = 'S'     AND (YEAR(FF.DT_REFERENCIA) >= (CAST(YEAR(GETDATE()) AS int) - 5))  GROUP BY PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO  ORDER BY PL.DS_PLANO,          EB.DS_ESPECIE,         FF.DT_REFERENCIA DESC,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarResumoPorRecebedor(string CD_FUNDACAO, string NUM_INSCRICAO, int SEQ_RECEBEDOR)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_BRUTO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'D' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_DESCONTOS,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE FF.VALOR_MC * -1              END) AS VAL_LIQUIDO    FROM GB_FICHA_FINANC_ASSISTIDO FF         INNER JOIN GB_PROCESSOS_BENEFICIO PB ON              PB.CD_FUNDACAO  = FF.CD_FUNDACAO AND              PB.CD_EMPRESA   = FF.CD_EMPRESA AND              PB.CD_PLANO     = FF.CD_PLANO AND              PB.CD_ESPECIE   = FF.CD_ESPECIE AND              PB.NUM_PROCESSO = FF.NUM_PROCESSO AND               PB.ANO_PROCESSO = FF.ANO_PROCESSO          INNER JOIN TB_TIPO_FOLHA TF ON               TF.CD_TIPO_FOLHA = FF.CD_TIPO_FOLHA         INNER JOIN TB_PLANOS PL ON               PL.CD_FUNDACAO = FF.CD_FUNDACAO AND              PL.CD_PLANO = FF.CD_PLANO         INNER JOIN GB_ESPECIE_BENEFICIO EB ON              EB.CD_ESPECIE = FF.CD_ESPECIE         INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON              RP.CD_RUBRICA = FF.CD_RUBRICA  WHERE PB.CD_FUNDACAO = @CD_FUNDACAO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO    AND FF.SEQ_RECEBEDOR = @SEQ_RECEBEDOR  GROUP BY PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO  ORDER BY PL.DS_PLANO,          EB.DS_ESPECIE,         FF.DT_REFERENCIA DESC,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO", new { CD_FUNDACAO, NUM_INSCRICAO, SEQ_RECEBEDOR }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("", new { CD_FUNDACAO, NUM_INSCRICAO, SEQ_RECEBEDOR }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarResumoPorRecebedorIncidLiquidoS(string CD_FUNDACAO, string NUM_INSCRICAO, int SEQ_RECEBEDOR)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_BRUTO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'D' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_DESCONTOS,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE FF.VALOR_MC * -1              END) AS VAL_LIQUIDO    FROM GB_FICHA_FINANC_ASSISTIDO FF         INNER JOIN GB_PROCESSOS_BENEFICIO PB ON              PB.CD_FUNDACAO  = FF.CD_FUNDACAO AND              PB.CD_EMPRESA   = FF.CD_EMPRESA AND              PB.CD_PLANO     = FF.CD_PLANO AND              PB.CD_ESPECIE   = FF.CD_ESPECIE AND              PB.NUM_PROCESSO = FF.NUM_PROCESSO AND               PB.ANO_PROCESSO = FF.ANO_PROCESSO          INNER JOIN TB_TIPO_FOLHA TF ON               TF.CD_TIPO_FOLHA = FF.CD_TIPO_FOLHA         INNER JOIN TB_PLANOS PL ON               PL.CD_FUNDACAO = FF.CD_FUNDACAO AND              PL.CD_PLANO = FF.CD_PLANO         INNER JOIN GB_ESPECIE_BENEFICIO EB ON              EB.CD_ESPECIE = FF.CD_ESPECIE         INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON              RP.CD_RUBRICA = FF.CD_RUBRICA  WHERE PB.CD_FUNDACAO = @CD_FUNDACAO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO    AND FF.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND RP.INCID_LIQUIDO = 'S'  GROUP BY PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO  ORDER BY PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         FF.DT_REFERENCIA DESC,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO", new { CD_FUNDACAO, NUM_INSCRICAO, SEQ_RECEBEDOR }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT PL.CD_PLANO, PL.DS_PLANO, EB.DS_ESPECIE, EB.CD_ESPECIE, FF.DT_REFERENCIA, TF.CD_TIPO_FOLHA, TF.DS_TIPO_FOLHA, FF.ANO_PROCESSO, FF.NUM_PROCESSO, SUM(CASE  WHEN RP.RUBRICA_PROV_DESC='P' THEN FF.VALOR_MC ELSE 0 END ) AS VAL_BRUTO, SUM(CASE  WHEN RP.RUBRICA_PROV_DESC='D' THEN FF.VALOR_MC ELSE 0 END ) AS VAL_DESCONTOS, SUM(CASE  WHEN RP.RUBRICA_PROV_DESC='P' THEN FF.VALOR_MC ELSE FF.VALOR_MC* - 1 END ) AS VAL_LIQUIDO FROM GB_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN GB_PROCESSOS_BENEFICIO   PB  ON PB.CD_FUNDACAO=FF.CD_FUNDACAO AND PB.CD_EMPRESA=FF.CD_EMPRESA AND PB.CD_PLANO=FF.CD_PLANO AND PB.CD_ESPECIE=FF.CD_ESPECIE AND PB.NUM_PROCESSO=FF.NUM_PROCESSO AND PB.ANO_PROCESSO=FF.ANO_PROCESSO INNER  JOIN TB_TIPO_FOLHA   TF  ON TF.CD_TIPO_FOLHA=FF.CD_TIPO_FOLHA INNER  JOIN TB_PLANOS   PL  ON PL.CD_FUNDACAO=FF.CD_FUNDACAO AND PL.CD_PLANO=FF.CD_PLANO INNER  JOIN GB_ESPECIE_BENEFICIO   EB  ON EB.CD_ESPECIE=FF.CD_ESPECIE INNER  JOIN GB_RUBRICAS_PREVIDENCIAL   RP  ON RP.CD_RUBRICA=FF.CD_RUBRICA WHERE PB.CD_FUNDACAO=:CD_FUNDACAO AND PB.NUM_INSCRICAO=:NUM_INSCRICAO AND FF.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND RP.INCID_LIQUIDO='S' GROUP BY PL.CD_PLANO, PL.DS_PLANO, EB.DS_ESPECIE, EB.CD_ESPECIE, FF.DT_REFERENCIA, TF.CD_TIPO_FOLHA, TF.DS_TIPO_FOLHA, FF.ANO_PROCESSO, FF.NUM_PROCESSO ORDER BY PL.CD_PLANO, PL.DS_PLANO, EB.DS_ESPECIE, FF.DT_REFERENCIA DESC, TF.DS_TIPO_FOLHA, FF.ANO_PROCESSO, FF.NUM_PROCESSO", new { CD_FUNDACAO, NUM_INSCRICAO, SEQ_RECEBEDOR }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarResumoPorRecebedorIncidLiquidoSUltimo5Anos(string CD_FUNDACAO, string NUM_INSCRICAO, int SEQ_RECEBEDOR)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_BRUTO,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'D' THEN FF.VALOR_MC                  ELSE 0              END) AS VAL_DESCONTOS,         SUM(CASE                  WHEN RP.RUBRICA_PROV_DESC = 'P' THEN FF.VALOR_MC                  ELSE FF.VALOR_MC * -1              END) AS VAL_LIQUIDO    FROM GB_FICHA_FINANC_ASSISTIDO FF         INNER JOIN GB_PROCESSOS_BENEFICIO PB ON              PB.CD_FUNDACAO  = FF.CD_FUNDACAO AND              PB.CD_EMPRESA   = FF.CD_EMPRESA AND              PB.CD_PLANO     = FF.CD_PLANO AND              PB.CD_ESPECIE   = FF.CD_ESPECIE AND              PB.NUM_PROCESSO = FF.NUM_PROCESSO AND               PB.ANO_PROCESSO = FF.ANO_PROCESSO          INNER JOIN TB_TIPO_FOLHA TF ON               TF.CD_TIPO_FOLHA = FF.CD_TIPO_FOLHA         INNER JOIN TB_PLANOS PL ON               PL.CD_FUNDACAO = FF.CD_FUNDACAO AND              PL.CD_PLANO = FF.CD_PLANO         INNER JOIN GB_ESPECIE_BENEFICIO EB ON              EB.CD_ESPECIE = FF.CD_ESPECIE         INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON              RP.CD_RUBRICA = FF.CD_RUBRICA  WHERE PB.CD_FUNDACAO = @CD_FUNDACAO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO    AND FF.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND RP.INCID_LIQUIDO = 'S'    AND (YEAR(FF.DT_REFERENCIA) >= (CAST(YEAR(GETDATE()) AS int) - 5))  GROUP BY PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         EB.CD_ESPECIE,         FF.DT_REFERENCIA,         TF.CD_TIPO_FOLHA,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO  ORDER BY PL.CD_PLANO,         PL.DS_PLANO,          EB.DS_ESPECIE,         FF.DT_REFERENCIA DESC,         TF.DS_TIPO_FOLHA,         FF.ANO_PROCESSO,         FF.NUM_PROCESSO", new { CD_FUNDACAO, NUM_INSCRICAO, SEQ_RECEBEDOR }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("", new { CD_FUNDACAO, NUM_INSCRICAO, SEQ_RECEBEDOR }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarRubricasPorProcessoReferencia(int SQ_PROCESSO, DateTime DT_REFERENCIA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*,         CR.DT_REFERENCIA,  	   CR.DT_CREDITO,         RU.DS_RUBRICA,         RU.CD_RUBRICA,         CASE              WHEN FF.IR_LANCAMENTO = 'P' THEN 'PROVENTO'              WHEN FF.IR_LANCAMENTO = 'D' THEN 'DESCONTO'         END AS DS_LANCAMENTO  FROM fi_ficha_financ_assistido FF       INNER JOIN fi_rubrica_folha_pagamento RU ON RU.SQ_RUBRICA = FF.SQ_RUBRICA       INNER JOIN fi_cronograma_credito CR ON CR.SQ_CRONOGRAMA = FF.SQ_CRONOGRAMA  WHERE FF.SQ_PROCESSO = @SQ_PROCESSO    AND CR.DT_REFERENCIA = @DT_REFERENCIA    AND RU.IR_LANCAMENTO IN ('P', 'D')    AND RU.EE_INCIDE_LIQUIDO = 'S'  ORDER BY RU.IR_LANCAMENTO DESC", new { SQ_PROCESSO, DT_REFERENCIA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*, CR.DT_REFERENCIA, CR.DT_CREDITO, RU.DS_RUBRICA, RU.CD_RUBRICA, CASE  WHEN FF.IR_LANCAMENTO='P' THEN 'PROVENTO' WHEN FF.IR_LANCAMENTO='D' THEN 'DESCONTO' END  AS DS_LANCAMENTO FROM FI_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN FI_RUBRICA_FOLHA_PAGAMENTO   RU  ON RU.SQ_RUBRICA=FF.SQ_RUBRICA INNER  JOIN FI_CRONOGRAMA_CREDITO   CR  ON CR.SQ_CRONOGRAMA=FF.SQ_CRONOGRAMA WHERE FF.SQ_PROCESSO=:SQ_PROCESSO AND CR.DT_REFERENCIA=:DT_REFERENCIA AND RU.IR_LANCAMENTO IN ('P', 'D') AND RU.EE_INCIDE_LIQUIDO='S' ORDER BY RU.IR_LANCAMENTO DESC", new { SQ_PROCESSO, DT_REFERENCIA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarUltima(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*  FROM GB_FICHA_FINANC_ASSISTIDO FF  INNER JOIN GB_RECEBEDOR_BENEFICIO RB ON FF.SEQ_RECEBEDOR = RB.SEQ_RECEBEDOR  WHERE FF.CD_FUNDACAO = @CD_FUNDACAO    AND RB.CD_FUNDACAO = @CD_FUNDACAO    AND FF.CD_EMPRESA = @CD_EMPRESA    AND RB.CD_EMPRESA = @CD_EMPRESA    AND FF.CD_PLANO = @CD_PLANO    AND RB.NUM_MATRICULA = @NUM_MATRICULA    AND FF.DT_REFERENCIA = (SELECT MAX(FF2.DT_REFERENCIA)  						FROM GB_FICHA_FINANC_ASSISTIDO FF2  						INNER JOIN GB_RECEBEDOR_BENEFICIO RB2 ON FF2.SEQ_RECEBEDOR = RB2.SEQ_RECEBEDOR  						WHERE FF2.CD_FUNDACAO = FF.CD_FUNDACAO  							AND RB2.CD_FUNDACAO = RB.CD_FUNDACAO  							AND FF2.CD_EMPRESA = FF.CD_EMPRESA  							AND RB2.CD_EMPRESA = RB.CD_EMPRESA  							AND FF2.CD_PLANO = FF.CD_PLANO  							AND RB2.NUM_MATRICULA = RB.NUM_MATRICULA)  ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.* FROM GB_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB  ON FF.SEQ_RECEBEDOR=RB.SEQ_RECEBEDOR WHERE FF.CD_FUNDACAO=:CD_FUNDACAO AND RB.CD_FUNDACAO=:CD_FUNDACAO AND FF.CD_EMPRESA=:CD_EMPRESA AND RB.CD_EMPRESA=:CD_EMPRESA AND FF.CD_PLANO=:CD_PLANO AND RB.NUM_MATRICULA=:NUM_MATRICULA AND FF.DT_REFERENCIA=(SELECT MAX(FF2.DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO  FF2  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB2  ON FF2.SEQ_RECEBEDOR=RB2.SEQ_RECEBEDOR WHERE FF2.CD_FUNDACAO=FF.CD_FUNDACAO AND RB2.CD_FUNDACAO=RB.CD_FUNDACAO AND FF2.CD_EMPRESA=FF.CD_EMPRESA AND RB2.CD_EMPRESA=RB.CD_EMPRESA AND FF2.CD_PLANO=FF.CD_PLANO AND RB2.NUM_MATRICULA=RB.NUM_MATRICULA) ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual DateTime BuscarUltimaData(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<DateTime>("SELECT TOP 1 MAX(DT_REFERENCIA)  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND NUM_MATRICULA = @NUM_MATRICULA  GROUP BY DT_REFERENCIA  ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<DateTime>("SELECT MAX(DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND NUM_MATRICULA=:NUM_MATRICULA AND ROWNUM <= 1  GROUP BY DT_REFERENCIA ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual DateTime BuscarUltimaDataPorRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<DateTime>("SELECT TOP 1 MAX(DT_REFERENCIA)  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND NUM_MATRICULA = @NUM_MATRICULA  GROUP BY DT_REFERENCIA  ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<DateTime>("SELECT MAX(DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND NUM_MATRICULA=:NUM_MATRICULA AND ROWNUM <= 1  GROUP BY DT_REFERENCIA ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarUltimaPorPlanoProcesso(string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*  FROM GB_FICHA_FINANC_ASSISTIDO FF  INNER JOIN GB_RECEBEDOR_BENEFICIO RB ON FF.SEQ_RECEBEDOR = RB.SEQ_RECEBEDOR  WHERE     FF.CD_PLANO = @CD_PLANO    AND FF.DT_REFERENCIA = (SELECT MAX(FF2.DT_REFERENCIA)  						FROM GB_FICHA_FINANC_ASSISTIDO FF2  						INNER JOIN GB_RECEBEDOR_BENEFICIO RB2 ON FF2.SEQ_RECEBEDOR = RB2.SEQ_RECEBEDOR  						WHERE FF2.CD_FUNDACAO = FF.CD_FUNDACAO  							AND RB2.CD_FUNDACAO = RB.CD_FUNDACAO  							AND FF2.CD_EMPRESA = FF.CD_EMPRESA  							AND RB2.CD_EMPRESA = RB.CD_EMPRESA  							AND FF2.CD_PLANO = FF.CD_PLANO                              AND FF2.CD_ESPECIE = FF.CD_ESPECIE                              AND FF2.ANO_PROCESSO = FF.ANO_PROCESSO                              AND FF2.NUM_PROCESSO = FF.NUM_PROCESSO  							AND RB2.NUM_MATRICULA = RB.NUM_MATRICULA)  ORDER BY DT_REFERENCIA DESC", new { NUM_MATRICULA, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.* FROM GB_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB  ON FF.SEQ_RECEBEDOR=RB.SEQ_RECEBEDOR WHERE FF.CD_PLANO=:CD_PLANO AND FF.DT_REFERENCIA=(SELECT MAX(FF2.DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO  FF2  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB2  ON FF2.SEQ_RECEBEDOR=RB2.SEQ_RECEBEDOR WHERE FF2.CD_FUNDACAO=FF.CD_FUNDACAO AND RB2.CD_FUNDACAO=RB.CD_FUNDACAO AND FF2.CD_EMPRESA=FF.CD_EMPRESA AND RB2.CD_EMPRESA=RB.CD_EMPRESA AND FF2.CD_PLANO=FF.CD_PLANO AND FF2.CD_ESPECIE=FF.CD_ESPECIE AND FF2.ANO_PROCESSO=FF.ANO_PROCESSO AND FF2.NUM_PROCESSO=FF.NUM_PROCESSO AND RB2.NUM_MATRICULA=RB.NUM_MATRICULA) ORDER BY DT_REFERENCIA DESC", new { NUM_MATRICULA, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarUltimaPorProcesso(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO, string CD_ESPECIE, string ANO_PROCESSO, string NUM_PROCESSO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*, RP.RUBRICA_PROV_DESC  FROM GB_FICHA_FINANC_ASSISTIDO FF  INNER JOIN GB_RECEBEDOR_BENEFICIO RB ON FF.SEQ_RECEBEDOR = RB.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON RP.CD_RUBRICA = FF.CD_RUBRICA  WHERE FF.CD_FUNDACAO = @CD_FUNDACAO    AND RB.CD_FUNDACAO = @CD_FUNDACAO    AND FF.CD_EMPRESA = @CD_EMPRESA    AND RB.CD_EMPRESA = @CD_EMPRESA    AND FF.CD_PLANO = @CD_PLANO    AND FF.CD_ESPECIE = @CD_ESPECIE    AND FF.ANO_PROCESSO = @ANO_PROCESSO    AND FF.NUM_PROCESSO = @NUM_PROCESSO    AND RB.NUM_MATRICULA = @NUM_MATRICULA    AND RP.INCID_LIQUIDO = 'S'    AND FF.DT_REFERENCIA = (SELECT MAX(FF2.DT_REFERENCIA)  						FROM GB_FICHA_FINANC_ASSISTIDO FF2  						INNER JOIN GB_RECEBEDOR_BENEFICIO RB2 ON FF2.SEQ_RECEBEDOR = RB2.SEQ_RECEBEDOR  						WHERE FF2.CD_FUNDACAO = FF.CD_FUNDACAO  							AND RB2.CD_FUNDACAO = RB.CD_FUNDACAO  							AND FF2.CD_EMPRESA = FF.CD_EMPRESA  							AND RB2.CD_EMPRESA = RB.CD_EMPRESA  							AND FF2.CD_PLANO = FF.CD_PLANO                              AND FF2.CD_ESPECIE = FF.CD_ESPECIE                              AND FF2.ANO_PROCESSO = FF.ANO_PROCESSO                              AND FF2.NUM_PROCESSO = FF.NUM_PROCESSO  							AND RB2.NUM_MATRICULA = RB.NUM_MATRICULA  							AND FF2.CD_TIPO_FOLHA <> '3')  ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, CD_ESPECIE, ANO_PROCESSO, NUM_PROCESSO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*, RP.RUBRICA_PROV_DESC FROM GB_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB  ON FF.SEQ_RECEBEDOR=RB.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL   RP  ON RP.CD_RUBRICA=FF.CD_RUBRICA WHERE FF.CD_FUNDACAO=:CD_FUNDACAO AND RB.CD_FUNDACAO=:CD_FUNDACAO AND FF.CD_EMPRESA=:CD_EMPRESA AND RB.CD_EMPRESA=:CD_EMPRESA AND FF.CD_PLANO=:CD_PLANO AND FF.CD_ESPECIE=:CD_ESPECIE AND FF.ANO_PROCESSO=:ANO_PROCESSO AND FF.NUM_PROCESSO=:NUM_PROCESSO AND RB.NUM_MATRICULA=:NUM_MATRICULA AND RP.INCID_LIQUIDO='S' AND FF.DT_REFERENCIA=(SELECT MAX(FF2.DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO  FF2  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB2  ON FF2.SEQ_RECEBEDOR=RB2.SEQ_RECEBEDOR WHERE FF2.CD_FUNDACAO=FF.CD_FUNDACAO AND RB2.CD_FUNDACAO=RB.CD_FUNDACAO AND FF2.CD_EMPRESA=FF.CD_EMPRESA AND RB2.CD_EMPRESA=RB.CD_EMPRESA AND FF2.CD_PLANO=FF.CD_PLANO AND FF2.CD_ESPECIE=FF.CD_ESPECIE AND FF2.ANO_PROCESSO=FF.ANO_PROCESSO AND FF2.NUM_PROCESSO=FF.NUM_PROCESSO AND RB2.NUM_MATRICULA=RB.NUM_MATRICULA AND FF2.CD_TIPO_FOLHA<>'3') ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, CD_ESPECIE, ANO_PROCESSO, NUM_PROCESSO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarUltimaPorProcessoRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO, string CD_ESPECIE, string ANO_PROCESSO, string NUM_PROCESSO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*  FROM GB_FICHA_FINANC_ASSISTIDO FF  INNER JOIN GB_RECEBEDOR_BENEFICIO RB ON FF.SEQ_RECEBEDOR = RB.SEQ_RECEBEDOR  WHERE FF.CD_FUNDACAO = @CD_FUNDACAO    AND RB.CD_FUNDACAO = @CD_FUNDACAO    AND FF.CD_EMPRESA = @CD_EMPRESA    AND RB.CD_EMPRESA = @CD_EMPRESA    AND FF.CD_PLANO = @CD_PLANO    AND FF.CD_ESPECIE = @CD_ESPECIE    AND FF.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND FF.ANO_PROCESSO = @ANO_PROCESSO    AND FF.NUM_PROCESSO = @NUM_PROCESSO    AND RB.NUM_MATRICULA = @NUM_MATRICULA  AND DT_REFERENCIA = (SELECT MAX(DT_REFERENCIA)  						FROM GB_FICHA_FINANC_ASSISTIDO FF2  						INNER JOIN GB_RECEBEDOR_BENEFICIO RB2 ON FF2.SEQ_RECEBEDOR = RB2.SEQ_RECEBEDOR  						WHERE FF2.CD_FUNDACAO = FF.CD_FUNDACAO  							AND RB2.CD_FUNDACAO = RB.CD_FUNDACAO  							AND FF2.CD_EMPRESA = FF.CD_EMPRESA  							AND RB2.CD_EMPRESA = RB.CD_EMPRESA  							AND FF2.CD_PLANO = FF.CD_PLANO                              AND FF2.CD_ESPECIE = FF.CD_ESPECIE                              AND FF2.ANO_PROCESSO = FF.ANO_PROCESSO                              AND FF2.NUM_PROCESSO = FF.NUM_PROCESSO  							AND RB2.NUM_MATRICULA = RB.NUM_MATRICULA  							AND FF2.SEQ_RECEBEDOR = FF.SEQ_RECEBEDOR)  ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, CD_ESPECIE, ANO_PROCESSO, NUM_PROCESSO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.* FROM GB_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB  ON FF.SEQ_RECEBEDOR=RB.SEQ_RECEBEDOR WHERE FF.CD_FUNDACAO=:CD_FUNDACAO AND RB.CD_FUNDACAO=:CD_FUNDACAO AND FF.CD_EMPRESA=:CD_EMPRESA AND RB.CD_EMPRESA=:CD_EMPRESA AND FF.CD_PLANO=:CD_PLANO AND FF.CD_ESPECIE=:CD_ESPECIE AND FF.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND FF.ANO_PROCESSO=:ANO_PROCESSO AND FF.NUM_PROCESSO=:NUM_PROCESSO AND RB.NUM_MATRICULA=:NUM_MATRICULA AND DT_REFERENCIA=(SELECT MAX(DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO  FF2  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB2  ON FF2.SEQ_RECEBEDOR=RB2.SEQ_RECEBEDOR WHERE FF2.CD_FUNDACAO=FF.CD_FUNDACAO AND RB2.CD_FUNDACAO=RB.CD_FUNDACAO AND FF2.CD_EMPRESA=FF.CD_EMPRESA AND RB2.CD_EMPRESA=RB.CD_EMPRESA AND FF2.CD_PLANO=FF.CD_PLANO AND FF2.CD_ESPECIE=FF.CD_ESPECIE AND FF2.ANO_PROCESSO=FF.ANO_PROCESSO AND FF2.NUM_PROCESSO=FF.NUM_PROCESSO AND RB2.NUM_MATRICULA=RB.NUM_MATRICULA AND FF2.SEQ_RECEBEDOR=FF.SEQ_RECEBEDOR) ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, CD_ESPECIE, ANO_PROCESSO, NUM_PROCESSO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> BuscarUltimaPorRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.*  FROM GB_FICHA_FINANC_ASSISTIDO FF  INNER JOIN GB_RECEBEDOR_BENEFICIO RB ON FF.SEQ_RECEBEDOR = RB.SEQ_RECEBEDOR  WHERE FF.CD_FUNDACAO = @CD_FUNDACAO    AND RB.CD_FUNDACAO = @CD_FUNDACAO    AND FF.CD_EMPRESA = @CD_EMPRESA    AND RB.CD_EMPRESA = @CD_EMPRESA    AND FF.CD_PLANO = @CD_PLANO    AND RB.NUM_MATRICULA = @NUM_MATRICULA    AND FF.SEQ_RECEBEDOR = @SEQ_RECEBEDOR  AND DT_REFERENCIA = (SELECT MAX(DT_REFERENCIA)  						FROM GB_FICHA_FINANC_ASSISTIDO FF2  						INNER JOIN GB_RECEBEDOR_BENEFICIO RB2 ON FF2.SEQ_RECEBEDOR = RB2.SEQ_RECEBEDOR  						WHERE FF2.CD_FUNDACAO = FF.CD_FUNDACAO  							AND RB2.CD_FUNDACAO = RB.CD_FUNDACAO  							AND FF2.CD_EMPRESA = FF.CD_EMPRESA  							AND RB2.CD_EMPRESA = RB.CD_EMPRESA  							AND FF2.CD_PLANO = FF.CD_PLANO  							AND RB2.NUM_MATRICULA = RB.NUM_MATRICULA  							AND FF2.SEQ_RECEBEDOR = FF.SEQ_RECEBEDOR)  ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT FF.* FROM GB_FICHA_FINANC_ASSISTIDO  FF  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB  ON FF.SEQ_RECEBEDOR=RB.SEQ_RECEBEDOR WHERE FF.CD_FUNDACAO=:CD_FUNDACAO AND RB.CD_FUNDACAO=:CD_FUNDACAO AND FF.CD_EMPRESA=:CD_EMPRESA AND RB.CD_EMPRESA=:CD_EMPRESA AND FF.CD_PLANO=:CD_PLANO AND RB.NUM_MATRICULA=:NUM_MATRICULA AND FF.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND DT_REFERENCIA=(SELECT MAX(DT_REFERENCIA) FROM GB_FICHA_FINANC_ASSISTIDO  FF2  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB2  ON FF2.SEQ_RECEBEDOR=RB2.SEQ_RECEBEDOR WHERE FF2.CD_FUNDACAO=FF.CD_FUNDACAO AND RB2.CD_FUNDACAO=RB.CD_FUNDACAO AND FF2.CD_EMPRESA=FF.CD_EMPRESA AND RB2.CD_EMPRESA=RB.CD_EMPRESA AND FF2.CD_PLANO=FF.CD_PLANO AND RB2.NUM_MATRICULA=RB.NUM_MATRICULA AND FF2.SEQ_RECEBEDOR=FF.SEQ_RECEBEDOR) ORDER BY DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> Metrus_BuscarPorFundacaoEmpresaMatriculaPlanoReferenciaTipoFolha(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO, DateTime DT_REFERENCIA, string CD_TIPO_FOLHA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA    AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA = @CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA=:CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<FichaFinanceiraAssistidoEntidade> Metrus_BuscarPorFundacaoEmpresaMatriculaPlanoReferenciaTipoFolhaRecebedor(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, int SEQ_RECEBEDOR, string CD_PLANO, DateTime DT_REFERENCIA, string CD_TIPO_FOLHA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*,         GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,         GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,         GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   TB_TIPO_FOLHA.DS_TIPO_FOLHA  FROM GB_FICHA_FINANC_ASSISTIDO  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR  INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA  INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE   INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA  WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO    AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA    AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO = @CD_PLANO    AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA = @NUM_MATRICULA    AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S'    AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA = @DT_REFERENCIA    AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA = @CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FichaFinanceiraAssistidoEntidade>("SELECT GB_FICHA_FINANC_ASSISTIDO.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, GB_RUBRICAS_PREVIDENCIAL.ID_RUB_SUPLEMENTACAO, GB_ESPECIE_BENEFICIO.DS_ESPECIE, TB_TIPO_FOLHA.DS_TIPO_FOLHA FROM GB_FICHA_FINANC_ASSISTIDO INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=GB_RECEBEDOR_BENEFICIO.SEQ_RECEBEDOR INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_FICHA_FINANC_ASSISTIDO.CD_RUBRICA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_FICHA_FINANC_ASSISTIDO.CD_ESPECIE INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA WHERE GB_FICHA_FINANC_ASSISTIDO.CD_FUNDACAO=:CD_FUNDACAO AND GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_FICHA_FINANC_ASSISTIDO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND GB_FICHA_FINANC_ASSISTIDO.CD_PLANO=:CD_PLANO AND GB_RECEBEDOR_BENEFICIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S' AND GB_FICHA_FINANC_ASSISTIDO.DT_REFERENCIA=:DT_REFERENCIA AND GB_FICHA_FINANC_ASSISTIDO.CD_TIPO_FOLHA=:CD_TIPO_FOLHA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, SEQ_RECEBEDOR, CD_PLANO, DT_REFERENCIA, CD_TIPO_FOLHA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

	}
}
