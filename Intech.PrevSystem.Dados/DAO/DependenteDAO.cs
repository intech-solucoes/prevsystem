using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Intech.PrevSystem.Dados.DAO
{
	public abstract class DependenteDAO : BaseDAO<DependenteEntidade>
	{
		public virtual void AtualizarDependente(string CD_FUNDACAO, string NUM_INSCRICAO, decimal NUM_SEQ_DEP, string NOME_DEP, string CD_GRAU_PARENTESCO, string SEXO_DEP, DateTime DT_NASC_DEP, string ABATIMENTO_IRRF, DateTime DT_VALIDADE_DEP, string CD_MOT_PERDA_VALIDADE, DateTime DT_INCLUSAO_DEP, DateTime? DT_INIC_IRRF, DateTime? DT_TERM_IRRF, string PECULIO, string NUM_PROTOCOLO, string CPF, string IDENTIDADE, string ORGAO_EXP, DateTime? DT_EXPEDICAO, string CD_PLANO, string CD_NACIONALIDADE, string CD_ESTADO_CIVIL, string NATURALIDADE, string UF_NATURALIDADE, string EMAIL_DEP, string FONE_CELULAR, string NUM_BANCO, string NUM_CONTA, string NUM_AGENCIA, string END_DEP, string COMP_END_DEP, string BAIRRO_DEP, string CID_DEP, string UF_DEP, string CD_PAIS, string FONE_DEP, string CEP_DEP)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					Conexao.Execute("UPDATE CS_DEPENDENTE  SET NOME_DEP = @NOME_DEP, CD_GRAU_PARENTESCO = @CD_GRAU_PARENTESCO, SEXO_DEP = @SEXO_DEP, DT_NASC_DEP = @DT_NASC_DEP, ABATIMENTO_IRRF = @ABATIMENTO_IRRF,  DT_VALIDADE_DEP = @DT_VALIDADE_DEP, CD_MOT_PERDA_VALIDADE = @CD_MOT_PERDA_VALIDADE, DT_INCLUSAO_DEP = @DT_INCLUSAO_DEP, DT_INIC_IRRF = @DT_INIC_IRRF,  DT_TERM_IRRF = @DT_TERM_IRRF, PECULIO = @PECULIO, NUM_PROTOCOLO = @NUM_PROTOCOLO, CPF = @CPF, IDENTIDADE = @IDENTIDADE, ORGAO_EXP = @ORGAO_EXP,  DT_EXPEDICAO = @DT_EXPEDICAO, CD_PLANO = @CD_PLANO, CD_NACIONALIDADE = @CD_NACIONALIDADE, CD_ESTADO_CIVIL = @CD_ESTADO_CIVIL, NATURALIDADE = @NATURALIDADE,  UF_NATURALIDADE = @UF_NATURALIDADE, EMAIL_DEP = @EMAIL_DEP, FONE_CELULAR = @FONE_CELULAR, NUM_BANCO = @NUM_BANCO, NUM_CONTA = @NUM_CONTA, NUM_AGENCIA = @NUM_AGENCIA,  END_DEP = @END_DEP, COMP_END_DEP = @COMP_END_DEP, BAIRRO_DEP = @BAIRRO_DEP, CID_DEP = @CID_DEP, UF_DEP = @UF_DEP, CD_PAIS = @CD_PAIS,  FONE_DEP = @FONE_DEP, CEP_DEP = @CEP_DEP   WHERE CD_FUNDACAO = @CD_FUNDACAO     AND NUM_INSCRICAO = @NUM_INSCRICAO    AND NUM_SEQ_DEP = @NUM_SEQ_DEP", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP, NOME_DEP, CD_GRAU_PARENTESCO, SEXO_DEP, DT_NASC_DEP, ABATIMENTO_IRRF, DT_VALIDADE_DEP, CD_MOT_PERDA_VALIDADE, DT_INCLUSAO_DEP, DT_INIC_IRRF, DT_TERM_IRRF, PECULIO, NUM_PROTOCOLO, CPF, IDENTIDADE, ORGAO_EXP, DT_EXPEDICAO, CD_PLANO, CD_NACIONALIDADE, CD_ESTADO_CIVIL, NATURALIDADE, UF_NATURALIDADE, EMAIL_DEP, FONE_CELULAR, NUM_BANCO, NUM_CONTA, NUM_AGENCIA, END_DEP, COMP_END_DEP, BAIRRO_DEP, CID_DEP, UF_DEP, CD_PAIS, FONE_DEP, CEP_DEP });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					Conexao.Execute("UPDATE CS_DEPENDENTE SET NOME_DEP=:NOME_DEP, CD_GRAU_PARENTESCO=:CD_GRAU_PARENTESCO, SEXO_DEP=:SEXO_DEP, DT_NASC_DEP=:DT_NASC_DEP, ABATIMENTO_IRRF=:ABATIMENTO_IRRF, DT_VALIDADE_DEP=:DT_VALIDADE_DEP, CD_MOT_PERDA_VALIDADE=:CD_MOT_PERDA_VALIDADE, DT_INCLUSAO_DEP=:DT_INCLUSAO_DEP, DT_INIC_IRRF=:DT_INIC_IRRF, DT_TERM_IRRF=:DT_TERM_IRRF, PECULIO=:PECULIO, NUM_PROTOCOLO=:NUM_PROTOCOLO, CPF=:CPF, IDENTIDADE=:IDENTIDADE, ORGAO_EXP=:ORGAO_EXP, DT_EXPEDICAO=:DT_EXPEDICAO, CD_PLANO=:CD_PLANO, CD_NACIONALIDADE=:CD_NACIONALIDADE, CD_ESTADO_CIVIL=:CD_ESTADO_CIVIL, NATURALIDADE=:NATURALIDADE, UF_NATURALIDADE=:UF_NATURALIDADE, EMAIL_DEP=:EMAIL_DEP, FONE_CELULAR=:FONE_CELULAR, NUM_BANCO=:NUM_BANCO, NUM_CONTA=:NUM_CONTA, NUM_AGENCIA=:NUM_AGENCIA, END_DEP=:END_DEP, COMP_END_DEP=:COMP_END_DEP, BAIRRO_DEP=:BAIRRO_DEP, CID_DEP=:CID_DEP, UF_DEP=:UF_DEP, CD_PAIS=:CD_PAIS, FONE_DEP=:FONE_DEP, CEP_DEP=:CEP_DEP WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND NUM_SEQ_DEP=:NUM_SEQ_DEP", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP, NOME_DEP, CD_GRAU_PARENTESCO, SEXO_DEP, DT_NASC_DEP, ABATIMENTO_IRRF, DT_VALIDADE_DEP, CD_MOT_PERDA_VALIDADE, DT_INCLUSAO_DEP, DT_INIC_IRRF, DT_TERM_IRRF, PECULIO, NUM_PROTOCOLO, CPF, IDENTIDADE, ORGAO_EXP, DT_EXPEDICAO, CD_PLANO, CD_NACIONALIDADE, CD_ESTADO_CIVIL, NATURALIDADE, UF_NATURALIDADE, EMAIL_DEP, FONE_CELULAR, NUM_BANCO, NUM_CONTA, NUM_AGENCIA, END_DEP, COMP_END_DEP, BAIRRO_DEP, CID_DEP, UF_DEP, CD_PAIS, FONE_DEP, CEP_DEP });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<DependenteEntidade> BuscarPorFundacaoInscricao(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *,  TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO    FROM CS_DEPENDENTE  INNER JOIN TB_GRAU_PARENTESCO ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO = CS_DEPENDENTE.CD_GRAU_PARENTESCO  WHERE CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO  ORDER BY NOME_DEP", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *, TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO FROM CS_DEPENDENTE INNER  JOIN TB_GRAU_PARENTESCO  ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO=CS_DEPENDENTE.CD_GRAU_PARENTESCO WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO ORDER BY NOME_DEP", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<DependenteEntidade> BuscarPorFundacaoInscricaoCdGrauParentescoPlanoPrevidencialFixo(string CD_FUNDACAO, string NUM_INSCRICAO, int CD_GRAU_PARENTESCO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO,         DEP.NUM_INSCRICAO,         DEP.NUM_SEQ_DEP,  	   GP.CD_GRAU_PARENTESCO,         GP.DS_GRAU_PARENTESCO,                DEP.NOME_DEP,         DEP.DT_NASC_DEP,         DEP.SEXO_DEP,                DEP.CPF,         DEP.PERC_PECULIO,  	   CD_PLANO  FROM CS_DEPENDENTE DEP    INNER JOIN TB_GRAU_PARENTESCO GP ON GP.CD_GRAU_PARENTESCO = DEP.CD_GRAU_PARENTESCO  WHERE DEP.CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO    AND GP.CD_GRAU_PARENTESCO = @CD_GRAU_PARENTESCO    AND PLANO_PREVIDENCIAL = 'S'  ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, NUM_INSCRICAO, CD_GRAU_PARENTESCO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO, DEP.NUM_INSCRICAO, DEP.NUM_SEQ_DEP, GP.CD_GRAU_PARENTESCO, GP.DS_GRAU_PARENTESCO, DEP.NOME_DEP, DEP.DT_NASC_DEP, DEP.SEXO_DEP, DEP.CPF, DEP.PERC_PECULIO, CD_PLANO FROM CS_DEPENDENTE  DEP  INNER  JOIN TB_GRAU_PARENTESCO   GP  ON GP.CD_GRAU_PARENTESCO=DEP.CD_GRAU_PARENTESCO WHERE DEP.CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND GP.CD_GRAU_PARENTESCO=:CD_GRAU_PARENTESCO AND PLANO_PREVIDENCIAL='S' ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, NUM_INSCRICAO, CD_GRAU_PARENTESCO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<DependenteEntidade> BuscarPorFundacaoInscricaoIRAssistido(string CD_FUNDACAO, string NUM_INSCRICAO, DateTime DATA_ATUAL)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO,         DEP.NUM_INSCRICAO,         DEP.NUM_SEQ_DEP,  	   GP.CD_GRAU_PARENTESCO,         GP.DS_GRAU_PARENTESCO,                DEP.NOME_DEP,         DEP.DT_NASC_DEP,         DEP.SEXO_DEP,                DEP.CPF,         DEP.DT_TERM_IRRF,         DEP.PERC_PECULIO  FROM CS_DEPENDENTE DEP    INNER JOIN TB_GRAU_PARENTESCO GP ON GP.CD_GRAU_PARENTESCO = DEP.CD_GRAU_PARENTESCO  WHERE DEP.CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO    AND CD_PLANO = (SELECT MAX(PV.CD_PLANO)                       FROM CS_PLANOS_VINC PV                     WHERE PV.CD_FUNDACAO= DEP.CD_FUNDACAO                       AND PV.NUM_INSCRICAO = DEP.NUM_INSCRICAO)                AND DEP.DT_TERM_IRRF >= @DATA_ATUAL  ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, NUM_INSCRICAO, DATA_ATUAL }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO, DEP.NUM_INSCRICAO, DEP.NUM_SEQ_DEP, GP.CD_GRAU_PARENTESCO, GP.DS_GRAU_PARENTESCO, DEP.NOME_DEP, DEP.DT_NASC_DEP, DEP.SEXO_DEP, DEP.CPF, DEP.DT_TERM_IRRF, DEP.PERC_PECULIO FROM CS_DEPENDENTE  DEP  INNER  JOIN TB_GRAU_PARENTESCO   GP  ON GP.CD_GRAU_PARENTESCO=DEP.CD_GRAU_PARENTESCO WHERE DEP.CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_PLANO=(SELECT MAX(PV.CD_PLANO) FROM CS_PLANOS_VINC  PV  WHERE PV.CD_FUNDACAO=DEP.CD_FUNDACAO AND PV.NUM_INSCRICAO=DEP.NUM_INSCRICAO) AND DEP.DT_TERM_IRRF>=:DATA_ATUAL ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, NUM_INSCRICAO, DATA_ATUAL }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<DependenteEntidade> BuscarPorFundacaoInscricaoPlano(string CD_FUNDACAO, string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *,  TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO    FROM CS_DEPENDENTE  INNER JOIN TB_GRAU_PARENTESCO ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO = CS_DEPENDENTE.CD_GRAU_PARENTESCO  WHERE CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO    AND CD_PLANO = @CD_PLANO  ORDER BY NOME_DEP", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *, TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO FROM CS_DEPENDENTE INNER  JOIN TB_GRAU_PARENTESCO  ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO=CS_DEPENDENTE.CD_GRAU_PARENTESCO WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_PLANO=:CD_PLANO ORDER BY NOME_DEP", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<DependenteEntidade> BuscarPorFundacaoInscricaoPlanoPlanoPrevidencialFixoOrderByGrauValidade(string CD_FUNDACAO, string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO,         DEP.NUM_INSCRICAO,         DEP.NUM_SEQ_DEP,  	   GP.CD_GRAU_PARENTESCO,         GP.DS_GRAU_PARENTESCO,                DEP.NOME_DEP,         DEP.DT_NASC_DEP,         DEP.SEXO_DEP,                DEP.CPF,         DEP.PERC_PECULIO,  	   CD_PLANO  FROM CS_DEPENDENTE DEP    INNER JOIN TB_GRAU_PARENTESCO GP ON GP.CD_GRAU_PARENTESCO = DEP.CD_GRAU_PARENTESCO  WHERE DEP.CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO    AND CD_PLANO = @CD_PLANO    AND PLANO_PREVIDENCIAL = 'S'  ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO, DEP.NUM_INSCRICAO, DEP.NUM_SEQ_DEP, GP.CD_GRAU_PARENTESCO, GP.DS_GRAU_PARENTESCO, DEP.NOME_DEP, DEP.DT_NASC_DEP, DEP.SEXO_DEP, DEP.CPF, DEP.PERC_PECULIO, CD_PLANO FROM CS_DEPENDENTE  DEP  INNER  JOIN TB_GRAU_PARENTESCO   GP  ON GP.CD_GRAU_PARENTESCO=DEP.CD_GRAU_PARENTESCO WHERE DEP.CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_PLANO=:CD_PLANO AND PLANO_PREVIDENCIAL='S' ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<DependenteEntidade> BuscarPorFundacaoInscricaoSeqDep(string CD_FUNDACAO, string NUM_INSCRICAO, string NUM_SEQ_DEP)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *,  TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO    FROM CS_DEPENDENTE  INNER JOIN TB_GRAU_PARENTESCO ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO = CS_DEPENDENTE.CD_GRAU_PARENTESCO  WHERE CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO    AND NUM_SEQ_DEP = @NUM_SEQ_DEP  ORDER BY NOME_DEP", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *, TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO FROM CS_DEPENDENTE INNER  JOIN TB_GRAU_PARENTESCO  ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO=CS_DEPENDENTE.CD_GRAU_PARENTESCO WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND NUM_SEQ_DEP=:NUM_SEQ_DEP ORDER BY NOME_DEP", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<DependenteEntidade> BuscarPorFundacaoSeqRecebedorIRPensionista(string CD_FUNDACAO, decimal SEQ_RECEBEDOR, DateTime DATA_ATUAL)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO,         DEP.NUM_INSCRICAO,         DEP.NUM_SEQ_DEP,  	   GP.CD_GRAU_PARENTESCO,         GP.DS_GRAU_PARENTESCO,                DEP.NOME_DEP,         DEP.DT_NASC_DEP,         DEP.SEXO_DEP,                DEP.CPF,         DEP.DT_TERM_IRRF,         DEP.PERC_PECULIO,         RB.SEQ_RECEBEDOR  FROM CS_DEPENDENTE DEP    INNER JOIN TB_GRAU_PARENTESCO GP ON GP.CD_GRAU_PARENTESCO = DEP.CD_GRAU_PARENTESCO    INNER JOIN GB_BENEFICIARIO_PREVIDENCIAL BP ON BP.CD_FUNDACAO = DEP.CD_FUNDACAO        AND BP.NUM_INSCRICAO = DEP.NUM_INSCRICAO        AND BP.NUM_SEQ_DEP = DEP.NUM_SEQ_DEP    INNER JOIN GB_RECEBEDOR_BENEFICIO RB ON RB.CD_FUNDACAO = BP.CD_FUNDACAO        AND RB.NUM_INSCRICAO = BP.NUM_INSCRICAO        AND RB.NUM_SEQ_GR_FAMIL = BP.NUM_SEQ_GR_FAMIL  WHERE DEP.CD_FUNDACAO = @CD_FUNDACAO    AND RB.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND DEP.DT_TERM_IRRF >= @DATA_ATUAL  ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, SEQ_RECEBEDOR, DATA_ATUAL }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO, DEP.NUM_INSCRICAO, DEP.NUM_SEQ_DEP, GP.CD_GRAU_PARENTESCO, GP.DS_GRAU_PARENTESCO, DEP.NOME_DEP, DEP.DT_NASC_DEP, DEP.SEXO_DEP, DEP.CPF, DEP.DT_TERM_IRRF, DEP.PERC_PECULIO, RB.SEQ_RECEBEDOR FROM CS_DEPENDENTE  DEP  INNER  JOIN TB_GRAU_PARENTESCO   GP  ON GP.CD_GRAU_PARENTESCO=DEP.CD_GRAU_PARENTESCO INNER  JOIN GB_BENEFICIARIO_PREVIDENCIAL   BP  ON BP.CD_FUNDACAO=DEP.CD_FUNDACAO AND BP.NUM_INSCRICAO=DEP.NUM_INSCRICAO AND BP.NUM_SEQ_DEP=DEP.NUM_SEQ_DEP INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB  ON RB.CD_FUNDACAO=BP.CD_FUNDACAO AND RB.NUM_INSCRICAO=BP.NUM_INSCRICAO AND RB.NUM_SEQ_GR_FAMIL=BP.NUM_SEQ_GR_FAMIL WHERE DEP.CD_FUNDACAO=:CD_FUNDACAO AND RB.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND DEP.DT_TERM_IRRF>=:DATA_ATUAL ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, SEQ_RECEBEDOR, DATA_ATUAL }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual void ExcluirDependente(string CD_FUNDACAO, string NUM_INSCRICAO, decimal NUM_SEQ_DEP)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					Conexao.Execute("DELETE FROM CS_DEPENDENTE   WHERE CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO =@NUM_INSCRICAO    AND NUM_SEQ_DEP = @NUM_SEQ_DEP", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					Conexao.Execute("DELETE FROM CS_DEPENDENTE WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND NUM_SEQ_DEP=:NUM_SEQ_DEP", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual void IncluirDependente(string CD_FUNDACAO, string NUM_INSCRICAO, decimal NUM_SEQ_DEP, string NOME_DEP, string CD_GRAU_PARENTESCO, string SEXO_DEP, DateTime DT_NASC_DEP, string ABATIMENTO_IRRF, DateTime DT_VALIDADE_DEP, string CD_MOT_PERDA_VALIDADE, DateTime DT_INCLUSAO_DEP, string PLANO_ASSISTENCIAL, string PLANO_PREVIDENCIAL, DateTime? DT_INIC_IRRF, DateTime? DT_TERM_IRRF, string PECULIO, string NUM_PROTOCOLO, string CPF, string IDENTIDADE, string ORGAO_EXP, DateTime? DT_EXPEDICAO, string CD_PLANO, string CD_NACIONALIDADE, string CD_ESTADO_CIVIL, string NATURALIDADE, string UF_NATURALIDADE, string EMAIL_DEP, string FONE_CELULAR, string NUM_BANCO, string NUM_CONTA, string NUM_AGENCIA, string END_DEP, string COMP_END_DEP, string BAIRRO_DEP, string CID_DEP, string UF_DEP, string CD_PAIS, string FONE_DEP, string CEP_DEP)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					Conexao.Execute("INSERT INTO CS_DEPENDENTE   ( CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP, NOME_DEP, CD_GRAU_PARENTESCO, SEXO_DEP, DT_NASC_DEP,    ABATIMENTO_IRRF, DT_VALIDADE_DEP, DT_INCLUSAO_DEP, PLANO_ASSISTENCIAL, PLANO_PREVIDENCIAL, CD_MOT_PERDA_VALIDADE, DT_INIC_IRRF,   DT_TERM_IRRF, PECULIO, NUM_PROTOCOLO, CPF, IDENTIDADE, ORGAO_EXP, DT_EXPEDICAO, CD_PLANO,    CD_NACIONALIDADE, CD_ESTADO_CIVIL, NATURALIDADE, UF_NATURALIDADE, EMAIL_DEP, FONE_CELULAR,    NUM_BANCO, NUM_CONTA, NUM_AGENCIA, END_DEP, COMP_END_DEP, BAIRRO_DEP, CID_DEP, UF_DEP, CD_PAIS, FONE_DEP, CEP_DEP  )  VALUES  (   @CD_FUNDACAO, @NUM_INSCRICAO, @NUM_SEQ_DEP, @NOME_DEP, @CD_GRAU_PARENTESCO, @SEXO_DEP, @DT_NASC_DEP,    @ABATIMENTO_IRRF, @DT_VALIDADE_DEP, @DT_INCLUSAO_DEP, @PLANO_ASSISTENCIAL, @PLANO_PREVIDENCIAL, @CD_MOT_PERDA_VALIDADE, @DT_INIC_IRRF,   @DT_TERM_IRRF, @PECULIO, @NUM_PROTOCOLO, @CPF, @IDENTIDADE, @ORGAO_EXP, @DT_EXPEDICAO, @CD_PLANO,    @CD_NACIONALIDADE, @CD_ESTADO_CIVIL, @NATURALIDADE, @UF_NATURALIDADE, @EMAIL_DEP, @FONE_CELULAR,    @NUM_BANCO, @NUM_CONTA, @NUM_AGENCIA, @END_DEP, @COMP_END_DEP, @BAIRRO_DEP, @CID_DEP, @UF_DEP, @CD_PAIS, @FONE_DEP, @CEP_DEP  )", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP, NOME_DEP, CD_GRAU_PARENTESCO, SEXO_DEP, DT_NASC_DEP, ABATIMENTO_IRRF, DT_VALIDADE_DEP, CD_MOT_PERDA_VALIDADE, DT_INCLUSAO_DEP, PLANO_ASSISTENCIAL, PLANO_PREVIDENCIAL, DT_INIC_IRRF, DT_TERM_IRRF, PECULIO, NUM_PROTOCOLO, CPF, IDENTIDADE, ORGAO_EXP, DT_EXPEDICAO, CD_PLANO, CD_NACIONALIDADE, CD_ESTADO_CIVIL, NATURALIDADE, UF_NATURALIDADE, EMAIL_DEP, FONE_CELULAR, NUM_BANCO, NUM_CONTA, NUM_AGENCIA, END_DEP, COMP_END_DEP, BAIRRO_DEP, CID_DEP, UF_DEP, CD_PAIS, FONE_DEP, CEP_DEP });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					Conexao.Execute("INSERT INTO CS_DEPENDENTE (CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP, NOME_DEP, CD_GRAU_PARENTESCO, SEXO_DEP, DT_NASC_DEP, ABATIMENTO_IRRF, DT_VALIDADE_DEP, DT_INCLUSAO_DEP, PLANO_ASSISTENCIAL, PLANO_PREVIDENCIAL, CD_MOT_PERDA_VALIDADE, DT_INIC_IRRF, DT_TERM_IRRF, PECULIO, NUM_PROTOCOLO, CPF, IDENTIDADE, ORGAO_EXP, DT_EXPEDICAO, CD_PLANO, CD_NACIONALIDADE, CD_ESTADO_CIVIL, NATURALIDADE, UF_NATURALIDADE, EMAIL_DEP, FONE_CELULAR, NUM_BANCO, NUM_CONTA, NUM_AGENCIA, END_DEP, COMP_END_DEP, BAIRRO_DEP, CID_DEP, UF_DEP, CD_PAIS, FONE_DEP, CEP_DEP) VALUES (:CD_FUNDACAO, :NUM_INSCRICAO, :NUM_SEQ_DEP, :NOME_DEP, :CD_GRAU_PARENTESCO, :SEXO_DEP, :DT_NASC_DEP, :ABATIMENTO_IRRF, :DT_VALIDADE_DEP, :DT_INCLUSAO_DEP, :PLANO_ASSISTENCIAL, :PLANO_PREVIDENCIAL, :CD_MOT_PERDA_VALIDADE, :DT_INIC_IRRF, :DT_TERM_IRRF, :PECULIO, :NUM_PROTOCOLO, :CPF, :IDENTIDADE, :ORGAO_EXP, :DT_EXPEDICAO, :CD_PLANO, :CD_NACIONALIDADE, :CD_ESTADO_CIVIL, :NATURALIDADE, :UF_NATURALIDADE, :EMAIL_DEP, :FONE_CELULAR, :NUM_BANCO, :NUM_CONTA, :NUM_AGENCIA, :END_DEP, :COMP_END_DEP, :BAIRRO_DEP, :CID_DEP, :UF_DEP, :CD_PAIS, :FONE_DEP, :CEP_DEP)", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP, NOME_DEP, CD_GRAU_PARENTESCO, SEXO_DEP, DT_NASC_DEP, ABATIMENTO_IRRF, DT_VALIDADE_DEP, CD_MOT_PERDA_VALIDADE, DT_INCLUSAO_DEP, PLANO_ASSISTENCIAL, PLANO_PREVIDENCIAL, DT_INIC_IRRF, DT_TERM_IRRF, PECULIO, NUM_PROTOCOLO, CPF, IDENTIDADE, ORGAO_EXP, DT_EXPEDICAO, CD_PLANO, CD_NACIONALIDADE, CD_ESTADO_CIVIL, NATURALIDADE, UF_NATURALIDADE, EMAIL_DEP, FONE_CELULAR, NUM_BANCO, NUM_CONTA, NUM_AGENCIA, END_DEP, COMP_END_DEP, BAIRRO_DEP, CID_DEP, UF_DEP, CD_PAIS, FONE_DEP, CEP_DEP });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual void Insert(string CD_FUNDACAO, string NUM_INSCRICAO, decimal NUM_SEQ_DEP, string NOME_DEP, string CD_GRAU_PARENTESCO, string SEXO_DEP, DateTime? DT_NASC_DEP, string ABATIMENTO_IRRF, DateTime? DT_VALIDADE_DEP, string CD_MOT_PERDA_VALIDADE, DateTime? DT_INCLUSAO_DEP, string PLANO_ASSISTENCIAL, string PLANO_PREVIDENCIAL, DateTime? DT_INIC_IRRF, DateTime? DT_TERM_IRRF, string PECULIO, decimal? PERC_PECULIO, string NUM_PROTOCOLO, DateTime? DT_INC_MOV, DateTime? DT_EXC_MOV, string CD_SIT_PLANO_MOV, string POLIT_EXP, string CPF, string IDENTIDADE, string ORGAO_EXP, DateTime? DT_EXPEDICAO, decimal? CD_OCUPACAO, string BENEF_IND, string CD_PLANO, string UF_IDENT_DEP, string CD_NACIONALIDADE, string CD_ESTADO_CIVIL, string NATURALIDADE, string UF_NATURALIDADE, string EMAIL_DEP, string FONE_CELULAR, string NOME_PAI, string NOME_MAE, string ISS, string NUM_BANCO, string NUM_AGENCIA, string NUM_CONTA, string END_DEP, string NR_END_DEP, string COMP_END_DEP, string BAIRRO_DEP, string CID_DEP, string UF_DEP, string CD_PAIS, string FONE_DEP, string FONE_COM_DEP, string CEP_DEP, string PLANO_SAUDE, DateTime? DT_RECONHECIMENTO, string CD_TIPO_CORRESP, string CX_POSTAL)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					Conexao.Execute("INSERT INTO CS_DEPENDENTE  (       CD_FUNDACAO      ,NUM_INSCRICAO      ,NUM_SEQ_DEP      ,NOME_DEP      ,CD_GRAU_PARENTESCO      ,SEXO_DEP      ,DT_NASC_DEP      ,ABATIMENTO_IRRF      ,DT_VALIDADE_DEP      ,CD_MOT_PERDA_VALIDADE      ,DT_INCLUSAO_DEP      ,PLANO_ASSISTENCIAL      ,PLANO_PREVIDENCIAL      ,DT_INIC_IRRF      ,DT_TERM_IRRF      ,PECULIO      ,PERC_PECULIO      ,NUM_PROTOCOLO      ,DT_INC_MOV      ,DT_EXC_MOV      ,CD_SIT_PLANO_MOV      ,POLIT_EXP      ,CPF      ,IDENTIDADE      ,ORGAO_EXP      ,DT_EXPEDICAO      ,CD_OCUPACAO      ,BENEF_IND      ,CD_PLANO      ,UF_IDENT_DEP      ,CD_NACIONALIDADE      ,CD_ESTADO_CIVIL      ,NATURALIDADE      ,UF_NATURALIDADE      ,EMAIL_DEP      ,FONE_CELULAR      ,NOME_PAI      ,NOME_MAE      ,ISS      ,NUM_BANCO      ,NUM_AGENCIA      ,NUM_CONTA      ,END_DEP      ,NR_END_DEP      ,COMP_END_DEP      ,BAIRRO_DEP      ,CID_DEP      ,UF_DEP      ,CD_PAIS      ,FONE_DEP      ,FONE_COM_DEP      ,CEP_DEP      ,PLANO_SAUDE      ,DT_RECONHECIMENTO      ,CD_TIPO_CORRESP      ,CX_POSTAL  )  VALUES  (       @CD_FUNDACAO      ,@NUM_INSCRICAO      ,@NUM_SEQ_DEP      ,@NOME_DEP      ,@CD_GRAU_PARENTESCO      ,@SEXO_DEP      ,@DT_NASC_DEP      ,@ABATIMENTO_IRRF      ,@DT_VALIDADE_DEP      ,@CD_MOT_PERDA_VALIDADE      ,@DT_INCLUSAO_DEP      ,@PLANO_ASSISTENCIAL      ,@PLANO_PREVIDENCIAL      ,@DT_INIC_IRRF      ,@DT_TERM_IRRF      ,@PECULIO      ,@PERC_PECULIO      ,@NUM_PROTOCOLO      ,@DT_INC_MOV      ,@DT_EXC_MOV      ,@CD_SIT_PLANO_MOV      ,@POLIT_EXP      ,@CPF      ,@IDENTIDADE      ,@ORGAO_EXP      ,@DT_EXPEDICAO      ,@CD_OCUPACAO      ,@BENEF_IND      ,@CD_PLANO      ,@UF_IDENT_DEP      ,@CD_NACIONALIDADE      ,@CD_ESTADO_CIVIL      ,@NATURALIDADE      ,@UF_NATURALIDADE      ,@EMAIL_DEP      ,@FONE_CELULAR      ,@NOME_PAI      ,@NOME_MAE      ,@ISS      ,@NUM_BANCO      ,@NUM_AGENCIA      ,@NUM_CONTA      ,@END_DEP      ,@NR_END_DEP      ,@COMP_END_DEP      ,@BAIRRO_DEP      ,@CID_DEP      ,@UF_DEP      ,@CD_PAIS      ,@FONE_DEP      ,@FONE_COM_DEP      ,@CEP_DEP      ,@PLANO_SAUDE      ,@DT_RECONHECIMENTO      ,@CD_TIPO_CORRESP      ,@CX_POSTAL  )", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP, NOME_DEP, CD_GRAU_PARENTESCO, SEXO_DEP, DT_NASC_DEP, ABATIMENTO_IRRF, DT_VALIDADE_DEP, CD_MOT_PERDA_VALIDADE, DT_INCLUSAO_DEP, PLANO_ASSISTENCIAL, PLANO_PREVIDENCIAL, DT_INIC_IRRF, DT_TERM_IRRF, PECULIO, PERC_PECULIO, NUM_PROTOCOLO, DT_INC_MOV, DT_EXC_MOV, CD_SIT_PLANO_MOV, POLIT_EXP, CPF, IDENTIDADE, ORGAO_EXP, DT_EXPEDICAO, CD_OCUPACAO, BENEF_IND, CD_PLANO, UF_IDENT_DEP, CD_NACIONALIDADE, CD_ESTADO_CIVIL, NATURALIDADE, UF_NATURALIDADE, EMAIL_DEP, FONE_CELULAR, NOME_PAI, NOME_MAE, ISS, NUM_BANCO, NUM_AGENCIA, NUM_CONTA, END_DEP, NR_END_DEP, COMP_END_DEP, BAIRRO_DEP, CID_DEP, UF_DEP, CD_PAIS, FONE_DEP, FONE_COM_DEP, CEP_DEP, PLANO_SAUDE, DT_RECONHECIMENTO, CD_TIPO_CORRESP, CX_POSTAL });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					Conexao.Execute("INSERT INTO CS_DEPENDENTE (CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP, NOME_DEP, CD_GRAU_PARENTESCO, SEXO_DEP, DT_NASC_DEP, ABATIMENTO_IRRF, DT_VALIDADE_DEP, CD_MOT_PERDA_VALIDADE, DT_INCLUSAO_DEP, PLANO_ASSISTENCIAL, PLANO_PREVIDENCIAL, DT_INIC_IRRF, DT_TERM_IRRF, PECULIO, PERC_PECULIO, NUM_PROTOCOLO, DT_INC_MOV, DT_EXC_MOV, CD_SIT_PLANO_MOV, POLIT_EXP, CPF, IDENTIDADE, ORGAO_EXP, DT_EXPEDICAO, CD_OCUPACAO, BENEF_IND, CD_PLANO, UF_IDENT_DEP, CD_NACIONALIDADE, CD_ESTADO_CIVIL, NATURALIDADE, UF_NATURALIDADE, EMAIL_DEP, FONE_CELULAR, NOME_PAI, NOME_MAE, ISS, NUM_BANCO, NUM_AGENCIA, NUM_CONTA, END_DEP, NR_END_DEP, COMP_END_DEP, BAIRRO_DEP, CID_DEP, UF_DEP, CD_PAIS, FONE_DEP, FONE_COM_DEP, CEP_DEP, PLANO_SAUDE, DT_RECONHECIMENTO, CD_TIPO_CORRESP, CX_POSTAL) VALUES (:CD_FUNDACAO, :NUM_INSCRICAO, :NUM_SEQ_DEP, :NOME_DEP, :CD_GRAU_PARENTESCO, :SEXO_DEP, :DT_NASC_DEP, :ABATIMENTO_IRRF, :DT_VALIDADE_DEP, :CD_MOT_PERDA_VALIDADE, :DT_INCLUSAO_DEP, :PLANO_ASSISTENCIAL, :PLANO_PREVIDENCIAL, :DT_INIC_IRRF, :DT_TERM_IRRF, :PECULIO, :PERC_PECULIO, :NUM_PROTOCOLO, :DT_INC_MOV, :DT_EXC_MOV, :CD_SIT_PLANO_MOV, :POLIT_EXP, :CPF, :IDENTIDADE, :ORGAO_EXP, :DT_EXPEDICAO, :CD_OCUPACAO, :BENEF_IND, :CD_PLANO, :UF_IDENT_DEP, :CD_NACIONALIDADE, :CD_ESTADO_CIVIL, :NATURALIDADE, :UF_NATURALIDADE, :EMAIL_DEP, :FONE_CELULAR, :NOME_PAI, :NOME_MAE, :ISS, :NUM_BANCO, :NUM_AGENCIA, :NUM_CONTA, :END_DEP, :NR_END_DEP, :COMP_END_DEP, :BAIRRO_DEP, :CID_DEP, :UF_DEP, :CD_PAIS, :FONE_DEP, :FONE_COM_DEP, :CEP_DEP, :PLANO_SAUDE, :DT_RECONHECIMENTO, :CD_TIPO_CORRESP, :CX_POSTAL)", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_DEP, NOME_DEP, CD_GRAU_PARENTESCO, SEXO_DEP, DT_NASC_DEP, ABATIMENTO_IRRF, DT_VALIDADE_DEP, CD_MOT_PERDA_VALIDADE, DT_INCLUSAO_DEP, PLANO_ASSISTENCIAL, PLANO_PREVIDENCIAL, DT_INIC_IRRF, DT_TERM_IRRF, PECULIO, PERC_PECULIO, NUM_PROTOCOLO, DT_INC_MOV, DT_EXC_MOV, CD_SIT_PLANO_MOV, POLIT_EXP, CPF, IDENTIDADE, ORGAO_EXP, DT_EXPEDICAO, CD_OCUPACAO, BENEF_IND, CD_PLANO, UF_IDENT_DEP, CD_NACIONALIDADE, CD_ESTADO_CIVIL, NATURALIDADE, UF_NATURALIDADE, EMAIL_DEP, FONE_CELULAR, NOME_PAI, NOME_MAE, ISS, NUM_BANCO, NUM_AGENCIA, NUM_CONTA, END_DEP, NR_END_DEP, COMP_END_DEP, BAIRRO_DEP, CID_DEP, UF_DEP, CD_PAIS, FONE_DEP, FONE_COM_DEP, CEP_DEP, PLANO_SAUDE, DT_RECONHECIMENTO, CD_TIPO_CORRESP, CX_POSTAL });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual int ObterUltimoSequencial(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT MAX(NUM_SEQ_DEP) AS NUM_SEQ_DEP   FROM CS_DEPENDENTE  WHERE CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO", new { CD_FUNDACAO, NUM_INSCRICAO });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT MAX(NUM_SEQ_DEP) AS NUM_SEQ_DEP FROM CS_DEPENDENTE WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO", new { CD_FUNDACAO, NUM_INSCRICAO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

	}
}
