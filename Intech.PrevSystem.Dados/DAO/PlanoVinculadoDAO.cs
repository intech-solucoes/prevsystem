#region Usings
using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
#endregion

namespace Intech.PrevSystem.Dados.DAO
{   
    public abstract class PlanoVinculadoDAO : BaseDAO<PlanoVinculadoEntidade>
    {
        
		public virtual IEnumerable<PlanoVinculadoEntidade> BuscarPorFundacaoEmpresaCpf(string CD_FUNDACAO, string CD_EMPRESA, string CPF)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,         TB_CATEGORIA.CD_CATEGORIA,         TB_CATEGORIA.DS_CATEGORIA,         TB_PLANOS.DS_PLANO,        CS_PLANOS_VINC.* FROM   CS_PLANOS_VINC  INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                      AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO  INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO  LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO  INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA  WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )         AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )         AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )         AND ( CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA )         AND ( EE_ENTIDADE.CPF_CGC = @CPF )        AND ( TB_CATEGORIA.CD_CATEGORIA <> '2' )", new { CD_FUNDACAO, CD_EMPRESA, CPF });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_PLANOS.DS_PLANO, CS_PLANOS_VINC.* FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA) AND (EE_ENTIDADE.CPF_CGC=:CPF) AND (TB_CATEGORIA.CD_CATEGORIA<>'2')", new { CD_FUNDACAO, CD_EMPRESA, CPF });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<PlanoVinculadoEntidade> BuscarPorFundacaoEmpresaCpfPensionista(string CD_FUNDACAO, string CD_EMPRESA, string CPF)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,         TB_CATEGORIA.CD_CATEGORIA,         TB_CATEGORIA.DS_CATEGORIA,         TB_PLANOS.DS_PLANO,        CS_PLANOS_VINC.* FROM   CS_PLANOS_VINC  INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                      AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO  INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO  LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST  INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_RECEBEDOR_BENEFICIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO  INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = GB_RECEBEDOR_BENEFICIO.COD_ENTID INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA  WHERE  ( GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO )         AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )         AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )         AND ( GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA )         AND ( EE_ENTIDADE.CPF_CGC =  @CPF )        AND ( TB_CATEGORIA.CD_CATEGORIA <> '2' )", new { CD_FUNDACAO, CD_EMPRESA, CPF });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_PLANOS.DS_PLANO, CS_PLANOS_VINC.* FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_RECEBEDOR_BENEFICIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=GB_RECEBEDOR_BENEFICIO.COD_ENTID INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA) AND (EE_ENTIDADE.CPF_CGC=:CPF) AND (TB_CATEGORIA.CD_CATEGORIA<>'2')", new { CD_FUNDACAO, CD_EMPRESA, CPF });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<PlanoVinculadoEntidade> BuscarPorFundacaoEmpresaMatricula(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,         TB_CATEGORIA.CD_CATEGORIA,         TB_CATEGORIA.DS_CATEGORIA,         TB_SIT_PLANO.DS_SIT_PLANO,        TB_PLANOS.DS_PLANO,        TB_PLANOS.COD_CNPB,        CS_PLANOS_VINC.* FROM   CS_PLANOS_VINC  INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                      AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO  INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO  LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO  INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA  WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )         AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )         AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )         AND ( CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA )         AND ( CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA )        AND ( TB_CATEGORIA.CD_CATEGORIA <> '2' )", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.* FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA) AND (CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA) AND (TB_CATEGORIA.CD_CATEGORIA<>'2')", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual PlanoVinculadoEntidade BuscarPorFundacaoEmpresaMatriculaPlano(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,         TB_CATEGORIA.CD_CATEGORIA,         TB_CATEGORIA.DS_CATEGORIA,         TB_SIT_PLANO.DS_SIT_PLANO,        TB_PLANOS.DS_PLANO,        TB_PLANOS.COD_CNPB,        CS_PLANOS_VINC.* FROM   CS_PLANOS_VINC  INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                      AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO  INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO  LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO  INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA  WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )         AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )         AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )         AND ( CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA )         AND ( CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA )        AND ( TB_CATEGORIA.CD_CATEGORIA <> '2' )        AND ( CS_PLANOS_VINC.CD_PLANO = @CD_PLANO )", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.* FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA) AND (CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA) AND (TB_CATEGORIA.CD_CATEGORIA<>'2') AND (CS_PLANOS_VINC.CD_PLANO=:CD_PLANO)", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<PlanoVinculadoEntidade> BuscarPorFundacaoMatricula(string CD_FUNDACAO, string NUM_MATRICULA)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,         TB_CATEGORIA.CD_CATEGORIA,         TB_CATEGORIA.DS_CATEGORIA,         TB_SIT_PLANO.DS_SIT_PLANO,        TB_PLANOS.DS_PLANO,        TB_PLANOS.COD_CNPB,        CS_PLANOS_VINC.*, 	   CS_FUNCIONARIO.CD_EMPRESA FROM   CS_PLANOS_VINC  INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                      AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO  INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO  LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO  INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA  WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )         AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )         AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA )        AND ( TB_CATEGORIA.CD_CATEGORIA <> '2' )", new { CD_FUNDACAO, NUM_MATRICULA });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.*, CS_FUNCIONARIO.CD_EMPRESA FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA) AND (TB_CATEGORIA.CD_CATEGORIA<>'2')", new { CD_FUNDACAO, NUM_MATRICULA });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual int MigradoPlano1(string NUM_INSCRICAO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT COUNT(CD_SIT_PLANO) FROM CS_PLANOS_VINC WHERE NUM_INSCRICAO = @NUM_INSCRICAO   AND CD_PLANO = '0001'   AND CD_SIT_PLANO = '09'", new { NUM_INSCRICAO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT COUNT(CD_SIT_PLANO) FROM CS_PLANOS_VINC WHERE NUM_INSCRICAO=:NUM_INSCRICAO AND CD_PLANO='0001' AND CD_SIT_PLANO='09'", new { NUM_INSCRICAO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

    }
}
