using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Intech.PrevSystem.Dados.DAO
{
	public abstract class HeaderInfoRendDAO : BaseDAO<HeaderInfoRendEntidade>
	{
		public HeaderInfoRendDAO (IDbTransaction tx = null) : base(tx) { }

		public virtual List<HeaderInfoRendEntidade> BuscarPorCPF(string CPF)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*,     EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA,     EE_ENTIDADE.CPF_CGC    AS CNPJ_EMPRESA, 	('' + CAST(TB_HEADER_INFO_REND.ANO_EXERCICIO AS VARCHAR(10)) + ' - ' + TB_HEADER_INFO_REND.DESC_NATUREZA) AS ANO_EXERCICIO_DESC_NATUREZA FROM   TB_HEADER_INFO_REND INNER JOIN TB_EMPRESA ON TB_HEADER_INFO_REND.CD_EMPRESA = TB_EMPRESA.CD_EMPRESA INNER JOIN TB_FUNDACAO ON TB_EMPRESA.CD_FUNDACAO = TB_FUNDACAO.CD_FUNDACAO INNER JOIN EE_ENTIDADE ON TB_FUNDACAO.COD_ENTID = EE_ENTIDADE.COD_ENTID WHERE TB_HEADER_INFO_REND.CPF = @CPF ORDER BY TB_HEADER_INFO_REND.ANO_EXERCICIO DESC", new { CPF }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*, EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA, EE_ENTIDADE.CPF_CGC AS CNPJ_EMPRESA, ('' || TO_CHAR(TB_HEADER_INFO_REND.ANO_EXERCICIO) || ' - ' || TB_HEADER_INFO_REND.DESC_NATUREZA) AS ANO_EXERCICIO_DESC_NATUREZA FROM TB_HEADER_INFO_REND INNER  JOIN TB_EMPRESA  ON TB_HEADER_INFO_REND.CD_EMPRESA=TB_EMPRESA.CD_EMPRESA INNER  JOIN TB_FUNDACAO  ON TB_EMPRESA.CD_FUNDACAO=TB_FUNDACAO.CD_FUNDACAO INNER  JOIN EE_ENTIDADE  ON TB_FUNDACAO.COD_ENTID=EE_ENTIDADE.COD_ENTID WHERE TB_HEADER_INFO_REND.CPF=:CPF ORDER BY TB_HEADER_INFO_REND.ANO_EXERCICIO DESC", new { CPF }, Transaction).ToList();
				else
					throw new Exception("Provider n達o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<HeaderInfoRendEntidade> BuscarPorCPFAnoCalendario(string CPF, decimal ANO_CALENDARIO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*,     EE_FUNC.NOME_ENTID AS NOME,     EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA,     EE_ENTIDADE.CPF_CGC    AS CNPJ_EMPRESA FROM   TB_HEADER_INFO_REND INNER JOIN TB_EMPRESA ON TB_HEADER_INFO_REND.CD_EMPRESA = TB_EMPRESA.CD_EMPRESA INNER JOIN TB_FUNDACAO ON TB_EMPRESA.CD_FUNDACAO = TB_FUNDACAO.CD_FUNDACAO INNER JOIN EE_ENTIDADE ON TB_FUNDACAO.COD_ENTID = EE_ENTIDADE.COD_ENTID INNER JOIN CS_FUNCIONARIO FUNC ON FUNC.NUM_MATRICULA = TB_HEADER_INFO_REND.NUM_MATRICULA INNER JOIN EE_ENTIDADE EE_FUNC ON EE_FUNC.CPF_CGC = TB_HEADER_INFO_REND.CPF WHERE TB_HEADER_INFO_REND.CPF = @CPF   AND TB_HEADER_INFO_REND.ANO_CALENDARIO = @ANO_CALENDARIO", new { CPF, ANO_CALENDARIO }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*, EE_FUNC.NOME_ENTID AS NOME, EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA, EE_ENTIDADE.CPF_CGC AS CNPJ_EMPRESA FROM TB_HEADER_INFO_REND INNER  JOIN TB_EMPRESA  ON TB_HEADER_INFO_REND.CD_EMPRESA=TB_EMPRESA.CD_EMPRESA INNER  JOIN TB_FUNDACAO  ON TB_EMPRESA.CD_FUNDACAO=TB_FUNDACAO.CD_FUNDACAO INNER  JOIN EE_ENTIDADE  ON TB_FUNDACAO.COD_ENTID=EE_ENTIDADE.COD_ENTID INNER  JOIN CS_FUNCIONARIO   FUNC  ON FUNC.NUM_MATRICULA=TB_HEADER_INFO_REND.NUM_MATRICULA INNER  JOIN EE_ENTIDADE   EE_FUNC  ON EE_FUNC.CPF_CGC=TB_HEADER_INFO_REND.CPF WHERE TB_HEADER_INFO_REND.CPF=:CPF AND TB_HEADER_INFO_REND.ANO_CALENDARIO=:ANO_CALENDARIO", new { CPF, ANO_CALENDARIO }, Transaction).ToList();
				else
					throw new Exception("Provider n達o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<HeaderInfoRendEntidade> BuscarPorEmpresaMatricula(string CD_EMPRESA, string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*,     EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA,     EE_ENTIDADE.CPF_CGC    AS CNPJ_EMPRESA FROM   TB_HEADER_INFO_REND INNER JOIN TB_EMPRESA ON TB_HEADER_INFO_REND.CD_EMPRESA = TB_EMPRESA.CD_EMPRESA INNER JOIN TB_FUNDACAO ON TB_EMPRESA.CD_FUNDACAO = TB_FUNDACAO.CD_FUNDACAO INNER JOIN EE_ENTIDADE ON TB_FUNDACAO.COD_ENTID = EE_ENTIDADE.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA = @NUM_MATRICULA   AND TB_HEADER_INFO_REND.CD_EMPRESA = @CD_EMPRESA ORDER BY TB_HEADER_INFO_REND.ANO_CALENDARIO DESC", new { CD_EMPRESA, NUM_MATRICULA }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*, EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA, EE_ENTIDADE.CPF_CGC AS CNPJ_EMPRESA FROM TB_HEADER_INFO_REND INNER  JOIN TB_EMPRESA  ON TB_HEADER_INFO_REND.CD_EMPRESA=TB_EMPRESA.CD_EMPRESA INNER  JOIN TB_FUNDACAO  ON TB_EMPRESA.CD_FUNDACAO=TB_FUNDACAO.CD_FUNDACAO INNER  JOIN EE_ENTIDADE  ON TB_FUNDACAO.COD_ENTID=EE_ENTIDADE.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA=:NUM_MATRICULA AND TB_HEADER_INFO_REND.CD_EMPRESA=:CD_EMPRESA ORDER BY TB_HEADER_INFO_REND.ANO_CALENDARIO DESC", new { CD_EMPRESA, NUM_MATRICULA }, Transaction).ToList();
				else
					throw new Exception("Provider n達o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<HeaderInfoRendEntidade> BuscarPorEmpresaMatriculaAnoCalendario(string CD_EMPRESA, string NUM_MATRICULA, decimal ANO_CALENDARIO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*,     EE_FUNC.NOME_ENTID AS NOME,     EE_FUNC.CPF_CGC AS CPF,     EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA,     EE_ENTIDADE.CPF_CGC    AS CNPJ_EMPRESA FROM   TB_HEADER_INFO_REND INNER JOIN TB_EMPRESA ON TB_HEADER_INFO_REND.CD_EMPRESA = TB_EMPRESA.CD_EMPRESA INNER JOIN TB_FUNDACAO ON TB_EMPRESA.CD_FUNDACAO = TB_FUNDACAO.CD_FUNDACAO INNER JOIN EE_ENTIDADE ON TB_FUNDACAO.COD_ENTID = EE_ENTIDADE.COD_ENTID INNER JOIN CS_FUNCIONARIO FUNC ON FUNC.NUM_MATRICULA = TB_HEADER_INFO_REND.NUM_MATRICULA 							  AND FUNC.CD_EMPRESA = TB_HEADER_INFO_REND.CD_EMPRESA INNER JOIN EE_ENTIDADE EE_FUNC ON EE_FUNC.COD_ENTID = FUNC.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA = @NUM_MATRICULA   AND TB_HEADER_INFO_REND.ANO_CALENDARIO = @ANO_CALENDARIO   AND TB_HEADER_INFO_REND.CD_EMPRESA = @CD_EMPRESA", new { CD_EMPRESA, NUM_MATRICULA, ANO_CALENDARIO }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*, EE_FUNC.NOME_ENTID AS NOME, EE_FUNC.CPF_CGC AS CPF, EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA, EE_ENTIDADE.CPF_CGC AS CNPJ_EMPRESA FROM TB_HEADER_INFO_REND INNER  JOIN TB_EMPRESA  ON TB_HEADER_INFO_REND.CD_EMPRESA=TB_EMPRESA.CD_EMPRESA INNER  JOIN TB_FUNDACAO  ON TB_EMPRESA.CD_FUNDACAO=TB_FUNDACAO.CD_FUNDACAO INNER  JOIN EE_ENTIDADE  ON TB_FUNDACAO.COD_ENTID=EE_ENTIDADE.COD_ENTID INNER  JOIN CS_FUNCIONARIO   FUNC  ON FUNC.NUM_MATRICULA=TB_HEADER_INFO_REND.NUM_MATRICULA AND FUNC.CD_EMPRESA=TB_HEADER_INFO_REND.CD_EMPRESA INNER  JOIN EE_ENTIDADE   EE_FUNC  ON EE_FUNC.COD_ENTID=FUNC.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA=:NUM_MATRICULA AND TB_HEADER_INFO_REND.ANO_CALENDARIO=:ANO_CALENDARIO AND TB_HEADER_INFO_REND.CD_EMPRESA=:CD_EMPRESA", new { CD_EMPRESA, NUM_MATRICULA, ANO_CALENDARIO }, Transaction).ToList();
				else
					throw new Exception("Provider n達o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<HeaderInfoRendEntidade> BuscarPorEmpresaMatriculaAnoCalendarioSeqRecebedor(string CD_EMPRESA, string NUM_MATRICULA, decimal ANO_CALENDARIO, decimal SEQ_RECEBEDOR)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*,     EE_FUNC.NOME_ENTID AS NOME,     EE_FUNC.CPF_CGC AS CPF,     EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA,     EE_ENTIDADE.CPF_CGC    AS CNPJ_EMPRESA FROM   TB_HEADER_INFO_REND INNER JOIN TB_EMPRESA ON TB_HEADER_INFO_REND.CD_EMPRESA = TB_EMPRESA.CD_EMPRESA INNER JOIN TB_FUNDACAO ON TB_EMPRESA.CD_FUNDACAO = TB_FUNDACAO.CD_FUNDACAO INNER JOIN EE_ENTIDADE ON TB_FUNDACAO.COD_ENTID = EE_ENTIDADE.COD_ENTID INNER JOIN GB_RECEBEDOR_BENEFICIO RECEBEDOR ON RECEBEDOR.NUM_MATRICULA = TB_HEADER_INFO_REND.NUM_MATRICULA 							               AND RECEBEDOR.CD_EMPRESA = TB_HEADER_INFO_REND.CD_EMPRESA INNER JOIN EE_ENTIDADE EE_FUNC ON EE_FUNC.COD_ENTID = RECEBEDOR.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA = @NUM_MATRICULA   AND TB_HEADER_INFO_REND.ANO_CALENDARIO = @ANO_CALENDARIO   AND TB_HEADER_INFO_REND.CD_EMPRESA = @CD_EMPRESA   AND RECEBEDOR.SEQ_RECEBEDOR = @SEQ_RECEBEDOR", new { CD_EMPRESA, NUM_MATRICULA, ANO_CALENDARIO, SEQ_RECEBEDOR }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*, EE_FUNC.NOME_ENTID AS NOME, EE_FUNC.CPF_CGC AS CPF, EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA, EE_ENTIDADE.CPF_CGC AS CNPJ_EMPRESA FROM TB_HEADER_INFO_REND INNER  JOIN TB_EMPRESA  ON TB_HEADER_INFO_REND.CD_EMPRESA=TB_EMPRESA.CD_EMPRESA INNER  JOIN TB_FUNDACAO  ON TB_EMPRESA.CD_FUNDACAO=TB_FUNDACAO.CD_FUNDACAO INNER  JOIN EE_ENTIDADE  ON TB_FUNDACAO.COD_ENTID=EE_ENTIDADE.COD_ENTID INNER  JOIN GB_RECEBEDOR_BENEFICIO   RECEBEDOR  ON RECEBEDOR.NUM_MATRICULA=TB_HEADER_INFO_REND.NUM_MATRICULA AND RECEBEDOR.CD_EMPRESA=TB_HEADER_INFO_REND.CD_EMPRESA INNER  JOIN EE_ENTIDADE   EE_FUNC  ON EE_FUNC.COD_ENTID=RECEBEDOR.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA=:NUM_MATRICULA AND TB_HEADER_INFO_REND.ANO_CALENDARIO=:ANO_CALENDARIO AND TB_HEADER_INFO_REND.CD_EMPRESA=:CD_EMPRESA AND RECEBEDOR.SEQ_RECEBEDOR=:SEQ_RECEBEDOR", new { CD_EMPRESA, NUM_MATRICULA, ANO_CALENDARIO, SEQ_RECEBEDOR }, Transaction).ToList();
				else
					throw new Exception("Provider n達o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<HeaderInfoRendEntidade> BuscarPorMatricula(string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*,     EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA,     EE_ENTIDADE.CPF_CGC    AS CNPJ_EMPRESA FROM   TB_HEADER_INFO_REND INNER JOIN TB_EMPRESA ON TB_HEADER_INFO_REND.CD_EMPRESA = TB_EMPRESA.CD_EMPRESA INNER JOIN TB_FUNDACAO ON TB_EMPRESA.CD_FUNDACAO = TB_FUNDACAO.CD_FUNDACAO INNER JOIN EE_ENTIDADE ON TB_FUNDACAO.COD_ENTID = EE_ENTIDADE.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA = @NUM_MATRICULA ORDER BY TB_HEADER_INFO_REND.ANO_CALENDARIO DESC", new { NUM_MATRICULA }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*, EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA, EE_ENTIDADE.CPF_CGC AS CNPJ_EMPRESA FROM TB_HEADER_INFO_REND INNER  JOIN TB_EMPRESA  ON TB_HEADER_INFO_REND.CD_EMPRESA=TB_EMPRESA.CD_EMPRESA INNER  JOIN TB_FUNDACAO  ON TB_EMPRESA.CD_FUNDACAO=TB_FUNDACAO.CD_FUNDACAO INNER  JOIN EE_ENTIDADE  ON TB_FUNDACAO.COD_ENTID=EE_ENTIDADE.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA=:NUM_MATRICULA ORDER BY TB_HEADER_INFO_REND.ANO_CALENDARIO DESC", new { NUM_MATRICULA }, Transaction).ToList();
				else
					throw new Exception("Provider n達o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<HeaderInfoRendEntidade> BuscarPorMatriculaAnoCalendario(string NUM_MATRICULA, decimal ANO_CALENDARIO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*,     EE_FUNC.NOME_ENTID AS NOME,     EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA,     EE_ENTIDADE.CPF_CGC    AS CNPJ_EMPRESA FROM   TB_HEADER_INFO_REND INNER JOIN TB_EMPRESA ON TB_HEADER_INFO_REND.CD_EMPRESA = TB_EMPRESA.CD_EMPRESA INNER JOIN TB_FUNDACAO ON TB_EMPRESA.CD_FUNDACAO = TB_FUNDACAO.CD_FUNDACAO INNER JOIN EE_ENTIDADE ON TB_FUNDACAO.COD_ENTID = EE_ENTIDADE.COD_ENTID INNER JOIN CS_FUNCIONARIO FUNC ON FUNC.NUM_MATRICULA = TB_HEADER_INFO_REND.NUM_MATRICULA INNER JOIN EE_ENTIDADE EE_FUNC ON EE_FUNC.COD_ENTID = FUNC.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA = @NUM_MATRICULA   AND TB_HEADER_INFO_REND.ANO_CALENDARIO = @ANO_CALENDARIO", new { NUM_MATRICULA, ANO_CALENDARIO }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*, EE_FUNC.NOME_ENTID AS NOME, EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA, EE_ENTIDADE.CPF_CGC AS CNPJ_EMPRESA FROM TB_HEADER_INFO_REND INNER  JOIN TB_EMPRESA  ON TB_HEADER_INFO_REND.CD_EMPRESA=TB_EMPRESA.CD_EMPRESA INNER  JOIN TB_FUNDACAO  ON TB_EMPRESA.CD_FUNDACAO=TB_FUNDACAO.CD_FUNDACAO INNER  JOIN EE_ENTIDADE  ON TB_FUNDACAO.COD_ENTID=EE_ENTIDADE.COD_ENTID INNER  JOIN CS_FUNCIONARIO   FUNC  ON FUNC.NUM_MATRICULA=TB_HEADER_INFO_REND.NUM_MATRICULA INNER  JOIN EE_ENTIDADE   EE_FUNC  ON EE_FUNC.COD_ENTID=FUNC.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA=:NUM_MATRICULA AND TB_HEADER_INFO_REND.ANO_CALENDARIO=:ANO_CALENDARIO", new { NUM_MATRICULA, ANO_CALENDARIO }, Transaction).ToList();
				else
					throw new Exception("Provider n達o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<HeaderInfoRendEntidade> BuscarPorMatriculaAnoCalendarioSeqRecebedor(string NUM_MATRICULA, decimal ANO_CALENDARIO, decimal SEQ_RECEBEDOR)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*,     EE_FUNC.NOME_ENTID AS NOME,     EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA,     EE_ENTIDADE.CPF_CGC    AS CNPJ_EMPRESA FROM   TB_HEADER_INFO_REND INNER JOIN TB_EMPRESA ON TB_HEADER_INFO_REND.CD_EMPRESA = TB_EMPRESA.CD_EMPRESA INNER JOIN TB_FUNDACAO ON TB_EMPRESA.CD_FUNDACAO = TB_FUNDACAO.CD_FUNDACAO INNER JOIN EE_ENTIDADE ON TB_FUNDACAO.COD_ENTID = EE_ENTIDADE.COD_ENTID INNER JOIN GB_RECEBEDOR_BENEFICIO RECEBEDOR ON RECEBEDOR.NUM_MATRICULA = TB_HEADER_INFO_REND.NUM_MATRICULA INNER JOIN EE_ENTIDADE EE_FUNC ON EE_FUNC.COD_ENTID = RECEBEDOR.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA = @NUM_MATRICULA   AND TB_HEADER_INFO_REND.ANO_CALENDARIO = @ANO_CALENDARIO   AND RECEBEDOR.SEQ_RECEBEDOR = @SEQ_RECEBEDOR", new { NUM_MATRICULA, ANO_CALENDARIO, SEQ_RECEBEDOR }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*, EE_FUNC.NOME_ENTID AS NOME, EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA, EE_ENTIDADE.CPF_CGC AS CNPJ_EMPRESA FROM TB_HEADER_INFO_REND INNER  JOIN TB_EMPRESA  ON TB_HEADER_INFO_REND.CD_EMPRESA=TB_EMPRESA.CD_EMPRESA INNER  JOIN TB_FUNDACAO  ON TB_EMPRESA.CD_FUNDACAO=TB_FUNDACAO.CD_FUNDACAO INNER  JOIN EE_ENTIDADE  ON TB_FUNDACAO.COD_ENTID=EE_ENTIDADE.COD_ENTID INNER  JOIN GB_RECEBEDOR_BENEFICIO   RECEBEDOR  ON RECEBEDOR.NUM_MATRICULA=TB_HEADER_INFO_REND.NUM_MATRICULA INNER  JOIN EE_ENTIDADE   EE_FUNC  ON EE_FUNC.COD_ENTID=RECEBEDOR.COD_ENTID WHERE TB_HEADER_INFO_REND.NUM_MATRICULA=:NUM_MATRICULA AND TB_HEADER_INFO_REND.ANO_CALENDARIO=:ANO_CALENDARIO AND RECEBEDOR.SEQ_RECEBEDOR=:SEQ_RECEBEDOR", new { NUM_MATRICULA, ANO_CALENDARIO, SEQ_RECEBEDOR }, Transaction).ToList();
				else
					throw new Exception("Provider n達o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<HeaderInfoRendEntidade> BuscarPorOidHeaderInfoHend(decimal OID_HEADER_INFO_REND)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*,     EE_FUNC.NOME_ENTID AS NOME,     EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA,     EE_ENTIDADE.CPF_CGC    AS CNPJ_EMPRESA FROM   TB_HEADER_INFO_REND INNER JOIN TB_EMPRESA ON TB_HEADER_INFO_REND.CD_EMPRESA = TB_EMPRESA.CD_EMPRESA INNER JOIN TB_FUNDACAO ON TB_EMPRESA.CD_FUNDACAO = TB_FUNDACAO.CD_FUNDACAO INNER JOIN EE_ENTIDADE ON TB_FUNDACAO.COD_ENTID = EE_ENTIDADE.COD_ENTID INNER JOIN CS_FUNCIONARIO FUNC ON FUNC.NUM_MATRICULA = TB_HEADER_INFO_REND.NUM_MATRICULA INNER JOIN EE_ENTIDADE EE_FUNC ON EE_FUNC.CPF_CGC = TB_HEADER_INFO_REND.CPF WHERE TB_HEADER_INFO_REND.OID_HEADER_INFO_REND = @OID_HEADER_INFO_REND", new { OID_HEADER_INFO_REND }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<HeaderInfoRendEntidade>("SELECT TB_HEADER_INFO_REND.*, EE_FUNC.NOME_ENTID AS NOME, EE_ENTIDADE.NOME_ENTID AS NOM_EMPRESA, EE_ENTIDADE.CPF_CGC AS CNPJ_EMPRESA FROM TB_HEADER_INFO_REND INNER  JOIN TB_EMPRESA  ON TB_HEADER_INFO_REND.CD_EMPRESA=TB_EMPRESA.CD_EMPRESA INNER  JOIN TB_FUNDACAO  ON TB_EMPRESA.CD_FUNDACAO=TB_FUNDACAO.CD_FUNDACAO INNER  JOIN EE_ENTIDADE  ON TB_FUNDACAO.COD_ENTID=EE_ENTIDADE.COD_ENTID INNER  JOIN CS_FUNCIONARIO   FUNC  ON FUNC.NUM_MATRICULA=TB_HEADER_INFO_REND.NUM_MATRICULA INNER  JOIN EE_ENTIDADE   EE_FUNC  ON EE_FUNC.CPF_CGC=TB_HEADER_INFO_REND.CPF WHERE TB_HEADER_INFO_REND.OID_HEADER_INFO_REND=:OID_HEADER_INFO_REND", new { OID_HEADER_INFO_REND }, Transaction).ToList();
				else
					throw new Exception("Provider n達o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

	}
}