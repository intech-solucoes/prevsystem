#region Usings
using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
#endregion

namespace Intech.PrevSystem.Dados.DAO
{   
    public abstract class DependenteDAO : BaseDAO<DependenteEntidade>
    {
        
		public virtual IEnumerable<DependenteEntidade> BuscarPorFundacaoInscricao(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *,  TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO    FROM CS_DEPENDENTE  INNER JOIN TB_GRAU_PARENTESCO ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO = CS_DEPENDENTE.CD_GRAU_PARENTESCO  WHERE CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO", new { CD_FUNDACAO, NUM_INSCRICAO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *, TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO FROM CS_DEPENDENTE INNER  JOIN TB_GRAU_PARENTESCO  ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO=CS_DEPENDENTE.CD_GRAU_PARENTESCO WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO", new { CD_FUNDACAO, NUM_INSCRICAO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<DependenteEntidade> BuscarPorFundacaoInscricaoIRAssistido(string CD_FUNDACAO, string NUM_INSCRICAO, DateTime DATA_ATUAL)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO,         DEP.NUM_INSCRICAO,         DEP.NUM_SEQ_DEP,         GP.DS_GRAU_PARENTESCO,                DEP.NOME_DEP,         DEP.DT_NASC_DEP,         DEP.SEXO_DEP,                DEP.CPF,         DEP.DT_TERM_IRRF,         DEP.PERC_PECULIO  FROM CS_DEPENDENTE DEP    INNER JOIN TB_GRAU_PARENTESCO GP ON GP.CD_GRAU_PARENTESCO = DEP.CD_GRAU_PARENTESCO  WHERE DEP.CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO    AND CD_PLANO = (SELECT MAX(PV.CD_PLANO)                       FROM CS_PLANOS_VINC PV                     WHERE PV.CD_FUNDACAO= DEP.CD_FUNDACAO                       AND PV.NUM_INSCRICAO = DEP.NUM_INSCRICAO)                AND DEP.DT_TERM_IRRF >= @DATA_ATUAL  ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, NUM_INSCRICAO, DATA_ATUAL });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO, DEP.NUM_INSCRICAO, DEP.NUM_SEQ_DEP, GP.DS_GRAU_PARENTESCO, DEP.NOME_DEP, DEP.DT_NASC_DEP, DEP.SEXO_DEP, DEP.CPF, DEP.DT_TERM_IRRF, DEP.PERC_PECULIO FROM CS_DEPENDENTE  DEP  INNER  JOIN TB_GRAU_PARENTESCO   GP  ON GP.CD_GRAU_PARENTESCO=DEP.CD_GRAU_PARENTESCO WHERE DEP.CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_PLANO=(SELECT MAX(PV.CD_PLANO) FROM CS_PLANOS_VINC  PV  WHERE PV.CD_FUNDACAO=DEP.CD_FUNDACAO AND PV.NUM_INSCRICAO=DEP.NUM_INSCRICAO) AND DEP.DT_TERM_IRRF>=:DATA_ATUAL ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, NUM_INSCRICAO, DATA_ATUAL });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<DependenteEntidade> BuscarPorFundacaoInscricaoPlano(string CD_FUNDACAO, string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *,  TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO    FROM CS_DEPENDENTE  INNER JOIN TB_GRAU_PARENTESCO ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO = CS_DEPENDENTE.CD_GRAU_PARENTESCO  WHERE CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO    AND CD_PLANO = @CD_PLANO", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT *, TB_GRAU_PARENTESCO.DS_GRAU_PARENTESCO FROM CS_DEPENDENTE INNER  JOIN TB_GRAU_PARENTESCO  ON TB_GRAU_PARENTESCO.CD_GRAU_PARENTESCO=CS_DEPENDENTE.CD_GRAU_PARENTESCO WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_PLANO=:CD_PLANO", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<DependenteEntidade> BuscarPorFundacaoInscricaoPlanoPlanoPrevidencialFixoOrderByGrauValidade(string CD_FUNDACAO, string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO,         DEP.NUM_INSCRICAO,         DEP.NUM_SEQ_DEP,  	   GP.CD_GRAU_PARENTESCO,         GP.DS_GRAU_PARENTESCO,                DEP.NOME_DEP,         DEP.DT_NASC_DEP,         DEP.SEXO_DEP,                DEP.CPF,         DEP.PERC_PECULIO,  	   CD_PLANO  FROM CS_DEPENDENTE DEP    INNER JOIN TB_GRAU_PARENTESCO GP ON GP.CD_GRAU_PARENTESCO = DEP.CD_GRAU_PARENTESCO  WHERE DEP.CD_FUNDACAO = @CD_FUNDACAO    AND NUM_INSCRICAO = @NUM_INSCRICAO    AND CD_PLANO = @CD_PLANO    AND PLANO_PREVIDENCIAL = 'S' --FIXO  ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO, DEP.NUM_INSCRICAO, DEP.NUM_SEQ_DEP, GP.CD_GRAU_PARENTESCO, GP.DS_GRAU_PARENTESCO, DEP.NOME_DEP, DEP.DT_NASC_DEP, DEP.SEXO_DEP, DEP.CPF, DEP.PERC_PECULIO, CD_PLANO FROM CS_DEPENDENTE  DEP  INNER  JOIN TB_GRAU_PARENTESCO   GP  ON GP.CD_GRAU_PARENTESCO=DEP.CD_GRAU_PARENTESCO WHERE DEP.CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_PLANO=:CD_PLANO AND PLANO_PREVIDENCIAL='S' - -", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<DependenteEntidade> BuscarPorFundacaoSeqRecebedorIRPensionista(string CD_FUNDACAO, decimal SEQ_RECEBEDOR, DateTime DATA_ATUAL)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO,         DEP.NUM_INSCRICAO,         DEP.NUM_SEQ_DEP,         GP.DS_GRAU_PARENTESCO,                DEP.NOME_DEP,         DEP.DT_NASC_DEP,         DEP.SEXO_DEP,                DEP.CPF,         DEP.DT_TERM_IRRF,         DEP.PERC_PECULIO,         RB.SEQ_RECEBEDOR  FROM CS_DEPENDENTE DEP    INNER JOIN TB_GRAU_PARENTESCO GP ON GP.CD_GRAU_PARENTESCO = DEP.CD_GRAU_PARENTESCO    INNER JOIN GB_BENEFICIARIO_PREVIDENCIAL BP ON BP.CD_FUNDACAO = DEP.CD_FUNDACAO        AND BP.NUM_INSCRICAO = DEP.NUM_INSCRICAO        AND BP.NUM_SEQ_DEP = DEP.NUM_SEQ_DEP    INNER JOIN GB_RECEBEDOR_BENEFICIO RB ON RB.CD_FUNDACAO = BP.CD_FUNDACAO        AND RB.NUM_INSCRICAO = BP.NUM_INSCRICAO        AND RB.NUM_SEQ_GR_FAMIL = BP.NUM_SEQ_GR_FAMIL  WHERE DEP.CD_FUNDACAO = @CD_FUNDACAO    AND RB.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND DEP.DT_TERM_IRRF >= @DATA_ATUAL  ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, SEQ_RECEBEDOR, DATA_ATUAL });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<DependenteEntidade>("SELECT DEP.CD_FUNDACAO, DEP.NUM_INSCRICAO, DEP.NUM_SEQ_DEP, GP.DS_GRAU_PARENTESCO, DEP.NOME_DEP, DEP.DT_NASC_DEP, DEP.SEXO_DEP, DEP.CPF, DEP.DT_TERM_IRRF, DEP.PERC_PECULIO, RB.SEQ_RECEBEDOR FROM CS_DEPENDENTE  DEP  INNER  JOIN TB_GRAU_PARENTESCO   GP  ON GP.CD_GRAU_PARENTESCO=DEP.CD_GRAU_PARENTESCO INNER  JOIN GB_BENEFICIARIO_PREVIDENCIAL   BP  ON BP.CD_FUNDACAO=DEP.CD_FUNDACAO AND BP.NUM_INSCRICAO=DEP.NUM_INSCRICAO AND BP.NUM_SEQ_DEP=DEP.NUM_SEQ_DEP INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB  ON RB.CD_FUNDACAO=BP.CD_FUNDACAO AND RB.NUM_INSCRICAO=BP.NUM_INSCRICAO AND RB.NUM_SEQ_GR_FAMIL=BP.NUM_SEQ_GR_FAMIL WHERE DEP.CD_FUNDACAO=:CD_FUNDACAO AND RB.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND DEP.DT_TERM_IRRF>=:DATA_ATUAL ORDER BY GP.TIPO_VALIDADE DESC", new { CD_FUNDACAO, SEQ_RECEBEDOR, DATA_ATUAL });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

    }
}
