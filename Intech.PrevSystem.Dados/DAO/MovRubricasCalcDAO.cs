using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Intech.PrevSystem.Dados.DAO
{
	public abstract class MovRubricasCalcDAO : BaseDAO<MovRubricasCalcEntidade>
	{
		public MovRubricasCalcDAO (IDbTransaction tx = null) : base(tx) { }

		public virtual List<MovRubricasCalcEntidade> BuscarPrevias(string CD_FUNDACAO, string CD_EMPRESA, string CD_PLANO, string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<MovRubricasCalcEntidade>("SELECT GB_MOV_RUBRICAS_CALC.*,        GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA,        GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC,        TB_TIPO_FOLHA.DS_TIPO_FOLHA,        GB_ESPECIE_BENEFICIO.DS_ESPECIE FROM   GB_MOV_RUBRICAS_CALC INNER JOIN GB_RUBRICAS_PREVIDENCIAL ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA = GB_MOV_RUBRICAS_CALC.CD_RUBRICA INNER JOIN TB_TIPO_FOLHA ON TB_TIPO_FOLHA.CD_TIPO_FOLHA = GB_MOV_RUBRICAS_CALC.CD_TIPO_FOLHA INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_MOV_RUBRICAS_CALC.CD_ESPECIE WHERE  ( GB_MOV_RUBRICAS_CALC.CD_FUNDACAO = @CD_FUNDACAO )        AND ( GB_MOV_RUBRICAS_CALC.CD_EMPRESA = @CD_EMPRESA )        AND ( GB_MOV_RUBRICAS_CALC.CD_PLANO = @CD_PLANO )        AND ( GB_MOV_RUBRICAS_CALC.NUM_MATRICULA = @NUM_MATRICULA )        AND ( GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA = 'S' )        AND ( GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO = 'S' )        AND ( GB_MOV_RUBRICAS_CALC.DT_REFERENCIA IN (SELECT DT_REFERENCIA                                                     FROM   GB_CRONOG_PROC                                                     WHERE  ( ID_PREVIA = 'S' ))            )", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, NUM_MATRICULA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<MovRubricasCalcEntidade>("SELECT GB_MOV_RUBRICAS_CALC.*, GB_RUBRICAS_PREVIDENCIAL.DS_RUBRICA, GB_RUBRICAS_PREVIDENCIAL.RUBRICA_PROV_DESC, TB_TIPO_FOLHA.DS_TIPO_FOLHA, GB_ESPECIE_BENEFICIO.DS_ESPECIE FROM GB_MOV_RUBRICAS_CALC INNER  JOIN GB_RUBRICAS_PREVIDENCIAL  ON GB_RUBRICAS_PREVIDENCIAL.CD_RUBRICA=GB_MOV_RUBRICAS_CALC.CD_RUBRICA INNER  JOIN TB_TIPO_FOLHA  ON TB_TIPO_FOLHA.CD_TIPO_FOLHA=GB_MOV_RUBRICAS_CALC.CD_TIPO_FOLHA INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_MOV_RUBRICAS_CALC.CD_ESPECIE WHERE (GB_MOV_RUBRICAS_CALC.CD_FUNDACAO=:CD_FUNDACAO) AND (GB_MOV_RUBRICAS_CALC.CD_EMPRESA=:CD_EMPRESA) AND (GB_MOV_RUBRICAS_CALC.CD_PLANO=:CD_PLANO) AND (GB_MOV_RUBRICAS_CALC.NUM_MATRICULA=:NUM_MATRICULA) AND (GB_RUBRICAS_PREVIDENCIAL.EMITE_FOLHA='S') AND (GB_RUBRICAS_PREVIDENCIAL.INCID_LIQUIDO='S') AND (GB_MOV_RUBRICAS_CALC.DT_REFERENCIA IN (SELECT DT_REFERENCIA FROM GB_CRONOG_PROC WHERE (ID_PREVIA='S')))", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, NUM_MATRICULA }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

	}
}