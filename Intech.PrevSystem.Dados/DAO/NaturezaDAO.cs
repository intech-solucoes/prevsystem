#region Usings
using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
#endregion

namespace Intech.PrevSystem.Dados.DAO
{   
    public abstract class NaturezaDAO : BaseDAO<NaturezaEntidade>
    {
        
		public virtual NaturezaEntidade BuscarPorCdNatur(decimal CD_NATUR)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<NaturezaEntidade>("SELECT *  FROM CE_NATUREZA  WHERE CD_NATUR = @CD_NATUR", new { CD_NATUR });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<NaturezaEntidade>("SELECT * FROM CE_NATUREZA WHERE CD_NATUR=:CD_NATUR", new { CD_NATUR });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<NaturezaEntidade> BuscarPorModalidadePlanoCategoria(decimal CD_MODAL, string CD_PLANO, string ATIVO, string ASSISTIDO, string AUTOPATROCINADO, string DIFERIDO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<NaturezaEntidade>("SELECT CE_NATUREZA.*  FROM CE_NATUREZA  INNER JOIN CE_GRUPO_NATUREZA ON CE_GRUPO_NATUREZA.CD_GRUPO = CE_NATUREZA.CD_GRUPO  INNER JOIN CE_MODALIDADE ON CE_MODALIDADE.CD_MODAL = CE_GRUPO_NATUREZA.CD_MODAL  WHERE CE_MODALIDADE.CD_MODAL = @CD_MODAL    AND (CE_GRUPO_NATUREZA.CD_PLANO = @CD_PLANO OR @CD_PLANO IS NULL)    AND (CE_NATUREZA.SITUACAO = 'A')    AND (CE_NATUREZA.CATEGORIA_ATIVO = @ATIVO OR @ATIVO IS NULL)    AND (CE_NATUREZA.CATEGORIA_ASSISTIDO = @ASSISTIDO OR @ASSISTIDO IS NULL)    AND (CE_NATUREZA.CATEGORIA_AUTOPATROCINADO = @AUTOPATROCINADO OR @AUTOPATROCINADO IS NULL)    AND (CE_NATUREZA.CATEGORIA_DIFERIDO = @DIFERIDO OR @DIFERIDO IS NULL)  ORDER BY PRAZO_MIN", new { CD_MODAL, CD_PLANO, ATIVO, ASSISTIDO, AUTOPATROCINADO, DIFERIDO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<NaturezaEntidade>("SELECT CE_NATUREZA.* FROM CE_NATUREZA INNER  JOIN CE_GRUPO_NATUREZA  ON CE_GRUPO_NATUREZA.CD_GRUPO=CE_NATUREZA.CD_GRUPO INNER  JOIN CE_MODALIDADE  ON CE_MODALIDADE.CD_MODAL=CE_GRUPO_NATUREZA.CD_MODAL WHERE CE_MODALIDADE.CD_MODAL=:CD_MODAL AND (CE_GRUPO_NATUREZA.CD_PLANO=:CD_PLANO OR :CD_PLANO IS NULL ) AND (CE_NATUREZA.SITUACAO='A') AND (CE_NATUREZA.CATEGORIA_ATIVO=:ATIVO OR :ATIVO IS NULL ) AND (CE_NATUREZA.CATEGORIA_ASSISTIDO=:ASSISTIDO OR :ASSISTIDO IS NULL ) AND (CE_NATUREZA.CATEGORIA_AUTOPATROCINADO=:AUTOPATROCINADO OR :AUTOPATROCINADO IS NULL ) AND (CE_NATUREZA.CATEGORIA_DIFERIDO=:DIFERIDO OR :DIFERIDO IS NULL ) ORDER BY PRAZO_MIN", new { CD_MODAL, CD_PLANO, ATIVO, ASSISTIDO, AUTOPATROCINADO, DIFERIDO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<NaturezaEntidade> BuscarPorModalidadePlanoCategoriaTempoContrib(decimal CD_MODAL, string CD_PLANO, string ATIVO, string ASSISTIDO, string AUTOPATROCINADO, string DIFERIDO, int TEMPO_CONTRIBUICAO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<NaturezaEntidade>("SELECT CE_NATUREZA.*  FROM CE_NATUREZA  INNER JOIN CE_GRUPO_NATUREZA ON CE_GRUPO_NATUREZA.CD_GRUPO = CE_NATUREZA.CD_GRUPO  INNER JOIN CE_MODALIDADE ON CE_MODALIDADE.CD_MODAL = CE_GRUPO_NATUREZA.CD_MODAL  WHERE CE_MODALIDADE.CD_MODAL = @CD_MODAL    AND (CE_GRUPO_NATUREZA.CD_PLANO = @CD_PLANO OR @CD_PLANO IS NULL)    AND (CE_NATUREZA.SITUACAO = 'A')    AND (CE_NATUREZA.CATEGORIA_ATIVO = @ATIVO OR @ATIVO IS NULL)    AND (CE_NATUREZA.CATEGORIA_ASSISTIDO = @ASSISTIDO OR @ASSISTIDO IS NULL)    AND (CE_NATUREZA.CATEGORIA_AUTOPATROCINADO = @AUTOPATROCINADO OR @AUTOPATROCINADO IS NULL)    AND (CE_NATUREZA.CATEGORIA_DIFERIDO = @DIFERIDO OR @DIFERIDO IS NULL)    AND CE_NATUREZA.TEMPO_TIPO_CONTRIBUICAO = @TEMPO_CONTRIBUICAO  ORDER BY PRAZO_MIN", new { CD_MODAL, CD_PLANO, ATIVO, ASSISTIDO, AUTOPATROCINADO, DIFERIDO, TEMPO_CONTRIBUICAO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<NaturezaEntidade>("SELECT CE_NATUREZA.* FROM CE_NATUREZA INNER  JOIN CE_GRUPO_NATUREZA  ON CE_GRUPO_NATUREZA.CD_GRUPO=CE_NATUREZA.CD_GRUPO INNER  JOIN CE_MODALIDADE  ON CE_MODALIDADE.CD_MODAL=CE_GRUPO_NATUREZA.CD_MODAL WHERE CE_MODALIDADE.CD_MODAL=:CD_MODAL AND (CE_GRUPO_NATUREZA.CD_PLANO=:CD_PLANO OR :CD_PLANO IS NULL ) AND (CE_NATUREZA.SITUACAO='A') AND (CE_NATUREZA.CATEGORIA_ATIVO=:ATIVO OR :ATIVO IS NULL ) AND (CE_NATUREZA.CATEGORIA_ASSISTIDO=:ASSISTIDO OR :ASSISTIDO IS NULL ) AND (CE_NATUREZA.CATEGORIA_AUTOPATROCINADO=:AUTOPATROCINADO OR :AUTOPATROCINADO IS NULL ) AND (CE_NATUREZA.CATEGORIA_DIFERIDO=:DIFERIDO OR :DIFERIDO IS NULL ) AND CE_NATUREZA.TEMPO_TIPO_CONTRIBUICAO=:TEMPO_CONTRIBUICAO ORDER BY PRAZO_MIN", new { CD_MODAL, CD_PLANO, ATIVO, ASSISTIDO, AUTOPATROCINADO, DIFERIDO, TEMPO_CONTRIBUICAO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

    }
}
