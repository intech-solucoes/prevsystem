using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Intech.PrevSystem.Dados.DAO
{
	public abstract class FuncionarioDAO : BaseDAO<FuncionarioEntidade>
	{
		public virtual FuncionarioEntidade BuscarNomePorCdFundacaoCdEmpresaNumMatricula(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT EE.NOME_ENTID  FROM CS_FUNCIONARIO FN  	INNER JOIN EE_ENTIDADE EE ON EE.COD_ENTID = FN.COD_ENTID  WHERE FN.CD_FUNDACAO = @CD_FUNDACAO      AND FN.CD_EMPRESA = @CD_EMPRESA    AND FN.NUM_MATRICULA = @NUM_MATRICULA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT EE.NOME_ENTID FROM CS_FUNCIONARIO  FN  INNER  JOIN EE_ENTIDADE   EE  ON EE.COD_ENTID=FN.COD_ENTID WHERE FN.CD_FUNDACAO=:CD_FUNDACAO AND FN.CD_EMPRESA=:CD_EMPRESA AND FN.NUM_MATRICULA=:NUM_MATRICULA", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual FuncionarioEntidade BuscarPorCodEntid(string COD_ENTID)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT  	EE_ENTIDADE.NOME_ENTID,       	TB_LOTACAO.DS_LOTACAO,  	TB_CARGO.DS_CARGO,  	CS_FUNCIONARIO.*   FROM CS_FUNCIONARIO   INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID   LEFT JOIN TB_LOTACAO ON TB_LOTACAO.CD_LOTACAO = CS_FUNCIONARIO.CD_LOTACAO                      AND TB_LOTACAO.CD_EMPRESA = CS_FUNCIONARIO.CD_EMPRESA  LEFT JOIN TB_CARGO ON TB_CARGO.CD_CARGO = CS_FUNCIONARIO.CD_CARGO                    AND TB_CARGO.CD_EMPRESA = CS_FUNCIONARIO.CD_EMPRESA  WHERE CS_FUNCIONARIO.COD_ENTID = @COD_ENTID  ORDER BY CS_FUNCIONARIO.DT_ADMISSAO DESC", new { COD_ENTID });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID, TB_LOTACAO.DS_LOTACAO, TB_CARGO.DS_CARGO, CS_FUNCIONARIO.* FROM CS_FUNCIONARIO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID LEFT JOIN TB_LOTACAO  ON TB_LOTACAO.CD_LOTACAO=CS_FUNCIONARIO.CD_LOTACAO AND TB_LOTACAO.CD_EMPRESA=CS_FUNCIONARIO.CD_EMPRESA LEFT JOIN TB_CARGO  ON TB_CARGO.CD_CARGO=CS_FUNCIONARIO.CD_CARGO AND TB_CARGO.CD_EMPRESA=CS_FUNCIONARIO.CD_EMPRESA WHERE CS_FUNCIONARIO.COD_ENTID=:COD_ENTID ORDER BY CS_FUNCIONARIO.DT_ADMISSAO DESC", new { COD_ENTID });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<FuncionarioEntidade> BuscarPorCpf(string CPF)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID,      CS_PLANOS_VINC.CD_SIT_PLANO,      CS_FUNCIONARIO.*   FROM CS_FUNCIONARIO   INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID   INNER JOIN CS_PLANOS_VINC ON CS_PLANOS_VINC.CD_FUNDACAO = CS_FUNCIONARIO.CD_FUNDACAO                           AND CS_PLANOS_VINC.NUM_INSCRICAO = CS_FUNCIONARIO.NUM_INSCRICAO  INNER JOIN TB_SIT_PLANO ON TB_SIT_PLANO.CD_SIT_PLANO = CS_PLANOS_VINC.CD_SIT_PLANO  WHERE EE_ENTIDADE.CPF_CGC = @CPF   ORDER BY DT_ADMISSAO DESC", new { CPF }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID, CS_PLANOS_VINC.CD_SIT_PLANO, CS_FUNCIONARIO.* FROM CS_FUNCIONARIO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID INNER  JOIN CS_PLANOS_VINC  ON CS_PLANOS_VINC.CD_FUNDACAO=CS_FUNCIONARIO.CD_FUNDACAO AND CS_PLANOS_VINC.NUM_INSCRICAO=CS_FUNCIONARIO.NUM_INSCRICAO INNER  JOIN TB_SIT_PLANO  ON TB_SIT_PLANO.CD_SIT_PLANO=CS_PLANOS_VINC.CD_SIT_PLANO WHERE EE_ENTIDADE.CPF_CGC=:CPF ORDER BY DT_ADMISSAO DESC", new { CPF }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual FuncionarioEntidade BuscarPorInscricao(string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT        	EE_ENTIDADE.NOME_ENTID,       	CS_FUNCIONARIO.*   FROM CS_FUNCIONARIO   INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID   WHERE CS_FUNCIONARIO.NUM_INSCRICAO = @NUM_INSCRICAO", new { NUM_INSCRICAO });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID, CS_FUNCIONARIO.* FROM CS_FUNCIONARIO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID WHERE CS_FUNCIONARIO.NUM_INSCRICAO=:NUM_INSCRICAO", new { NUM_INSCRICAO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual FuncionarioEntidade BuscarPorMatricula(string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT        	EE_ENTIDADE.NOME_ENTID,       	CS_FUNCIONARIO.*   FROM CS_FUNCIONARIO   INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID   WHERE CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA", new { NUM_MATRICULA });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID, CS_FUNCIONARIO.* FROM CS_FUNCIONARIO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID WHERE CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA", new { NUM_MATRICULA });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual FuncionarioEntidade BuscarPorMatriculaEmpresa(string NUM_MATRICULA, string CD_EMPRESA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT        	EE_ENTIDADE.NOME_ENTID,       	CS_FUNCIONARIO.*   FROM CS_FUNCIONARIO   INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID   WHERE CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA  AND CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA", new { NUM_MATRICULA, CD_EMPRESA });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID, CS_FUNCIONARIO.* FROM CS_FUNCIONARIO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID WHERE CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA AND CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA", new { NUM_MATRICULA, CD_EMPRESA });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<FuncionarioEntidade> BuscarPorPesquisa(string CD_FUNDACAO, string CD_EMPRESA, string CD_PLANO, string CD_SIT_PLANO, string NUM_MATRICULA, string NOME, string CPF)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT DISTINCT *  FROM   VW_FUNC_PLANO_DADOS  WHERE (CD_FUNDACAO = @CD_FUNDACAO OR @CD_FUNDACAO IS NULL)    AND (CD_EMPRESA = @CD_EMPRESA OR @CD_EMPRESA IS NULL)    AND (CD_PLANO = @CD_PLANO OR @CD_PLANO IS NULL)    AND (CD_SIT_PLANO = @CD_SIT_PLANO OR @CD_SIT_PLANO IS NULL)    AND (NUM_MATRICULA LIKE '%' + @NUM_MATRICULA + '%' OR @NUM_MATRICULA IS NULL)     AND (NOME_ENTID LIKE '%' + @NOME + '%' OR @NOME IS NULL)    AND (CPF_CGC LIKE '' + @CPF + '%' OR @CPF IS NULL)", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, CD_SIT_PLANO, NUM_MATRICULA, NOME, CPF }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT DISTINCT * FROM VW_FUNC_PLANO_DADOS WHERE (CD_FUNDACAO=:CD_FUNDACAO OR :CD_FUNDACAO IS NULL ) AND (CD_EMPRESA=:CD_EMPRESA OR :CD_EMPRESA IS NULL ) AND (CD_PLANO=:CD_PLANO OR :CD_PLANO IS NULL ) AND (CD_SIT_PLANO=:CD_SIT_PLANO OR :CD_SIT_PLANO IS NULL ) AND (NUM_MATRICULA LIKE '%' || :NUM_MATRICULA || '%' OR :NUM_MATRICULA IS NULL ) AND (NOME_ENTID LIKE '%' || :NOME || '%' OR :NOME IS NULL ) AND (CPF_CGC LIKE '' || :CPF || '%' OR :CPF IS NULL )", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, CD_SIT_PLANO, NUM_MATRICULA, NOME, CPF }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<FuncionarioEntidade> BuscarPorPesquisaNotDesligado(string CD_FUNDACAO, string CD_EMPRESA, string CD_PLANO, string CD_SIT_PLANO, string NUM_MATRICULA, string NOME)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT DISTINCT *  FROM   VW_FUNC_PLANO_DADOS  WHERE (CD_FUNDACAO = @CD_FUNDACAO OR @CD_FUNDACAO IS NULL)    AND (CD_EMPRESA = @CD_EMPRESA OR @CD_EMPRESA IS NULL)    AND (CD_PLANO = @CD_PLANO OR @CD_PLANO IS NULL)    AND (CD_SIT_PLANO = @CD_SIT_PLANO OR @CD_SIT_PLANO IS NULL)    AND (NUM_MATRICULA LIKE '%' + @NUM_MATRICULA + '%' OR @NUM_MATRICULA IS NULL)     AND (NOME_ENTID LIKE '%' + @NOME + '%' OR @NOME IS NULL)    AND (CD_SIT_PLANO NOT IN ('21', '31', '26'))", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, CD_SIT_PLANO, NUM_MATRICULA, NOME }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, CD_SIT_PLANO, NUM_MATRICULA, NOME }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<FuncionarioEntidade> BuscarPrimeiroPorCpf(string CPF)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID,      CS_FUNCIONARIO.*   FROM CS_FUNCIONARIO   INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID   INNER JOIN CS_PLANOS_VINC ON CS_PLANOS_VINC.CD_FUNDACAO = CS_FUNCIONARIO.CD_FUNDACAO                           AND CS_PLANOS_VINC.NUM_INSCRICAO = CS_FUNCIONARIO.NUM_INSCRICAO  INNER JOIN TB_SIT_PLANO ON TB_SIT_PLANO.CD_SIT_PLANO = CS_PLANOS_VINC.CD_SIT_PLANO  WHERE EE_ENTIDADE.CPF_CGC = @CPF   ORDER BY DT_ADMISSAO DESC", new { CPF }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID, CS_FUNCIONARIO.* FROM CS_FUNCIONARIO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID INNER  JOIN CS_PLANOS_VINC  ON CS_PLANOS_VINC.CD_FUNDACAO=CS_FUNCIONARIO.CD_FUNDACAO AND CS_PLANOS_VINC.NUM_INSCRICAO=CS_FUNCIONARIO.NUM_INSCRICAO INNER  JOIN TB_SIT_PLANO  ON TB_SIT_PLANO.CD_SIT_PLANO=CS_PLANOS_VINC.CD_SIT_PLANO WHERE EE_ENTIDADE.CPF_CGC=:CPF ORDER BY DT_ADMISSAO DESC", new { CPF }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<FuncionarioEntidade> BuscarPrimeiroPorCpfNaoDesligado(string CPF)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID,      CS_FUNCIONARIO.*   FROM CS_FUNCIONARIO   INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID   INNER JOIN CS_PLANOS_VINC ON CS_PLANOS_VINC.CD_FUNDACAO = CS_FUNCIONARIO.CD_FUNDACAO                           AND CS_PLANOS_VINC.NUM_INSCRICAO = CS_FUNCIONARIO.NUM_INSCRICAO  INNER JOIN TB_SIT_PLANO ON TB_SIT_PLANO.CD_SIT_PLANO = CS_PLANOS_VINC.CD_SIT_PLANO  WHERE EE_ENTIDADE.CPF_CGC = @CPF     AND TB_SIT_PLANO.CD_CATEGORIA <> 2  ORDER BY DT_ADMISSAO DESC", new { CPF }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT EE_ENTIDADE.NOME_ENTID, CS_FUNCIONARIO.* FROM CS_FUNCIONARIO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID INNER  JOIN CS_PLANOS_VINC  ON CS_PLANOS_VINC.CD_FUNDACAO=CS_FUNCIONARIO.CD_FUNDACAO AND CS_PLANOS_VINC.NUM_INSCRICAO=CS_FUNCIONARIO.NUM_INSCRICAO INNER  JOIN TB_SIT_PLANO  ON TB_SIT_PLANO.CD_SIT_PLANO=CS_PLANOS_VINC.CD_SIT_PLANO WHERE EE_ENTIDADE.CPF_CGC=:CPF AND TB_SIT_PLANO.CD_CATEGORIA<>2 ORDER BY DT_ADMISSAO DESC", new { CPF }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual List<FuncionarioEntidade> BuscarTodos()
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT * FROM CS_FUNCIONARIO", new {  }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<FuncionarioEntidade>("SELECT * FROM CS_FUNCIONARIO", new {  }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual int BuscarUltimaInscricao()
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT MAX(NUM_INSCRICAO)  FROM CS_FUNCIONARIO", new {  });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT MAX(NUM_INSCRICAO) FROM CS_FUNCIONARIO", new {  });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual void Insert(string CD_FUNDACAO, string NUM_INSCRICAO, decimal COD_ENTID, string CD_EMPRESA, string NUM_MATRICULA, string CD_CARGO, string CD_FUNCAO, string CD_LOTACAO, string CD_NIVEL_SALARIAL, DateTime? DT_ADMISSAO, string CD_SIT_EMPRESA, DateTime? DT_SITUACAO_EMPRESA, string CD_MOTIVO_DEMISSAO, DateTime? DT_DEMISSAO, string AUTO_MANTENEDOR, string FONE_TRAB, string FAX_TRAB, string RAMAL_TRAB, string AGENDA, string CD_LOCALIDADE, decimal? CD_OCUPACAO, string ORGAO_EXT, string SETOR_EXT, string CONTATO_EXT, string FONE_EXT, string RAMAL_EXT, string CD_EMP_NEW, string NUM_PROTOCOLO, DateTime? DT_RECADASTRO, string COD_VINC, string COD_CERTA, string COD_ORIGEM, string COD_PAG, decimal? VL_REND_BASE, DateTime? DT_INF_PPE, decimal? TEMP_SERV, decimal? VL_BASE, string CD_SEQ_CPF, string NUM_MATRICULA_SIAPE, DateTime? DT_APOSENT, string CD_APOSENT_SUJ, string EMAIL_FUNC, string CK_INADIPLENTE, string EXTRATO_IMPRESSO, DateTime? DT_VINCULO_FUNDACAO, string IND_ELEGIBILIDADE, DateTime? DT_TERMO, string IND_PART_RATIFICADO, decimal? PERC_PECULIO, string AGENDA2)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					Conexao.Execute("INSERT INTO CS_FUNCIONARIO  (       CD_FUNDACAO      ,NUM_INSCRICAO      ,COD_ENTID      ,CD_EMPRESA      ,NUM_MATRICULA      ,CD_CARGO      ,CD_FUNCAO      ,CD_LOTACAO      ,CD_NIVEL_SALARIAL      ,DT_ADMISSAO      ,CD_SIT_EMPRESA      ,DT_SITUACAO_EMPRESA      ,CD_MOTIVO_DEMISSAO      ,DT_DEMISSAO      ,AUTO_MANTENEDOR      ,FONE_TRAB      ,FAX_TRAB      ,RAMAL_TRAB      ,AGENDA      ,CD_LOCALIDADE      ,CD_OCUPACAO      ,ORGAO_EXT      ,SETOR_EXT      ,CONTATO_EXT      ,FONE_EXT      ,RAMAL_EXT      ,CD_EMP_NEW      ,NUM_PROTOCOLO      ,DT_RECADASTRO      ,COD_VINC      ,COD_CERTA      ,COD_ORIGEM      ,COD_PAG      ,VL_REND_BASE      ,DT_INF_PPE      ,TEMP_SERV      ,VL_BASE      ,CD_SEQ_CPF      ,NUM_MATRICULA_SIAPE      ,DT_APOSENT      ,CD_APOSENT_SUJ      ,EMAIL_FUNC      ,CK_INADIPLENTE      ,EXTRATO_IMPRESSO      ,DT_VINCULO_FUNDACAO      ,IND_ELEGIBILIDADE      ,DT_TERMO      ,IND_PART_RATIFICADO      ,PERC_PECULIO      ,AGENDA2  )  VALUES  (       @CD_FUNDACAO      ,@NUM_INSCRICAO      ,@COD_ENTID      ,@CD_EMPRESA      ,@NUM_MATRICULA      ,@CD_CARGO      ,@CD_FUNCAO      ,@CD_LOTACAO      ,@CD_NIVEL_SALARIAL      ,@DT_ADMISSAO      ,@CD_SIT_EMPRESA      ,@DT_SITUACAO_EMPRESA      ,@CD_MOTIVO_DEMISSAO      ,@DT_DEMISSAO      ,@AUTO_MANTENEDOR      ,@FONE_TRAB      ,@FAX_TRAB      ,@RAMAL_TRAB      ,@AGENDA      ,@CD_LOCALIDADE      ,@CD_OCUPACAO      ,@ORGAO_EXT      ,@SETOR_EXT      ,@CONTATO_EXT      ,@FONE_EXT      ,@RAMAL_EXT      ,@CD_EMP_NEW      ,@NUM_PROTOCOLO      ,@DT_RECADASTRO      ,@COD_VINC      ,@COD_CERTA      ,@COD_ORIGEM      ,@COD_PAG      ,@VL_REND_BASE      ,@DT_INF_PPE      ,@TEMP_SERV      ,@VL_BASE      ,@CD_SEQ_CPF      ,@NUM_MATRICULA_SIAPE      ,@DT_APOSENT      ,@CD_APOSENT_SUJ      ,@EMAIL_FUNC      ,@CK_INADIPLENTE      ,@EXTRATO_IMPRESSO      ,@DT_VINCULO_FUNDACAO      ,@IND_ELEGIBILIDADE      ,@DT_TERMO      ,@IND_PART_RATIFICADO      ,@PERC_PECULIO      ,@AGENDA2  )", new { CD_FUNDACAO, NUM_INSCRICAO, COD_ENTID, CD_EMPRESA, NUM_MATRICULA, CD_CARGO, CD_FUNCAO, CD_LOTACAO, CD_NIVEL_SALARIAL, DT_ADMISSAO, CD_SIT_EMPRESA, DT_SITUACAO_EMPRESA, CD_MOTIVO_DEMISSAO, DT_DEMISSAO, AUTO_MANTENEDOR, FONE_TRAB, FAX_TRAB, RAMAL_TRAB, AGENDA, CD_LOCALIDADE, CD_OCUPACAO, ORGAO_EXT, SETOR_EXT, CONTATO_EXT, FONE_EXT, RAMAL_EXT, CD_EMP_NEW, NUM_PROTOCOLO, DT_RECADASTRO, COD_VINC, COD_CERTA, COD_ORIGEM, COD_PAG, VL_REND_BASE, DT_INF_PPE, TEMP_SERV, VL_BASE, CD_SEQ_CPF, NUM_MATRICULA_SIAPE, DT_APOSENT, CD_APOSENT_SUJ, EMAIL_FUNC, CK_INADIPLENTE, EXTRATO_IMPRESSO, DT_VINCULO_FUNDACAO, IND_ELEGIBILIDADE, DT_TERMO, IND_PART_RATIFICADO, PERC_PECULIO, AGENDA2 });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					Conexao.Execute("INSERT INTO CS_FUNCIONARIO (CD_FUNDACAO, NUM_INSCRICAO, COD_ENTID, CD_EMPRESA, NUM_MATRICULA, CD_CARGO, CD_FUNCAO, CD_LOTACAO, CD_NIVEL_SALARIAL, DT_ADMISSAO, CD_SIT_EMPRESA, DT_SITUACAO_EMPRESA, CD_MOTIVO_DEMISSAO, DT_DEMISSAO, AUTO_MANTENEDOR, FONE_TRAB, FAX_TRAB, RAMAL_TRAB, AGENDA, CD_LOCALIDADE, CD_OCUPACAO, ORGAO_EXT, SETOR_EXT, CONTATO_EXT, FONE_EXT, RAMAL_EXT, CD_EMP_NEW, NUM_PROTOCOLO, DT_RECADASTRO, COD_VINC, COD_CERTA, COD_ORIGEM, COD_PAG, VL_REND_BASE, DT_INF_PPE, TEMP_SERV, VL_BASE, CD_SEQ_CPF, NUM_MATRICULA_SIAPE, DT_APOSENT, CD_APOSENT_SUJ, EMAIL_FUNC, CK_INADIPLENTE, EXTRATO_IMPRESSO, DT_VINCULO_FUNDACAO, IND_ELEGIBILIDADE, DT_TERMO, IND_PART_RATIFICADO, PERC_PECULIO, AGENDA2) VALUES (:CD_FUNDACAO, :NUM_INSCRICAO, :COD_ENTID, :CD_EMPRESA, :NUM_MATRICULA, :CD_CARGO, :CD_FUNCAO, :CD_LOTACAO, :CD_NIVEL_SALARIAL, :DT_ADMISSAO, :CD_SIT_EMPRESA, :DT_SITUACAO_EMPRESA, :CD_MOTIVO_DEMISSAO, :DT_DEMISSAO, :AUTO_MANTENEDOR, :FONE_TRAB, :FAX_TRAB, :RAMAL_TRAB, :AGENDA, :CD_LOCALIDADE, :CD_OCUPACAO, :ORGAO_EXT, :SETOR_EXT, :CONTATO_EXT, :FONE_EXT, :RAMAL_EXT, :CD_EMP_NEW, :NUM_PROTOCOLO, :DT_RECADASTRO, :COD_VINC, :COD_CERTA, :COD_ORIGEM, :COD_PAG, :VL_REND_BASE, :DT_INF_PPE, :TEMP_SERV, :VL_BASE, :CD_SEQ_CPF, :NUM_MATRICULA_SIAPE, :DT_APOSENT, :CD_APOSENT_SUJ, :EMAIL_FUNC, :CK_INADIPLENTE, :EXTRATO_IMPRESSO, :DT_VINCULO_FUNDACAO, :IND_ELEGIBILIDADE, :DT_TERMO, :IND_PART_RATIFICADO, :PERC_PECULIO, :AGENDA2)", new { CD_FUNDACAO, NUM_INSCRICAO, COD_ENTID, CD_EMPRESA, NUM_MATRICULA, CD_CARGO, CD_FUNCAO, CD_LOTACAO, CD_NIVEL_SALARIAL, DT_ADMISSAO, CD_SIT_EMPRESA, DT_SITUACAO_EMPRESA, CD_MOTIVO_DEMISSAO, DT_DEMISSAO, AUTO_MANTENEDOR, FONE_TRAB, FAX_TRAB, RAMAL_TRAB, AGENDA, CD_LOCALIDADE, CD_OCUPACAO, ORGAO_EXT, SETOR_EXT, CONTATO_EXT, FONE_EXT, RAMAL_EXT, CD_EMP_NEW, NUM_PROTOCOLO, DT_RECADASTRO, COD_VINC, COD_CERTA, COD_ORIGEM, COD_PAG, VL_REND_BASE, DT_INF_PPE, TEMP_SERV, VL_BASE, CD_SEQ_CPF, NUM_MATRICULA_SIAPE, DT_APOSENT, CD_APOSENT_SUJ, EMAIL_FUNC, CK_INADIPLENTE, EXTRATO_IMPRESSO, DT_VINCULO_FUNDACAO, IND_ELEGIBILIDADE, DT_TERMO, IND_PART_RATIFICADO, PERC_PECULIO, AGENDA2 });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

	}
}
