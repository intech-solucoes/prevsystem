using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Intech.PrevSystem.Dados.DAO
{
	public abstract class ContratoDAO : BaseDAO<ContratoEntidade>
	{
		public ContratoDAO (IDbTransaction tx = null) : base(tx) { }

		public virtual void AtualizarContratoParaContratoReformado(string CD_SITUACAO, string CD_MOTIVO_QUIT, DateTime DT_QUITACAO, DateTime DT_REF_QUITACAO, decimal VL_PRINC_QUITACAO, decimal VL_JUROS_QUITACAO, decimal VL_PREST_ATRASO, decimal VL_CORR_PREST_ATRASO, decimal VL_PRINC_PREST_ATRASO, decimal VL_JUROS_PREST_ATRASO, decimal VL_JUROS_MORA_PREST, decimal VL_MULTA_PREST, decimal VL_JUROS_PREST_MES, decimal VL_PRINC_PREST_MES, decimal VL_CORRECAO_SALDO_QUITACAO, decimal VL_DESCONTO_QUITACAO, decimal VL_TX_INAD_QUITACAO, decimal VL_TX_ADM_QUITACAO, decimal VL_TX_SEGURO_QUITACAO, decimal VL_ACRESCIMO_QUITACAO, decimal VL_SEGURO_QUIT, decimal VL_TX_ADM_MES_QUIT, decimal VL_SEGURO_PRORATA, decimal VL_ADM_PRORATA, decimal VL_CORR_JUROS_PREST_MES, decimal VL_CORR_PRINC_PREST_MES, decimal VL_IOF_COMPL_QUIT, string CD_FUNDACAO, decimal ANO_CONTRATO, decimal NUM_CONTRATO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					Conexao.Execute("UPDATE CE_CONTRATOS SET    CD_SITUACAO = @CD_SITUACAO,        CD_MOTIVO_QUIT = @CD_MOTIVO_QUIT,        DT_QUITACAO = @DT_QUITACAO,        DT_REF_QUITACAO = @DT_REF_QUITACAO,        VL_PRINC_QUITACAO = @VL_PRINC_QUITACAO,        VL_JUROS_QUITACAO = @VL_JUROS_QUITACAO,        VL_PREST_ATRASO = @VL_PREST_ATRASO,        VL_CORR_PREST_ATRASO = @VL_CORR_PREST_ATRASO,        VL_PRINC_PREST_ATRASO = @VL_PRINC_PREST_ATRASO,        VL_JUROS_PREST_ATRASO = @VL_JUROS_PREST_ATRASO,        VL_JUROS_MORA_PREST = @VL_JUROS_MORA_PREST,        VL_MULTA_PREST = @VL_MULTA_PREST,        VL_JUROS_PREST_MES = @VL_JUROS_PREST_MES,        VL_PRINC_PREST_MES = @VL_PRINC_PREST_MES,        VL_CORRECAO_SALDO_QUITACAO = @VL_CORRECAO_SALDO_QUITACAO,        VL_DESCONTO_QUITACAO = @VL_DESCONTO_QUITACAO,        VL_TX_INAD_QUITACAO = @VL_TX_INAD_QUITACAO,        VL_TX_ADM_QUITACAO = @VL_TX_ADM_QUITACAO,        VL_TX_SEGURO_QUITACAO = @VL_TX_SEGURO_QUITACAO,        VL_ACRESCIMO_QUITACAO = @VL_ACRESCIMO_QUITACAO,        VL_SEGURO_QUIT = @VL_SEGURO_QUIT,        VL_TX_ADM_MES_QUIT = @VL_TX_ADM_MES_QUIT,        VL_SEGURO_PRORATA = @VL_SEGURO_PRORATA,        VL_ADM_PRORATA = @VL_ADM_PRORATA,        VL_CORR_JUROS_PREST_MES = @VL_CORR_JUROS_PREST_MES,        VL_CORR_PRINC_PREST_MES = @VL_CORR_PRINC_PREST_MES,        VL_IOF_COMPL_QUIT = @VL_IOF_COMPL_QUIT WHERE  ( CD_FUNDACAO = @CD_FUNDACAO )        AND ( ANO_CONTRATO = @ANO_CONTRATO )        AND ( NUM_CONTRATO = @NUM_CONTRATO )", new { CD_SITUACAO, CD_MOTIVO_QUIT, DT_QUITACAO, DT_REF_QUITACAO, VL_PRINC_QUITACAO, VL_JUROS_QUITACAO, VL_PREST_ATRASO, VL_CORR_PREST_ATRASO, VL_PRINC_PREST_ATRASO, VL_JUROS_PREST_ATRASO, VL_JUROS_MORA_PREST, VL_MULTA_PREST, VL_JUROS_PREST_MES, VL_PRINC_PREST_MES, VL_CORRECAO_SALDO_QUITACAO, VL_DESCONTO_QUITACAO, VL_TX_INAD_QUITACAO, VL_TX_ADM_QUITACAO, VL_TX_SEGURO_QUITACAO, VL_ACRESCIMO_QUITACAO, VL_SEGURO_QUIT, VL_TX_ADM_MES_QUIT, VL_SEGURO_PRORATA, VL_ADM_PRORATA, VL_CORR_JUROS_PREST_MES, VL_CORR_PRINC_PREST_MES, VL_IOF_COMPL_QUIT, CD_FUNDACAO, ANO_CONTRATO, NUM_CONTRATO }, Transaction);
				else if (AppSettings.IS_ORACLE_PROVIDER)
					Conexao.Execute("UPDATE CE_CONTRATOS SET CD_SITUACAO=:CD_SITUACAO, CD_MOTIVO_QUIT=:CD_MOTIVO_QUIT, DT_QUITACAO=:DT_QUITACAO, DT_REF_QUITACAO=:DT_REF_QUITACAO, VL_PRINC_QUITACAO=:VL_PRINC_QUITACAO, VL_JUROS_QUITACAO=:VL_JUROS_QUITACAO, VL_PREST_ATRASO=:VL_PREST_ATRASO, VL_CORR_PREST_ATRASO=:VL_CORR_PREST_ATRASO, VL_PRINC_PREST_ATRASO=:VL_PRINC_PREST_ATRASO, VL_JUROS_PREST_ATRASO=:VL_JUROS_PREST_ATRASO, VL_JUROS_MORA_PREST=:VL_JUROS_MORA_PREST, VL_MULTA_PREST=:VL_MULTA_PREST, VL_JUROS_PREST_MES=:VL_JUROS_PREST_MES, VL_PRINC_PREST_MES=:VL_PRINC_PREST_MES, VL_CORRECAO_SALDO_QUITACAO=:VL_CORRECAO_SALDO_QUITACAO, VL_DESCONTO_QUITACAO=:VL_DESCONTO_QUITACAO, VL_TX_INAD_QUITACAO=:VL_TX_INAD_QUITACAO, VL_TX_ADM_QUITACAO=:VL_TX_ADM_QUITACAO, VL_TX_SEGURO_QUITACAO=:VL_TX_SEGURO_QUITACAO, VL_ACRESCIMO_QUITACAO=:VL_ACRESCIMO_QUITACAO, VL_SEGURO_QUIT=:VL_SEGURO_QUIT, VL_TX_ADM_MES_QUIT=:VL_TX_ADM_MES_QUIT, VL_SEGURO_PRORATA=:VL_SEGURO_PRORATA, VL_ADM_PRORATA=:VL_ADM_PRORATA, VL_CORR_JUROS_PREST_MES=:VL_CORR_JUROS_PREST_MES, VL_CORR_PRINC_PREST_MES=:VL_CORR_PRINC_PREST_MES, VL_IOF_COMPL_QUIT=:VL_IOF_COMPL_QUIT WHERE (CD_FUNDACAO=:CD_FUNDACAO) AND (ANO_CONTRATO=:ANO_CONTRATO) AND (NUM_CONTRATO=:NUM_CONTRATO)", new { CD_SITUACAO, CD_MOTIVO_QUIT, DT_QUITACAO, DT_REF_QUITACAO, VL_PRINC_QUITACAO, VL_JUROS_QUITACAO, VL_PREST_ATRASO, VL_CORR_PREST_ATRASO, VL_PRINC_PREST_ATRASO, VL_JUROS_PREST_ATRASO, VL_JUROS_MORA_PREST, VL_MULTA_PREST, VL_JUROS_PREST_MES, VL_PRINC_PREST_MES, VL_CORRECAO_SALDO_QUITACAO, VL_DESCONTO_QUITACAO, VL_TX_INAD_QUITACAO, VL_TX_ADM_QUITACAO, VL_TX_SEGURO_QUITACAO, VL_ACRESCIMO_QUITACAO, VL_SEGURO_QUIT, VL_TX_ADM_MES_QUIT, VL_SEGURO_PRORATA, VL_ADM_PRORATA, VL_CORR_JUROS_PREST_MES, VL_CORR_PRINC_PREST_MES, VL_IOF_COMPL_QUIT, CD_FUNDACAO, ANO_CONTRATO, NUM_CONTRATO }, Transaction);
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual ContratoEntidade BuscarDetalhePorFundacaoInscricaoAnoNumero(string CD_FUNDACAO, string NUM_INSCRICAO, string ANO_CONTRATO, string NUM_CONTRATO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<ContratoEntidade>("SELECT EE.NOME_ENTID AS NOME_PARTICIPANTE,        EE.CPF_CGC AS CPF_PARTICIPANTE,        EE2.NOME_ENTID AS NOME_PENSIONISTA,        EE2.CPF_CGC AS CPF_PENSIONISTA,        ST.DS_SITUACAO,        PL.DS_PLANO,        NA.DS_NATUR,        MO.DS_MODAL,        CE.* FROM CE_CONTRATOS CE     INNER JOIN CE_MODALIDADE MO ON MO.CD_MODAL = CE.CD_MODAL     INNER JOIN CE_NATUREZA NA ON NA.CD_NATUR = CE.CD_NATUR     INNER JOIN CE_SITUACAO_CONTRATO ST ON ST.CD_SITUACAO = CE.CD_SITUACAO     INNER JOIN CS_FUNCIONARIO FN ON FN.CD_FUNDACAO = CE.CD_FUNDACAO         AND FN.NUM_INSCRICAO = CE.NUM_INSCRICAO     INNER JOIN EE_ENTIDADE EE ON EE.COD_ENTID = FN.COD_ENTID     INNER JOIN TB_PLANOS PL ON PL.CD_FUNDACAO = CE.CD_FUNDACAO         AND PL.CD_PLANO = CE.CD_PLANO     LEFT OUTER JOIN GB_RECEBEDOR_BENEFICIO RB ON RB.CD_FUNDACAO = CE.CD_FUNDACAO          AND RB.NUM_INSCRICAO = CE.NUM_INSCRICAO         AND RB.NUM_SEQ_GR_FAMIL = CE.NUM_SEQ_GR_FAMIL     LEFT OUTER JOIN EE_ENTIDADE EE2 ON EE2.COD_ENTID = RB.COD_ENTID WHERE CE.CD_FUNDACAO = @CD_FUNDACAO   AND CE.NUM_INSCRICAO = @NUM_INSCRICAO   AND CE.ANO_CONTRATO = @ANO_CONTRATO   AND CE.NUM_CONTRATO = @NUM_CONTRATO", new { CD_FUNDACAO, NUM_INSCRICAO, ANO_CONTRATO, NUM_CONTRATO }, Transaction);
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<ContratoEntidade>("SELECT EE.NOME_ENTID AS NOME_PARTICIPANTE, EE.CPF_CGC AS CPF_PARTICIPANTE, EE2.NOME_ENTID AS NOME_PENSIONISTA, EE2.CPF_CGC AS CPF_PENSIONISTA, ST.DS_SITUACAO, PL.DS_PLANO, NA.DS_NATUR, MO.DS_MODAL, CE.* FROM CE_CONTRATOS  CE  INNER  JOIN CE_MODALIDADE   MO  ON MO.CD_MODAL=CE.CD_MODAL INNER  JOIN CE_NATUREZA   NA  ON NA.CD_NATUR=CE.CD_NATUR INNER  JOIN CE_SITUACAO_CONTRATO   ST  ON ST.CD_SITUACAO=CE.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO   FN  ON FN.CD_FUNDACAO=CE.CD_FUNDACAO AND FN.NUM_INSCRICAO=CE.NUM_INSCRICAO INNER  JOIN EE_ENTIDADE   EE  ON EE.COD_ENTID=FN.COD_ENTID INNER  JOIN TB_PLANOS   PL  ON PL.CD_FUNDACAO=CE.CD_FUNDACAO AND PL.CD_PLANO=CE.CD_PLANO LEFT OUTER JOIN GB_RECEBEDOR_BENEFICIO   RB  ON RB.CD_FUNDACAO=CE.CD_FUNDACAO AND RB.NUM_INSCRICAO=CE.NUM_INSCRICAO AND RB.NUM_SEQ_GR_FAMIL=CE.NUM_SEQ_GR_FAMIL LEFT OUTER JOIN EE_ENTIDADE   EE2  ON EE2.COD_ENTID=RB.COD_ENTID WHERE CE.CD_FUNDACAO=:CD_FUNDACAO AND CE.NUM_INSCRICAO=:NUM_INSCRICAO AND CE.ANO_CONTRATO=:ANO_CONTRATO AND CE.NUM_CONTRATO=:NUM_CONTRATO", new { CD_FUNDACAO, NUM_INSCRICAO, ANO_CONTRATO, NUM_CONTRATO }, Transaction);
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual ContratoEntidade BuscarDetalhePorFundacaoInscricaoAnoNumeroSeqFamilia(string CD_FUNDACAO, string NUM_INSCRICAO, string ANO_CONTRATO, string NUM_CONTRATO, string NUM_SEQ_GR_FAMIL)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<ContratoEntidade>("SELECT EE.NOME_ENTID AS NOME_PARTICIPANTE,        EE.CPF_CGC AS CPF_PARTICIPANTE,        EE2.NOME_ENTID AS NOME_PENSIONISTA,        EE2.CPF_CGC AS CPF_PENSIONISTA,        ST.DS_SITUACAO,        PL.DS_PLANO,        NA.DS_NATUR,        MO.DS_MODAL,        CE.* FROM CE_CONTRATOS CE     INNER JOIN CE_MODALIDADE MO ON MO.CD_MODAL = CE.CD_MODAL     INNER JOIN CE_NATUREZA NA ON NA.CD_NATUR = CE.CD_NATUR     INNER JOIN CE_SITUACAO_CONTRATO ST ON ST.CD_SITUACAO = CE.CD_SITUACAO     INNER JOIN CS_FUNCIONARIO FN ON FN.CD_FUNDACAO = CE.CD_FUNDACAO         AND FN.NUM_INSCRICAO = CE.NUM_INSCRICAO     INNER JOIN EE_ENTIDADE EE ON EE.COD_ENTID = FN.COD_ENTID     INNER JOIN TB_PLANOS PL ON PL.CD_FUNDACAO = CE.CD_FUNDACAO         AND PL.CD_PLANO = CE.CD_PLANO     LEFT OUTER JOIN GB_RECEBEDOR_BENEFICIO RB ON RB.CD_FUNDACAO = CE.CD_FUNDACAO          AND RB.NUM_INSCRICAO = CE.NUM_INSCRICAO         AND RB.NUM_SEQ_GR_FAMIL = CE.NUM_SEQ_GR_FAMIL     LEFT OUTER JOIN EE_ENTIDADE EE2 ON EE2.COD_ENTID = RB.COD_ENTID WHERE CE.CD_FUNDACAO = @CD_FUNDACAO   AND CE.NUM_INSCRICAO = @NUM_INSCRICAO   AND CE.ANO_CONTRATO = @ANO_CONTRATO   AND CE.NUM_CONTRATO = @NUM_CONTRATO   AND CE.NUM_SEQ_GR_FAMIL = @NUM_SEQ_GR_FAMIL", new { CD_FUNDACAO, NUM_INSCRICAO, ANO_CONTRATO, NUM_CONTRATO, NUM_SEQ_GR_FAMIL }, Transaction);
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<ContratoEntidade>("SELECT EE.NOME_ENTID AS NOME_PARTICIPANTE, EE.CPF_CGC AS CPF_PARTICIPANTE, EE2.NOME_ENTID AS NOME_PENSIONISTA, EE2.CPF_CGC AS CPF_PENSIONISTA, ST.DS_SITUACAO, PL.DS_PLANO, NA.DS_NATUR, MO.DS_MODAL, CE.* FROM CE_CONTRATOS  CE  INNER  JOIN CE_MODALIDADE   MO  ON MO.CD_MODAL=CE.CD_MODAL INNER  JOIN CE_NATUREZA   NA  ON NA.CD_NATUR=CE.CD_NATUR INNER  JOIN CE_SITUACAO_CONTRATO   ST  ON ST.CD_SITUACAO=CE.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO   FN  ON FN.CD_FUNDACAO=CE.CD_FUNDACAO AND FN.NUM_INSCRICAO=CE.NUM_INSCRICAO INNER  JOIN EE_ENTIDADE   EE  ON EE.COD_ENTID=FN.COD_ENTID INNER  JOIN TB_PLANOS   PL  ON PL.CD_FUNDACAO=CE.CD_FUNDACAO AND PL.CD_PLANO=CE.CD_PLANO LEFT OUTER JOIN GB_RECEBEDOR_BENEFICIO   RB  ON RB.CD_FUNDACAO=CE.CD_FUNDACAO AND RB.NUM_INSCRICAO=CE.NUM_INSCRICAO AND RB.NUM_SEQ_GR_FAMIL=CE.NUM_SEQ_GR_FAMIL LEFT OUTER JOIN EE_ENTIDADE   EE2  ON EE2.COD_ENTID=RB.COD_ENTID WHERE CE.CD_FUNDACAO=:CD_FUNDACAO AND CE.NUM_INSCRICAO=:NUM_INSCRICAO AND CE.ANO_CONTRATO=:ANO_CONTRATO AND CE.NUM_CONTRATO=:NUM_CONTRATO AND CE.NUM_SEQ_GR_FAMIL=:NUM_SEQ_GR_FAMIL", new { CD_FUNDACAO, NUM_INSCRICAO, ANO_CONTRATO, NUM_CONTRATO, NUM_SEQ_GR_FAMIL }, Transaction);
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual ContratoEntidade BuscarPorFundacaoAnoNumContrato(string CD_FUNDACAO, string ANO_CONTRATO, string NUM_CONTRATO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<ContratoEntidade>("SELECT *  FROM CE_CONTRATOS WHERE CD_FUNDACAO = @CD_FUNDACAO   AND ANO_CONTRATO = @ANO_CONTRATO   AND NUM_CONTRATO = @NUM_CONTRATO", new { CD_FUNDACAO, ANO_CONTRATO, NUM_CONTRATO }, Transaction);
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<ContratoEntidade>("SELECT * FROM CE_CONTRATOS WHERE CD_FUNDACAO=:CD_FUNDACAO AND ANO_CONTRATO=:ANO_CONTRATO AND NUM_CONTRATO=:NUM_CONTRATO", new { CD_FUNDACAO, ANO_CONTRATO, NUM_CONTRATO }, Transaction);
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<ContratoEntidade> BuscarPorFundacaoInscricao(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT *  FROM CE_CONTRATOS WHERE CD_FUNDACAO = @CD_FUNDACAO   AND NUM_INSCRICAO = @NUM_INSCRICAO", new { CD_FUNDACAO, NUM_INSCRICAO }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT * FROM CE_CONTRATOS WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO", new { CD_FUNDACAO, NUM_INSCRICAO }, Transaction).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<ContratoEntidade> BuscarPorFundacaoInscricaoGrupoFamiliaNotSituacao(string CD_FUNDACAO, string NUM_INSCRICAO, string NUM_SEQ_GR_FAMIL)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT ST.DS_SITUACAO,        CE.* FROM CE_CONTRATOS CE     INNER JOIN CE_SITUACAO_CONTRATO ST ON ST.CD_SITUACAO = CE.CD_SITUACAO WHERE CE.CD_FUNDACAO = @CD_FUNDACAO   AND CE.NUM_INSCRICAO = @NUM_INSCRICAO   AND CE.CD_SITUACAO NOT IN ('4', '6')   AND CE.NUM_SEQ_GR_FAMIL = @NUM_SEQ_GR_FAMIL ORDER BY CE.DT_CREDITO DESC", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_GR_FAMIL }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT ST.DS_SITUACAO, CE.* FROM CE_CONTRATOS  CE  INNER  JOIN CE_SITUACAO_CONTRATO   ST  ON ST.CD_SITUACAO=CE.CD_SITUACAO WHERE CE.CD_FUNDACAO=:CD_FUNDACAO AND CE.NUM_INSCRICAO=:NUM_INSCRICAO AND CE.CD_SITUACAO NOT  IN ('4', '6') AND CE.NUM_SEQ_GR_FAMIL=:NUM_SEQ_GR_FAMIL ORDER BY CE.DT_CREDITO DESC", new { CD_FUNDACAO, NUM_INSCRICAO, NUM_SEQ_GR_FAMIL }, Transaction).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}
		public virtual List<ContratoEntidade> BuscarPorFundacaoInscricaoNotSituacao(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT ST.DS_SITUACAO,        CE.* FROM CE_CONTRATOS CE     INNER JOIN CE_SITUACAO_CONTRATO ST ON ST.CD_SITUACAO = CE.CD_SITUACAO WHERE CE.CD_FUNDACAO = @CD_FUNDACAO   AND CE.NUM_INSCRICAO = @NUM_INSCRICAO   AND CE.CD_SITUACAO NOT IN ('4', '6')    ORDER BY CE.DT_CREDITO DESC", new { CD_FUNDACAO, NUM_INSCRICAO }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT ST.DS_SITUACAO, CE.* FROM CE_CONTRATOS  CE  INNER  JOIN CE_SITUACAO_CONTRATO   ST  ON ST.CD_SITUACAO=CE.CD_SITUACAO WHERE CE.CD_FUNDACAO=:CD_FUNDACAO AND CE.NUM_INSCRICAO=:NUM_INSCRICAO AND CE.CD_SITUACAO NOT  IN ('4', '6')  ORDER BY CE.DT_CREDITO DESC", new { CD_FUNDACAO, NUM_INSCRICAO }, Transaction).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<ContratoEntidade> BuscarPorFundacaoInscricaoSituacao(string CD_FUNDACAO, string NUM_INSCRICAO, string CD_SITUACAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT *  FROM CE_CONTRATOS WHERE CD_FUNDACAO = @CD_FUNDACAO   AND NUM_INSCRICAO = @NUM_INSCRICAO   AND CD_SITUACAO = @CD_SITUACAO", new { CD_FUNDACAO, NUM_INSCRICAO, CD_SITUACAO }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT * FROM CE_CONTRATOS WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_SITUACAO=:CD_SITUACAO", new { CD_FUNDACAO, NUM_INSCRICAO, CD_SITUACAO }, Transaction).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<ContratoEntidade> BuscarPorFundacaoPlanoInscricao(string CD_FUNDACAO, string CD_PLANO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT *  FROM CE_CONTRATOS WHERE CD_FUNDACAO = @CD_FUNDACAO   AND CD_PLANO = @CD_PLANO   AND NUM_INSCRICAO = @NUM_INSCRICAO", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT * FROM CE_CONTRATOS WHERE CD_FUNDACAO=:CD_FUNDACAO AND CD_PLANO=:CD_PLANO AND NUM_INSCRICAO=:NUM_INSCRICAO", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO }, Transaction).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<ContratoEntidade> BuscarPorFundacaoPlanoInscricaoGrupoFamiliaSituacao(string CD_FUNDACAO, string CD_PLANO, string NUM_INSCRICAO, string NUM_SEQ_GR_FAMIL, string CD_SITUACAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT *  FROM CE_CONTRATOS WHERE CD_FUNDACAO = @CD_FUNDACAO   AND CD_PLANO = @CD_PLANO   AND NUM_INSCRICAO = @NUM_INSCRICAO   AND NUM_SEQ_GR_FAMIL = @NUM_SEQ_GR_FAMIL   AND CD_SITUACAO = @CD_SITUACAO", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO, NUM_SEQ_GR_FAMIL, CD_SITUACAO }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT * FROM CE_CONTRATOS WHERE CD_FUNDACAO=:CD_FUNDACAO AND CD_PLANO=:CD_PLANO AND NUM_INSCRICAO=:NUM_INSCRICAO AND NUM_SEQ_GR_FAMIL=:NUM_SEQ_GR_FAMIL AND CD_SITUACAO=:CD_SITUACAO", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO, NUM_SEQ_GR_FAMIL, CD_SITUACAO }, Transaction).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<ContratoEntidade> BuscarPorFundacaoPlanoInscricaoSituacao(string CD_FUNDACAO, string CD_PLANO, string NUM_INSCRICAO, string CD_SITUACAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT *  FROM CE_CONTRATOS WHERE CD_FUNDACAO = @CD_FUNDACAO   AND CD_PLANO = @CD_PLANO   AND NUM_INSCRICAO = @NUM_INSCRICAO   AND CD_SITUACAO = @CD_SITUACAO", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO, CD_SITUACAO }, Transaction).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ContratoEntidade>("SELECT * FROM CE_CONTRATOS WHERE CD_FUNDACAO=:CD_FUNDACAO AND CD_PLANO=:CD_PLANO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_SITUACAO=:CD_SITUACAO", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO, CD_SITUACAO }, Transaction).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual int BuscarQuantidadeEmDeferimento(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT COUNT(*) FROM CE_CONTRATOS WHERE CD_FUNDACAO = @CD_FUNDACAO   AND NUM_INSCRICAO = @NUM_INSCRICAO   AND CD_SITUACAO = 1", new { CD_FUNDACAO, NUM_INSCRICAO }, Transaction);
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT COUNT(*) FROM CE_CONTRATOS WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_SITUACAO=1", new { CD_FUNDACAO, NUM_INSCRICAO }, Transaction);
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual int BuscarQuantidadePorSituacao(string CD_FUNDACAO, string NUM_INSCRICAO, int CD_SITUACAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT COUNT(*) FROM CE_CONTRATOS WHERE CD_FUNDACAO = @CD_FUNDACAO   AND NUM_INSCRICAO = @NUM_INSCRICAO   AND CD_SITUACAO = @CD_SITUACAO", new { CD_FUNDACAO, NUM_INSCRICAO, CD_SITUACAO }, Transaction);
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT COUNT(*) FROM CE_CONTRATOS WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_SITUACAO=:CD_SITUACAO", new { CD_FUNDACAO, NUM_INSCRICAO, CD_SITUACAO }, Transaction);
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual int BuscarUltimoNumeroContrato(string CD_FUNDACAO, int ANO_CONTRATO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT TOP 1 NUM_CONTRATO FROM CE_CONTRATOS WHERE CD_FUNDACAO = @CD_FUNDACAO   AND ANO_CONTRATO = @ANO_CONTRATO ORDER BY NUM_CONTRATO DESC", new { CD_FUNDACAO, ANO_CONTRATO }, Transaction);
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT NUM_CONTRATO FROM CE_CONTRATOS WHERE CD_FUNDACAO=:CD_FUNDACAO AND ANO_CONTRATO=:ANO_CONTRATO AND ROWNUM <= 1  ORDER BY NUM_CONTRATO DESC", new { CD_FUNDACAO, ANO_CONTRATO }, Transaction);
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual void InserirContrato(string CD_FUNDACAO, decimal ANO_CONTRATO, int NUM_CONTRATO, decimal CD_MODAL, decimal CD_NATUR, decimal CD_SITUACAO, decimal? CD_MOTIVO_QUIT, string NUM_INSCRICAO, decimal? NUM_SEQ_GR_FAMIL, decimal? SEQ_RUBRICA, decimal PRAZO, DateTime DT_SOLICITACAO, DateTime DT_CREDITO, DateTime? DT_CREDITO_AUX, DateTime? DT_QUITACAO, DateTime? DT_REF_QUITACAO, decimal? VL_SOLICITADO, decimal? VL_LIQUIDO, decimal? VL_TX_ADM, decimal? VL_TX_SEGURO, decimal? VL_TX_INAD, decimal? VL_TX_RENOVACAO, decimal? VL_IOF, decimal? VL_CORRIGIDO, decimal? VL_ANTECIPADO, decimal? VL_PRESTACAO, decimal? VL_LIMITE, decimal? VL_BASE_CALC, decimal? VL_PERC_CALC, decimal? VL_MARGEM_CONSIG, decimal? VL_REMUNERACAO, decimal? VL_DESCONTO_AUT, decimal? VL_PRINC_QUITACAO, decimal? VL_JUROS_QUITACAO, decimal? VL_PREST_ATRASO, decimal? VL_JUROS_PREST_ATRASO, decimal? VL_JUROS_MORA_PREST, decimal? VL_MULTA_PREST, decimal? TX_JUROS, decimal? TX_APLICADA, decimal? CD_REPRESENTANTE, string GEROU_CREDITO, decimal? VL_REFORMADO, decimal? VL_JUROS_PREST_MES, decimal? VL_DESCONTO_QUITACAO, decimal? VL_DEBITOS, decimal? VL_PREST_ATRASO_CONCESSAO, decimal? VL_PREST_MES_CONCESSAO, decimal? VL_PRINC_PREST_ATRASO, decimal? VL_CORR_PREST_ATRASO, string OBSERVACAO, decimal? VL_RESIDUO_AMORTIZACAO, string CD_SIT_FUNDACAO, decimal? VL_TX_INVALIDEZ, int? COD_CONVENIO, string CD_FORMA_PAGTO, decimal? VL_RESERVA_POUPANCA, DateTime? DT_PREST_ATUALIZADA, decimal? VL_CORRECAO_SALDO_QUITACAO, string NUM_BANCO, string NUM_AGENCIA, string NUM_CONTA, string CD_PLANO, decimal? CARENCIA, string BLOQUEIO_COBRANCA, decimal? PERCENTUAL_DESCONTO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					Conexao.Execute("INSERT INTO CE_CONTRATOS             (CD_FUNDACAO,ANO_CONTRATO,NUM_CONTRATO,CD_MODAL,CD_NATUR,CD_SITUACAO,              CD_MOTIVO_QUIT,NUM_INSCRICAO,NUM_SEQ_GR_FAMIL,SEQ_RUBRICA,PRAZO,              DT_SOLICITACAO,DT_CREDITO,DT_CREDITO_AUX,DT_QUITACAO,              DT_REF_QUITACAO,VL_SOLICITADO,VL_LIQUIDO,VL_TX_ADM,VL_TX_SEGURO,              VL_TX_INAD,VL_TX_RENOVACAO,VL_IOF,VL_CORRIGIDO,VL_ANTECIPADO,              VL_PRESTACAO,VL_LIMITE,VL_BASE_CALC,VL_PERC_CALC,VL_MARGEM_CONSIG,              VL_REMUNERACAO,VL_DESCONTO_AUT,VL_PRINC_QUITACAO,VL_JUROS_QUITACAO,              VL_PREST_ATRASO,VL_JUROS_PREST_ATRASO,VL_JUROS_MORA_PREST,              VL_MULTA_PREST,TX_JUROS,TX_APLICADA,CD_REPRESENTANTE,GEROU_CREDITO,              VL_REFORMADO,VL_JUROS_PREST_MES,VL_DESCONTO_QUITACAO,VL_DEBITOS,              VL_PREST_ATRASO_CONCESSAO,VL_PREST_MES_CONCESSAO,              VL_PRINC_PREST_ATRASO,VL_CORR_PREST_ATRASO,OBSERVACAO,              VL_RESIDUO_AMORTIZACAO,CD_SIT_FUNDACAO,VL_TX_INVALIDEZ,COD_CONVENIO              ,CD_FORMA_PAGTO,VL_RESERVA_POUPANCA,DT_PREST_ATUALIZADA,              VL_CORRECAO_SALDO_QUITACAO,NUM_BANCO,NUM_AGENCIA,NUM_CONTA,CD_PLANO              ,CARENCIA,BLOQUEIO_COBRANCA,PERCENTUAL_DESCONTO) VALUES      (@CD_FUNDACAO,@ANO_CONTRATO,@NUM_CONTRATO,@CD_MODAL,@CD_NATUR,@CD_SITUACAO,              @CD_MOTIVO_QUIT,@NUM_INSCRICAO,@NUM_SEQ_GR_FAMIL,@SEQ_RUBRICA,              @PRAZO,@DT_SOLICITACAO,@DT_CREDITO,@DT_CREDITO_AUX,@DT_QUITACAO,              @DT_REF_QUITACAO,@VL_SOLICITADO,@VL_LIQUIDO,@VL_TX_ADM,              @VL_TX_SEGURO,@VL_TX_INAD,@VL_TX_RENOVACAO,@VL_IOF,@VL_CORRIGIDO,              @VL_ANTECIPADO,@VL_PRESTACAO,@VL_LIMITE,@VL_BASE_CALC,@VL_PERC_CALC              ,@VL_MARGEM_CONSIG,@VL_REMUNERACAO,@VL_DESCONTO_AUT,              @VL_PRINC_QUITACAO,@VL_JUROS_QUITACAO,@VL_PREST_ATRASO,              @VL_JUROS_PREST_ATRASO,@VL_JUROS_MORA_PREST,@VL_MULTA_PREST,              @TX_JUROS,@TX_APLICADA,@CD_REPRESENTANTE,@GEROU_CREDITO,              @VL_REFORMADO,@VL_JUROS_PREST_MES,@VL_DESCONTO_QUITACAO,@VL_DEBITOS              ,@VL_PREST_ATRASO_CONCESSAO,@VL_PREST_MES_CONCESSAO,              @VL_PRINC_PREST_ATRASO,@VL_CORR_PREST_ATRASO,@OBSERVACAO,              @VL_RESIDUO_AMORTIZACAO,@CD_SIT_FUNDACAO,@VL_TX_INVALIDEZ,              @COD_CONVENIO,@CD_FORMA_PAGTO,@VL_RESERVA_POUPANCA,              @DT_PREST_ATUALIZADA,@VL_CORRECAO_SALDO_QUITACAO,@NUM_BANCO,              @NUM_AGENCIA,@NUM_CONTA,@CD_PLANO,@CARENCIA,@BLOQUEIO_COBRANCA,              @PERCENTUAL_DESCONTO)", new { CD_FUNDACAO, ANO_CONTRATO, NUM_CONTRATO, CD_MODAL, CD_NATUR, CD_SITUACAO, CD_MOTIVO_QUIT, NUM_INSCRICAO, NUM_SEQ_GR_FAMIL, SEQ_RUBRICA, PRAZO, DT_SOLICITACAO, DT_CREDITO, DT_CREDITO_AUX, DT_QUITACAO, DT_REF_QUITACAO, VL_SOLICITADO, VL_LIQUIDO, VL_TX_ADM, VL_TX_SEGURO, VL_TX_INAD, VL_TX_RENOVACAO, VL_IOF, VL_CORRIGIDO, VL_ANTECIPADO, VL_PRESTACAO, VL_LIMITE, VL_BASE_CALC, VL_PERC_CALC, VL_MARGEM_CONSIG, VL_REMUNERACAO, VL_DESCONTO_AUT, VL_PRINC_QUITACAO, VL_JUROS_QUITACAO, VL_PREST_ATRASO, VL_JUROS_PREST_ATRASO, VL_JUROS_MORA_PREST, VL_MULTA_PREST, TX_JUROS, TX_APLICADA, CD_REPRESENTANTE, GEROU_CREDITO, VL_REFORMADO, VL_JUROS_PREST_MES, VL_DESCONTO_QUITACAO, VL_DEBITOS, VL_PREST_ATRASO_CONCESSAO, VL_PREST_MES_CONCESSAO, VL_PRINC_PREST_ATRASO, VL_CORR_PREST_ATRASO, OBSERVACAO, VL_RESIDUO_AMORTIZACAO, CD_SIT_FUNDACAO, VL_TX_INVALIDEZ, COD_CONVENIO, CD_FORMA_PAGTO, VL_RESERVA_POUPANCA, DT_PREST_ATUALIZADA, VL_CORRECAO_SALDO_QUITACAO, NUM_BANCO, NUM_AGENCIA, NUM_CONTA, CD_PLANO, CARENCIA, BLOQUEIO_COBRANCA, PERCENTUAL_DESCONTO }, Transaction);
				else if (AppSettings.IS_ORACLE_PROVIDER)
					Conexao.Execute("INSERT INTO CE_CONTRATOS (CD_FUNDACAO, ANO_CONTRATO, NUM_CONTRATO, CD_MODAL, CD_NATUR, CD_SITUACAO, CD_MOTIVO_QUIT, NUM_INSCRICAO, NUM_SEQ_GR_FAMIL, SEQ_RUBRICA, PRAZO, DT_SOLICITACAO, DT_CREDITO, DT_CREDITO_AUX, DT_QUITACAO, DT_REF_QUITACAO, VL_SOLICITADO, VL_LIQUIDO, VL_TX_ADM, VL_TX_SEGURO, VL_TX_INAD, VL_TX_RENOVACAO, VL_IOF, VL_CORRIGIDO, VL_ANTECIPADO, VL_PRESTACAO, VL_LIMITE, VL_BASE_CALC, VL_PERC_CALC, VL_MARGEM_CONSIG, VL_REMUNERACAO, VL_DESCONTO_AUT, VL_PRINC_QUITACAO, VL_JUROS_QUITACAO, VL_PREST_ATRASO, VL_JUROS_PREST_ATRASO, VL_JUROS_MORA_PREST, VL_MULTA_PREST, TX_JUROS, TX_APLICADA, CD_REPRESENTANTE, GEROU_CREDITO, VL_REFORMADO, VL_JUROS_PREST_MES, VL_DESCONTO_QUITACAO, VL_DEBITOS, VL_PREST_ATRASO_CONCESSAO, VL_PREST_MES_CONCESSAO, VL_PRINC_PREST_ATRASO, VL_CORR_PREST_ATRASO, OBSERVACAO, VL_RESIDUO_AMORTIZACAO, CD_SIT_FUNDACAO, VL_TX_INVALIDEZ, COD_CONVENIO, CD_FORMA_PAGTO, VL_RESERVA_POUPANCA, DT_PREST_ATUALIZADA, VL_CORRECAO_SALDO_QUITACAO, NUM_BANCO, NUM_AGENCIA, NUM_CONTA, CD_PLANO, CARENCIA, BLOQUEIO_COBRANCA, PERCENTUAL_DESCONTO) VALUES (:CD_FUNDACAO, :ANO_CONTRATO, :NUM_CONTRATO, :CD_MODAL, :CD_NATUR, :CD_SITUACAO, :CD_MOTIVO_QUIT, :NUM_INSCRICAO, :NUM_SEQ_GR_FAMIL, :SEQ_RUBRICA, :PRAZO, :DT_SOLICITACAO, :DT_CREDITO, :DT_CREDITO_AUX, :DT_QUITACAO, :DT_REF_QUITACAO, :VL_SOLICITADO, :VL_LIQUIDO, :VL_TX_ADM, :VL_TX_SEGURO, :VL_TX_INAD, :VL_TX_RENOVACAO, :VL_IOF, :VL_CORRIGIDO, :VL_ANTECIPADO, :VL_PRESTACAO, :VL_LIMITE, :VL_BASE_CALC, :VL_PERC_CALC, :VL_MARGEM_CONSIG, :VL_REMUNERACAO, :VL_DESCONTO_AUT, :VL_PRINC_QUITACAO, :VL_JUROS_QUITACAO, :VL_PREST_ATRASO, :VL_JUROS_PREST_ATRASO, :VL_JUROS_MORA_PREST, :VL_MULTA_PREST, :TX_JUROS, :TX_APLICADA, :CD_REPRESENTANTE, :GEROU_CREDITO, :VL_REFORMADO, :VL_JUROS_PREST_MES, :VL_DESCONTO_QUITACAO, :VL_DEBITOS, :VL_PREST_ATRASO_CONCESSAO, :VL_PREST_MES_CONCESSAO, :VL_PRINC_PREST_ATRASO, :VL_CORR_PREST_ATRASO, :OBSERVACAO, :VL_RESIDUO_AMORTIZACAO, :CD_SIT_FUNDACAO, :VL_TX_INVALIDEZ, :COD_CONVENIO, :CD_FORMA_PAGTO, :VL_RESERVA_POUPANCA, :DT_PREST_ATUALIZADA, :VL_CORRECAO_SALDO_QUITACAO, :NUM_BANCO, :NUM_AGENCIA, :NUM_CONTA, :CD_PLANO, :CARENCIA, :BLOQUEIO_COBRANCA, :PERCENTUAL_DESCONTO)", new { CD_FUNDACAO, ANO_CONTRATO, NUM_CONTRATO, CD_MODAL, CD_NATUR, CD_SITUACAO, CD_MOTIVO_QUIT, NUM_INSCRICAO, NUM_SEQ_GR_FAMIL, SEQ_RUBRICA, PRAZO, DT_SOLICITACAO, DT_CREDITO, DT_CREDITO_AUX, DT_QUITACAO, DT_REF_QUITACAO, VL_SOLICITADO, VL_LIQUIDO, VL_TX_ADM, VL_TX_SEGURO, VL_TX_INAD, VL_TX_RENOVACAO, VL_IOF, VL_CORRIGIDO, VL_ANTECIPADO, VL_PRESTACAO, VL_LIMITE, VL_BASE_CALC, VL_PERC_CALC, VL_MARGEM_CONSIG, VL_REMUNERACAO, VL_DESCONTO_AUT, VL_PRINC_QUITACAO, VL_JUROS_QUITACAO, VL_PREST_ATRASO, VL_JUROS_PREST_ATRASO, VL_JUROS_MORA_PREST, VL_MULTA_PREST, TX_JUROS, TX_APLICADA, CD_REPRESENTANTE, GEROU_CREDITO, VL_REFORMADO, VL_JUROS_PREST_MES, VL_DESCONTO_QUITACAO, VL_DEBITOS, VL_PREST_ATRASO_CONCESSAO, VL_PREST_MES_CONCESSAO, VL_PRINC_PREST_ATRASO, VL_CORR_PREST_ATRASO, OBSERVACAO, VL_RESIDUO_AMORTIZACAO, CD_SIT_FUNDACAO, VL_TX_INVALIDEZ, COD_CONVENIO, CD_FORMA_PAGTO, VL_RESERVA_POUPANCA, DT_PREST_ATUALIZADA, VL_CORRECAO_SALDO_QUITACAO, NUM_BANCO, NUM_AGENCIA, NUM_CONTA, CD_PLANO, CARENCIA, BLOQUEIO_COBRANCA, PERCENTUAL_DESCONTO }, Transaction);
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

	}
}