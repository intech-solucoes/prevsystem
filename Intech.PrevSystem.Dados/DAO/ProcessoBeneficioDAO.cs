using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Intech.PrevSystem.Dados.DAO
{
	public abstract class ProcessoBeneficioDAO : BaseDAO<ProcessoBeneficioEntidade>
	{
        public ProcessoBeneficioDAO (IDbTransaction tx = null) : base(tx) { }
        public virtual List<dynamic> BuscarExtratoAssistidoPorFundacaoEmpresaPlanoEspecieNumeroProcessoAnoProcesso(string CD_FUNDACAO, string CD_EMPRESA, string CD_PLANO, string CD_ESPECIE, decimal NUM_PROCESSO, string ANO_PROCESSO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<dynamic>("SELECT PB.CD_FUNDACAO,       PB.CD_EMPRESA,       PB.CD_PLANO,       PB.CD_ESPECIE,       PB.ANO_PROCESSO,       PB.NUM_PROCESSO,            PB.NUM_INSCRICAO,            FN.NUM_MATRICULA,       EB.DS_ESPECIE,        PL.DS_PLANO,       PL.COD_CNPB,       ST.DS_SITUACAO,       HP.DT_INICIO_FUND,         PB.SALDO_INICIAL AS SALDO_INICIAL,       PB.SALDO_ATUAL AS SALDO_ATUAL_GERAL,       ISNULL(PB.VL_PERC_RESGATE,0) AS VL_PERC_RESGATE,       ISNULL(PB.VL_PARC_RESGATE,0) AS VL_PARC_RESGATE,       PB.SALDO_INICIAL - ISNULL(PB.VL_PARC_RESGATE,0) AS SALDO_REVERSAO_BENEFICIO,       PB.NUM_TOT_PARCELAS,       PB.NUM_PARCELAS_PAG,       HS.DT_REFERENCIA,       HS.VALOR_REAIS,       HS.VALOR_COTAS,       HS.SALDO_ATUAL,       HS.SALDO_ATUAL * IV.VALOR_IND AS SALDO_ATUAL_REAIS,       IV.DT_IND,       IV.VALOR_IND,       HS.VALOR_REAIS / HS.VALOR_COTAS AS VALOR_IND2,       ISNULL(TCD.CD_TIPO_CALC_CD, OPR.CD_OPCAO_RECEB) AS CD_TIPO_RENDA,       ISNULL(TCD.DS_TIPO_CALC_CD, OPR.DS_OPCAO_RECEB) AS TIPO_RENDA,       (ISNULL(IV.VALOR_IND,0) / ISNULL(IVA.VALOR_IND,1) - 1) * 100 AS RENTABILIDADE  FROM   GB_PROCESSOS_BENEFICIO PB  INNER JOIN GB_ESPECIE_BENEFICIO EB ON EB.CD_ESPECIE = PB.CD_ESPECIE   INNER JOIN GB_SITUACAO ST ON ST.CD_SITUACAO = PB.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO FN ON FN.CD_FUNDACAO   = PB.CD_FUNDACAO      AND FN.NUM_INSCRICAO = PB.NUM_INSCRICAO   INNER JOIN GB_HIST_SALDO HS ON PB.CD_FUNDACAO  = HS.CD_FUNDACAO       AND PB.CD_EMPRESA   = HS.CD_EMPRESA       AND PB.CD_PLANO     = HS.CD_PLANO       AND PB.CD_ESPECIE   = HS.CD_ESPECIE       AND PB.NUM_PROCESSO = HS.NUM_PROCESSO       AND PB.ANO_PROCESSO = HS.ANO_PROCESSO   INNER JOIN GB_HIST_PROCESSOS HP ON PB.CD_FUNDACAO  = HP.CD_FUNDACAO       AND PB.CD_EMPRESA   = HP.CD_EMPRESA       AND PB.CD_PLANO     = HP.CD_PLANO       AND PB.CD_ESPECIE   = HP.CD_ESPECIE       AND PB.NUM_PROCESSO = HP.NUM_PROCESSO       AND PB.ANO_PROCESSO = HP.ANO_PROCESSO   INNER JOIN GB_HIST_RENDAS HR ON PB.CD_FUNDACAO  = HR.CD_FUNDACAO       AND PB.CD_EMPRESA   = HR.CD_EMPRESA       AND PB.CD_PLANO     = HR.CD_PLANO       AND PB.CD_ESPECIE   = HR.CD_ESPECIE       AND PB.NUM_PROCESSO = HR.NUM_PROCESSO       AND PB.ANO_PROCESSO = HR.ANO_PROCESSO   INNER JOIN GB_OPCAO_RECEBIMENTO OPR ON OPR.CD_OPCAO_RECEB = HR.CD_OPCAO_RECEB      INNER JOIN TB_PLANOS PL ON PL.CD_FUNDACAO = PB.CD_FUNDACAO      AND PL.CD_PLANO = PB.CD_PLANO  INNER JOIN TB_EMPRESA_PLANOS EP ON EP.CD_FUNDACAO = PB.CD_FUNDACAO      AND EP.CD_EMPRESA = PB.CD_EMPRESA        AND EP.CD_PLANO = PB.CD_PLANO  LEFT OUTER JOIN TB_IND_VALORES IV ON IV.COD_IND = EP.IND_RESERVA_POUP  LEFT OUTER JOIN TB_IND_VALORES IVA ON IVA.COD_IND = EP.IND_RESERVA_POUP  LEFT OUTER JOIN GB_TIPO_CALC_CD TCD ON TCD.CD_TIPO_CALC_CD = PB.CD_TIPO_CALC_CD  WHERE  HR.DT_INIC_VALIDADE = (SELECT MAX(HR2.DT_INIC_VALIDADE)                                  FROM GB_HIST_RENDAS HR2                                  WHERE PB.CD_FUNDACAO  = HR2.CD_FUNDACAO                                    AND PB.CD_EMPRESA   = HR2.CD_EMPRESA                                    AND PB.CD_PLANO     = HR2.CD_PLANO                                    AND PB.CD_ESPECIE   = HR2.CD_ESPECIE                                    AND PB.NUM_PROCESSO = HR2.NUM_PROCESSO                                    AND PB.ANO_PROCESSO = HR2.ANO_PROCESSO)    AND IV.DT_IND = (SELECT MAX(IV2.DT_IND)                       FROM TB_IND_VALORES IV2                      WHERE IV2.COD_IND = IV.COD_IND                        AND MONTH(IV2.DT_IND) = MONTH(HS.DT_REFERENCIA)                        AND YEAR(IV2.DT_IND) = YEAR(HS.DT_REFERENCIA))                                    AND IVA.DT_IND = (SELECT MAX(IV3.DT_IND)                       FROM TB_IND_VALORES IV3                      WHERE IV3.COD_IND = IVA.COD_IND                        AND MONTH(IV3.DT_IND) = MONTH(DATEADD(MONTH, -1, HS.DT_REFERENCIA))                        AND YEAR(IV3.DT_IND) = YEAR(DATEADD(MONTH, -1, HS.DT_REFERENCIA)))                                     AND PB.CD_FUNDACAO  = @CD_FUNDACAO     AND PB.CD_EMPRESA   = @CD_EMPRESA     AND PB.CD_PLANO     = @CD_PLANO     AND PB.CD_ESPECIE   = @CD_ESPECIE     AND PB.NUM_PROCESSO = @NUM_PROCESSO     AND PB.ANO_PROCESSO = @ANO_PROCESSO  ORDER BY HS.DT_REFERENCIA DESC;", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, CD_ESPECIE, NUM_PROCESSO, ANO_PROCESSO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<dynamic>("SELECT PB.CD_FUNDACAO,       PB.CD_EMPRESA,       PB.CD_PLANO,       PB.CD_ESPECIE,       PB.ANO_PROCESSO,       PB.NUM_PROCESSO,            PB.NUM_INSCRICAO,            FN.NUM_MATRICULA,       EB.DS_ESPECIE,        PL.DS_PLANO,       PL.COD_CNPB,       ST.DS_SITUACAO,       HP.DT_INICIO_FUND,       NVL(TCD.DS_TIPO_CALC_CD, OPR.DS_OPCAO_RECEB) AS TIPO_RENDA,           PB.SALDO_INICIAL AS SALDO_INICIAL,       PB.SALDO_ATUAL AS SALDO_ATUAL_GERAL,       NVL(PB.VL_PERC_RESGATE,0) AS VL_PERC_RESGATE,       NVL(PB.VL_PARC_RESGATE,0) AS VL_PARC_RESGATE,       PB.SALDO_INICIAL - NVL(PB.VL_PARC_RESGATE,0) AS SALDO_REVERSAO_BENEFICIO,       PB.NUM_TOT_PARCELAS,       PB.NUM_PARCELAS_PAG,       HS.DT_REFERENCIA,       HS.VALOR_REAIS,       HS.VALOR_COTAS,       HS.SALDO_ATUAL,       HS.SALDO_ATUAL * IV.VALOR_IND AS SALDO_ATUAL_REAIS,       IV.DT_IND,       IV.VALOR_IND  FROM   GB_PROCESSOS_BENEFICIO PB  INNER JOIN GB_ESPECIE_BENEFICIO EB ON EB.CD_ESPECIE = PB.CD_ESPECIE   INNER JOIN GB_SITUACAO ST ON ST.CD_SITUACAO = PB.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO FN ON FN.CD_FUNDACAO   = PB.CD_FUNDACAO      AND FN.NUM_INSCRICAO = PB.NUM_INSCRICAO   INNER JOIN GB_HIST_SALDO HS ON PB.CD_FUNDACAO  = HS.CD_FUNDACAO       AND PB.CD_EMPRESA   = HS.CD_EMPRESA       AND PB.CD_PLANO     = HS.CD_PLANO       AND PB.CD_ESPECIE   = HS.CD_ESPECIE       AND PB.NUM_PROCESSO = HS.NUM_PROCESSO       AND PB.ANO_PROCESSO = HS.ANO_PROCESSO   INNER JOIN GB_HIST_PROCESSOS HP ON PB.CD_FUNDACAO  = HP.CD_FUNDACAO       AND PB.CD_EMPRESA   = HP.CD_EMPRESA       AND PB.CD_PLANO     = HP.CD_PLANO       AND PB.CD_ESPECIE   = HP.CD_ESPECIE       AND PB.NUM_PROCESSO = HP.NUM_PROCESSO       AND PB.ANO_PROCESSO = HP.ANO_PROCESSO   INNER JOIN GB_HIST_RENDAS HR ON PB.CD_FUNDACAO  = HR.CD_FUNDACAO       AND PB.CD_EMPRESA   = HR.CD_EMPRESA       AND PB.CD_PLANO     = HR.CD_PLANO       AND PB.CD_ESPECIE   = HR.CD_ESPECIE       AND PB.NUM_PROCESSO = HR.NUM_PROCESSO       AND PB.ANO_PROCESSO = HR.ANO_PROCESSO   INNER JOIN GB_OPCAO_RECEBIMENTO OPR ON OPR.CD_OPCAO_RECEB = HR.CD_OPCAO_RECEB      INNER JOIN TB_PLANOS PL ON PL.CD_FUNDACAO = PB.CD_FUNDACAO      AND PL.CD_PLANO = PB.CD_PLANO  INNER JOIN TB_EMPRESA_PLANOS EP ON EP.CD_FUNDACAO = PB.CD_FUNDACAO      AND EP.CD_EMPRESA = PB.CD_EMPRESA        AND EP.CD_PLANO = PB.CD_PLANO  LEFT OUTER JOIN TB_IND_VALORES IV ON IV.COD_IND = EP.IND_RESERVA_POUP  LEFT OUTER JOIN GB_TIPO_CALC_CD TCD ON TCD.CD_TIPO_CALC_CD = PB.CD_TIPO_CALC_CD  WHERE  HR.DT_INIC_VALIDADE = (SELECT MAX(HR2.DT_INIC_VALIDADE)                                  FROM GB_HIST_RENDAS HR2                                  WHERE PB.CD_FUNDACAO  = HR2.CD_FUNDACAO                                    AND PB.CD_EMPRESA   = HR2.CD_EMPRESA                                    AND PB.CD_PLANO     = HR2.CD_PLANO                                    AND PB.CD_ESPECIE   = HR2.CD_ESPECIE                                    AND PB.NUM_PROCESSO = HR2.NUM_PROCESSO                                    AND PB.ANO_PROCESSO = HR2.ANO_PROCESSO)    AND IV.DT_IND = (SELECT MAX(IV2.DT_IND)                       FROM TB_IND_VALORES IV2                      WHERE IV2.COD_IND = IV.COD_IND                        AND TO_CHAR(IV2.DT_IND, 'mm') = TO_CHAR(HS.DT_REFERENCIA, 'mm')                        AND TO_CHAR(IV2.DT_IND, 'YYYY') = TO_CHAR(HS.DT_REFERENCIA, 'YYYY'))                                     AND PB.CD_FUNDACAO  = :CD_FUNDACAO     AND PB.CD_EMPRESA   = :CD_EMPRESA     AND PB.CD_PLANO     = :CD_PLANO     AND PB.CD_ESPECIE   = :CD_ESPECIE     AND PB.NUM_PROCESSO = :NUM_PROCESSO     AND PB.ANO_PROCESSO = :ANO_PROCESSO  ORDER BY HS.DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, CD_ESPECIE, NUM_PROCESSO, ANO_PROCESSO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<dynamic> BuscarExtratoAssistidoPorFundacaoEmpresaPlanoEspecieNumeroProcessoAnoProcessoIncidLiquidoSuplemantacao(string CD_FUNDACAO, string CD_EMPRESA, string CD_PLANO, string CD_ESPECIE, decimal NUM_PROCESSO, string ANO_PROCESSO, string INCID_LIQUIDO, string ID_RUB_SUPLEMENTACAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<dynamic>("SELECT PB.CD_FUNDACAO,       PB.CD_EMPRESA,       PB.CD_PLANO,       PB.CD_ESPECIE,       PB.ANO_PROCESSO,       PB.NUM_PROCESSO,       PB.NUM_INSCRICAO,            FN.NUM_MATRICULA,       EB.DS_ESPECIE,        PL.DS_PLANO,       PL.COD_CNPB,       ST.DS_SITUACAO,       HP.DT_INICIO_FUND,       TF.DS_TIPO_FOLHA,       FF.DT_REFERENCIA,       RP.DS_RUBRICA,       FF.VALOR_MC  FROM   GB_PROCESSOS_BENEFICIO PB  INNER JOIN GB_ESPECIE_BENEFICIO EB ON EB.CD_ESPECIE = PB.CD_ESPECIE   INNER JOIN GB_SITUACAO ST ON ST.CD_SITUACAO = PB.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO FN ON FN.CD_FUNDACAO   = PB.CD_FUNDACAO      AND FN.NUM_INSCRICAO = PB.NUM_INSCRICAO   INNER JOIN GB_HIST_PROCESSOS HP ON PB.CD_FUNDACAO  = HP.CD_FUNDACAO       AND PB.CD_EMPRESA   = HP.CD_EMPRESA       AND PB.CD_PLANO     = HP.CD_PLANO       AND PB.CD_ESPECIE   = HP.CD_ESPECIE       AND PB.NUM_PROCESSO = HP.NUM_PROCESSO       AND PB.ANO_PROCESSO = HP.ANO_PROCESSO   INNER JOIN GB_FICHA_FINANC_ASSISTIDO FF ON PB.CD_FUNDACAO  = FF.CD_FUNDACAO       AND PB.CD_EMPRESA   = FF.CD_EMPRESA       AND PB.CD_PLANO     = FF.CD_PLANO       AND PB.CD_ESPECIE   = FF.CD_ESPECIE       AND PB.NUM_PROCESSO = FF.NUM_PROCESSO       AND PB.ANO_PROCESSO = FF.ANO_PROCESSO   INNER JOIN TB_PLANOS PL ON PL.CD_FUNDACAO = PB.CD_FUNDACAO      AND PL.CD_PLANO = PB.CD_PLANO  INNER JOIN GB_RUBRICAS_PREVIDENCIAL RP ON RP.CD_RUBRICA = FF.CD_RUBRICA  INNER JOIN TB_TIPO_FOLHA TF ON TF.CD_TIPO_FOLHA = FF.CD_TIPO_FOLHA  WHERE PB.CD_FUNDACAO  = @CD_FUNDACAO     AND PB.CD_EMPRESA   = @CD_EMPRESA     AND PB.CD_PLANO     = @CD_PLANO     AND PB.CD_ESPECIE   = @CD_ESPECIE     AND PB.NUM_PROCESSO = @NUM_PROCESSO     AND PB.ANO_PROCESSO = @ANO_PROCESSO     AND RP.INCID_LIQUIDO = @INCID_LIQUIDO     AND RP.ID_RUB_SUPLEMENTACAO = @ID_RUB_SUPLEMENTACAO  ORDER BY FF.DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, CD_ESPECIE, NUM_PROCESSO, ANO_PROCESSO, INCID_LIQUIDO, ID_RUB_SUPLEMENTACAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<dynamic>("SELECT PB.CD_FUNDACAO, PB.CD_EMPRESA, PB.CD_PLANO, PB.CD_ESPECIE, PB.ANO_PROCESSO, PB.NUM_PROCESSO, PB.NUM_INSCRICAO, FN.NUM_MATRICULA, EB.DS_ESPECIE, PL.DS_PLANO, PL.COD_CNPB, ST.DS_SITUACAO, HP.DT_INICIO_FUND, TF.DS_TIPO_FOLHA, FF.DT_REFERENCIA, RP.DS_RUBRICA, FF.VALOR_MC FROM GB_PROCESSOS_BENEFICIO  PB  INNER  JOIN GB_ESPECIE_BENEFICIO   EB  ON EB.CD_ESPECIE=PB.CD_ESPECIE INNER  JOIN GB_SITUACAO   ST  ON ST.CD_SITUACAO=PB.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO   FN  ON FN.CD_FUNDACAO=PB.CD_FUNDACAO AND FN.NUM_INSCRICAO=PB.NUM_INSCRICAO INNER  JOIN GB_HIST_PROCESSOS   HP  ON PB.CD_FUNDACAO=HP.CD_FUNDACAO AND PB.CD_EMPRESA=HP.CD_EMPRESA AND PB.CD_PLANO=HP.CD_PLANO AND PB.CD_ESPECIE=HP.CD_ESPECIE AND PB.NUM_PROCESSO=HP.NUM_PROCESSO AND PB.ANO_PROCESSO=HP.ANO_PROCESSO INNER  JOIN GB_FICHA_FINANC_ASSISTIDO   FF  ON PB.CD_FUNDACAO=FF.CD_FUNDACAO AND PB.CD_EMPRESA=FF.CD_EMPRESA AND PB.CD_PLANO=FF.CD_PLANO AND PB.CD_ESPECIE=FF.CD_ESPECIE AND PB.NUM_PROCESSO=FF.NUM_PROCESSO AND PB.ANO_PROCESSO=FF.ANO_PROCESSO INNER  JOIN TB_PLANOS   PL  ON PL.CD_FUNDACAO=PB.CD_FUNDACAO AND PL.CD_PLANO=PB.CD_PLANO INNER  JOIN GB_RUBRICAS_PREVIDENCIAL   RP  ON RP.CD_RUBRICA=FF.CD_RUBRICA INNER  JOIN TB_TIPO_FOLHA   TF  ON TF.CD_TIPO_FOLHA=FF.CD_TIPO_FOLHA WHERE PB.CD_FUNDACAO=:CD_FUNDACAO AND PB.CD_EMPRESA=:CD_EMPRESA AND PB.CD_PLANO=:CD_PLANO AND PB.CD_ESPECIE=:CD_ESPECIE AND PB.NUM_PROCESSO=:NUM_PROCESSO AND PB.ANO_PROCESSO=:ANO_PROCESSO AND RP.INCID_LIQUIDO=:INCID_LIQUIDO AND RP.ID_RUB_SUPLEMENTACAO=:ID_RUB_SUPLEMENTACAO ORDER BY FF.DT_REFERENCIA DESC", new { CD_FUNDACAO, CD_EMPRESA, CD_PLANO, CD_ESPECIE, NUM_PROCESSO, ANO_PROCESSO, INCID_LIQUIDO, ID_RUB_SUPLEMENTACAO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarNumProcessoPrevPorCdFundacaoSeqRecebedor(string CD_FUNDACAO, decimal SEQ_RECEBEDOR)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.NUM_PROCESSO_PREV    FROM GB_PROCESSOS_BENEFICIO PB      INNER JOIN GB_RECEBEDOR_BENEFICIO RB ON RB.CD_FUNDACAO = PB.CD_FUNDACAO AND RB.NUM_INSCRICAO = PB.NUM_INSCRICAO      INNER JOIN TB_PLANOS PL ON PL.CD_FUNDACAO = PB.CD_FUNDACAO AND PL.CD_PLANO= PB.CD_PLANO      INNER JOIN GB_ESPECIE_BENEFICIO EB ON EB.CD_ESPECIE = PB.CD_ESPECIE  WHERE RB.CD_FUNDACAO = @CD_FUNDACAO    AND RB.SEQ_RECEBEDOR = @SEQ_RECEBEDOR    AND ( (RB.CD_TIPO_RECEBEDOR = 'A' AND EB.CD_GRUPO_ESPECIE IN ('1','3'))         OR (RB.CD_TIPO_RECEBEDOR = 'G' AND EB.CD_GRUPO_ESPECIE IN ('2','4')))", new { CD_FUNDACAO, SEQ_RECEBEDOR }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.NUM_PROCESSO_PREV FROM GB_PROCESSOS_BENEFICIO  PB  INNER  JOIN GB_RECEBEDOR_BENEFICIO   RB  ON RB.CD_FUNDACAO=PB.CD_FUNDACAO AND RB.NUM_INSCRICAO=PB.NUM_INSCRICAO INNER  JOIN TB_PLANOS   PL  ON PL.CD_FUNDACAO=PB.CD_FUNDACAO AND PL.CD_PLANO=PB.CD_PLANO INNER  JOIN GB_ESPECIE_BENEFICIO   EB  ON EB.CD_ESPECIE=PB.CD_ESPECIE WHERE RB.CD_FUNDACAO=:CD_FUNDACAO AND RB.SEQ_RECEBEDOR=:SEQ_RECEBEDOR AND ((RB.CD_TIPO_RECEBEDOR='A' AND EB.CD_GRUPO_ESPECIE IN ('1', '3')) OR (RB.CD_TIPO_RECEBEDOR='G' AND EB.CD_GRUPO_ESPECIE IN ('2', '4')))", new { CD_FUNDACAO, SEQ_RECEBEDOR }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorCdPessoa(int CD_PESSOA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT * FROM FI_PROCESSO_BENEFICIO  INNER JOIN FI_RECEBEDOR_BENEFICIO ON FI_RECEBEDOR_BENEFICIO.SQ_PROCESSO = FI_PROCESSO_BENEFICIO.SQ_PROCESSO  WHERE FI_RECEBEDOR_BENEFICIO.CD_PESSOA_RECEB = @CD_PESSOA", new { CD_PESSOA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT * FROM FI_PROCESSO_BENEFICIO INNER  JOIN FI_RECEBEDOR_BENEFICIO  ON FI_RECEBEDOR_BENEFICIO.SQ_PROCESSO=FI_PROCESSO_BENEFICIO.SQ_PROCESSO WHERE FI_RECEBEDOR_BENEFICIO.CD_PESSOA_RECEB=:CD_PESSOA", new { CD_PESSOA }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual ProcessoBeneficioEntidade BuscarPorContratoPlano(int SQ_CONTRATO_TRABALHO, int SQ_PLANO_PREVIDENCIAL)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<ProcessoBeneficioEntidade>("SELECT PB.*,         EB.DS_ESPECIE,         MT.DS_MOT_SITUACAO  FROM fi_processo_beneficio PB       INNER JOIN fi_especie_beneficio EB ON EB.SQ_ESPECIE = PB.SQ_ESPECIE       INNER JOIN fi_mot_sit_processo MT ON MT.SQ_MOT_SITUACAO = PB.SQ_MOT_SITUACAO  WHERE PB.SQ_PLANO_PREVIDENCIAL = @SQ_PLANO_PREVIDENCIAL    AND PB.SQ_CONTRATO_TRABALHO = @SQ_CONTRATO_TRABALHO", new { SQ_CONTRATO_TRABALHO, SQ_PLANO_PREVIDENCIAL });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<ProcessoBeneficioEntidade>("SELECT PB.*, EB.DS_ESPECIE, MT.DS_MOT_SITUACAO FROM FI_PROCESSO_BENEFICIO  PB  INNER  JOIN FI_ESPECIE_BENEFICIO   EB  ON EB.SQ_ESPECIE=PB.SQ_ESPECIE INNER  JOIN FI_MOT_SIT_PROCESSO   MT  ON MT.SQ_MOT_SITUACAO=PB.SQ_MOT_SITUACAO WHERE PB.SQ_PLANO_PREVIDENCIAL=:SQ_PLANO_PREVIDENCIAL AND PB.SQ_CONTRATO_TRABALHO=:SQ_CONTRATO_TRABALHO", new { SQ_CONTRATO_TRABALHO, SQ_PLANO_PREVIDENCIAL });
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaInscricaoPlano(string CD_FUNDACAO, string CD_EMPRESA, string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*,         EB.DS_ESPECIE,         HP.DT_INICIO_FUND,  	   ST.DS_SITUACAO,  	   HR.VL_PARCELA_MENSAL,  	   OP.DS_OPCAO_RECEB,         HR.OPCAO_RECB_13  FROM GB_PROCESSOS_BENEFICIO PB  	 INNER JOIN GB_HIST_RENDAS HR ON  			PB.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HR.CD_EMPRESA AND  			PB.CD_PLANO     = HR.CD_PLANO AND  			PB.CD_ESPECIE   = HR.CD_ESPECIE AND  			PB.NUM_PROCESSO = HR.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HR.ANO_PROCESSO AND   			PB.VERSAO       = HR.VERSAO  	 INNER JOIN GB_HIST_PROCESSOS HP ON  			PB.CD_FUNDACAO  = HP.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HP.CD_EMPRESA AND  			PB.CD_PLANO     = HP.CD_PLANO AND  			PB.CD_ESPECIE   = HP.CD_ESPECIE AND  			PB.NUM_PROCESSO = HP.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HP.ANO_PROCESSO AND  			PB.VERSAO       = HP.VERSAO  	 INNER JOIN GB_HIST_SALDO HS ON  			PB.CD_FUNDACAO  = HS.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HS.CD_EMPRESA AND  			PB.CD_PLANO     = HS.CD_PLANO AND  			PB.CD_ESPECIE   = HS.CD_ESPECIE AND  			PB.NUM_PROCESSO = HS.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HS.ANO_PROCESSO AND  			PB.VERSAO       = HS.VERSAO  	 INNER JOIN GB_ESPECIE_BENEFICIO EB ON  			EB.CD_ESPECIE = PB.CD_ESPECIE  	 INNER JOIN GB_SITUACAO ST ON  			ST.CD_SITUACAO = PB.CD_SITUACAO  	 INNER JOIN GB_OPCAO_RECEBIMENTO OP ON  	        OP.CD_OPCAO_RECEB = HR.CD_OPCAO_RECEB  WHERE HR.DT_INIC_VALIDADE = (SELECT MAX(HR2.DT_INIC_VALIDADE)                                 FROM GB_HIST_RENDAS HR2                                WHERE HR2.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			                        HR2.CD_EMPRESA   = HR.CD_EMPRESA AND                           			HR2.CD_PLANO     = HR.CD_PLANO AND  			                        HR2.CD_ESPECIE   = HR.CD_ESPECIE AND  			                        HR2.NUM_PROCESSO = HR.NUM_PROCESSO AND   									HR2.ANO_PROCESSO = HR.ANO_PROCESSO AND  			                        HR2.VERSAO       = HR.VERSAO)  	 AND HS.DT_REFERENCIA = (SELECT MAX(HS2.DT_REFERENCIA)                              FROM GB_HIST_SALDO HS2                             WHERE HS2.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			                     HS2.CD_EMPRESA   = HR.CD_EMPRESA AND                           		 HS2.CD_PLANO     = HR.CD_PLANO AND  			                     HS2.CD_ESPECIE   = HR.CD_ESPECIE AND  			                     HS2.NUM_PROCESSO = HR.NUM_PROCESSO AND   								 HS2.ANO_PROCESSO = HR.ANO_PROCESSO AND  			                     HS2.VERSAO       = HR.VERSAO)    AND PB.CD_PLANO = @CD_PLANO    AND PB.CD_EMPRESA = @CD_EMPRESA    AND PB.CD_FUNDACAO = @CD_FUNDACAO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO", new { CD_FUNDACAO, CD_EMPRESA, NUM_INSCRICAO, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*, EB.DS_ESPECIE, HP.DT_INICIO_FUND, ST.DS_SITUACAO, HR.VL_PARCELA_MENSAL, OP.DS_OPCAO_RECEB, HR.OPCAO_RECB_13 FROM GB_PROCESSOS_BENEFICIO  PB  INNER  JOIN GB_HIST_RENDAS   HR  ON PB.CD_FUNDACAO=HR.CD_FUNDACAO AND PB.CD_EMPRESA=HR.CD_EMPRESA AND PB.CD_PLANO=HR.CD_PLANO AND PB.CD_ESPECIE=HR.CD_ESPECIE AND PB.NUM_PROCESSO=HR.NUM_PROCESSO AND PB.ANO_PROCESSO=HR.ANO_PROCESSO AND PB.VERSAO=HR.VERSAO INNER  JOIN GB_HIST_PROCESSOS   HP  ON PB.CD_FUNDACAO=HP.CD_FUNDACAO AND PB.CD_EMPRESA=HP.CD_EMPRESA AND PB.CD_PLANO=HP.CD_PLANO AND PB.CD_ESPECIE=HP.CD_ESPECIE AND PB.NUM_PROCESSO=HP.NUM_PROCESSO AND PB.ANO_PROCESSO=HP.ANO_PROCESSO AND PB.VERSAO=HP.VERSAO INNER  JOIN GB_HIST_SALDO   HS  ON PB.CD_FUNDACAO=HS.CD_FUNDACAO AND PB.CD_EMPRESA=HS.CD_EMPRESA AND PB.CD_PLANO=HS.CD_PLANO AND PB.CD_ESPECIE=HS.CD_ESPECIE AND PB.NUM_PROCESSO=HS.NUM_PROCESSO AND PB.ANO_PROCESSO=HS.ANO_PROCESSO AND PB.VERSAO=HS.VERSAO INNER  JOIN GB_ESPECIE_BENEFICIO   EB  ON EB.CD_ESPECIE=PB.CD_ESPECIE INNER  JOIN GB_SITUACAO   ST  ON ST.CD_SITUACAO=PB.CD_SITUACAO INNER  JOIN GB_OPCAO_RECEBIMENTO   OP  ON OP.CD_OPCAO_RECEB=HR.CD_OPCAO_RECEB WHERE HR.DT_INIC_VALIDADE=(SELECT MAX(HR2.DT_INIC_VALIDADE) FROM GB_HIST_RENDAS  HR2  WHERE HR2.CD_FUNDACAO=HR.CD_FUNDACAO AND HR2.CD_EMPRESA=HR.CD_EMPRESA AND HR2.CD_PLANO=HR.CD_PLANO AND HR2.CD_ESPECIE=HR.CD_ESPECIE AND HR2.NUM_PROCESSO=HR.NUM_PROCESSO AND HR2.ANO_PROCESSO=HR.ANO_PROCESSO AND HR2.VERSAO=HR.VERSAO) AND HS.DT_REFERENCIA=(SELECT MAX(HS2.DT_REFERENCIA) FROM GB_HIST_SALDO  HS2  WHERE HS2.CD_FUNDACAO=HR.CD_FUNDACAO AND HS2.CD_EMPRESA=HR.CD_EMPRESA AND HS2.CD_PLANO=HR.CD_PLANO AND HS2.CD_ESPECIE=HR.CD_ESPECIE AND HS2.NUM_PROCESSO=HR.NUM_PROCESSO AND HS2.ANO_PROCESSO=HR.ANO_PROCESSO AND HS2.VERSAO=HR.VERSAO) AND PB.CD_PLANO=:CD_PLANO AND PB.CD_EMPRESA=:CD_EMPRESA AND PB.CD_FUNDACAO=:CD_FUNDACAO AND PB.NUM_INSCRICAO=:NUM_INSCRICAO", new { CD_FUNDACAO, CD_EMPRESA, NUM_INSCRICAO, CD_PLANO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaMatriculaPlano(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   GB_SITUACAO.DS_SITUACAO,         GB_HIST_PROCESSOS.DT_REQUERIMENTO,          GB_HIST_PROCESSOS.DT_AFASTAMENTO,          GB_HIST_PROCESSOS.DT_INICIO_PREV,          GB_HIST_PROCESSOS.DT_INICIO_FUND,         GB_TIPO_CALC_CD.DS_TIPO_CALC_CD  FROM   GB_PROCESSOS_BENEFICIO   INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_PROCESSOS_BENEFICIO.CD_ESPECIE   INNER JOIN GB_SITUACAO ON GB_SITUACAO.CD_SITUACAO = GB_PROCESSOS_BENEFICIO.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO   LEFT OUTER JOIN GB_HIST_PROCESSOS ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = GB_HIST_PROCESSOS.CD_FUNDACAO   LEFT OUTER JOIN GB_TIPO_CALC_CD ON GB_TIPO_CALC_CD.CD_TIPO_CALC_CD = GB_PROCESSOS_BENEFICIO.CD_TIPO_CALC_CD      AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = GB_HIST_PROCESSOS.CD_EMPRESA       AND GB_PROCESSOS_BENEFICIO.CD_PLANO = GB_HIST_PROCESSOS.CD_PLANO       AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE = GB_HIST_PROCESSOS.CD_ESPECIE       AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO = GB_HIST_PROCESSOS.NUM_PROCESSO       AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO = GB_HIST_PROCESSOS.ANO_PROCESSO   WHERE  CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO     AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO     AND CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA     AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = @CD_EMPRESA     AND CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA     AND GB_PROCESSOS_BENEFICIO.CD_PLANO = @CD_PLANO  ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_SITUACAO.DS_SITUACAO, GB_HIST_PROCESSOS.DT_REQUERIMENTO, GB_HIST_PROCESSOS.DT_AFASTAMENTO, GB_HIST_PROCESSOS.DT_INICIO_PREV, GB_HIST_PROCESSOS.DT_INICIO_FUND, GB_TIPO_CALC_CD.DS_TIPO_CALC_CD FROM GB_PROCESSOS_BENEFICIO INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_PROCESSOS_BENEFICIO.CD_ESPECIE INNER  JOIN GB_SITUACAO  ON GB_SITUACAO.CD_SITUACAO=GB_PROCESSOS_BENEFICIO.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO LEFT OUTER JOIN GB_HIST_PROCESSOS  ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=GB_HIST_PROCESSOS.CD_FUNDACAO LEFT OUTER JOIN GB_TIPO_CALC_CD  ON GB_TIPO_CALC_CD.CD_TIPO_CALC_CD=GB_PROCESSOS_BENEFICIO.CD_TIPO_CALC_CD AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=GB_HIST_PROCESSOS.CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=GB_HIST_PROCESSOS.CD_PLANO AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE=GB_HIST_PROCESSOS.CD_ESPECIE AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO=GB_HIST_PROCESSOS.NUM_PROCESSO AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO=GB_HIST_PROCESSOS.ANO_PROCESSO WHERE CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=:CD_PLANO ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoAlt(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   GB_SITUACAO.DS_SITUACAO,         GB_HIST_PROCESSOS.DT_REQUERIMENTO,          GB_HIST_PROCESSOS.DT_AFASTAMENTO,          GB_HIST_PROCESSOS.DT_INICIO_PREV,          GB_HIST_PROCESSOS.DT_INICIO_FUND,         GB_TIPO_CALC_CD.DS_TIPO_CALC_CD  FROM   GB_PROCESSOS_BENEFICIO   INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_PROCESSOS_BENEFICIO.CD_ESPECIE   INNER JOIN GB_SITUACAO ON GB_SITUACAO.CD_SITUACAO = GB_PROCESSOS_BENEFICIO.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO ON           CS_FUNCIONARIO.CD_FUNDACAO   = GB_PROCESSOS_BENEFICIO.CD_FUNDACAO  	AND CS_FUNCIONARIO.NUM_INSCRICAO = GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO   LEFT OUTER JOIN GB_HIST_PROCESSOS ON           GB_PROCESSOS_BENEFICIO.CD_FUNDACAO  = GB_HIST_PROCESSOS.CD_FUNDACAO       AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA   = GB_HIST_PROCESSOS.CD_EMPRESA       AND GB_PROCESSOS_BENEFICIO.CD_PLANO     = GB_HIST_PROCESSOS.CD_PLANO       AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE   = GB_HIST_PROCESSOS.CD_ESPECIE       AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO = GB_HIST_PROCESSOS.NUM_PROCESSO       AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO = GB_HIST_PROCESSOS.ANO_PROCESSO   LEFT OUTER JOIN GB_TIPO_CALC_CD ON GB_TIPO_CALC_CD.CD_TIPO_CALC_CD = GB_PROCESSOS_BENEFICIO.CD_TIPO_CALC_CD  WHERE  GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO     AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = @CD_EMPRESA     AND CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA     AND GB_PROCESSOS_BENEFICIO.CD_PLANO = @CD_PLANO  ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_SITUACAO.DS_SITUACAO, GB_HIST_PROCESSOS.DT_REQUERIMENTO, GB_HIST_PROCESSOS.DT_AFASTAMENTO, GB_HIST_PROCESSOS.DT_INICIO_PREV, GB_HIST_PROCESSOS.DT_INICIO_FUND, GB_TIPO_CALC_CD.DS_TIPO_CALC_CD FROM GB_PROCESSOS_BENEFICIO INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_PROCESSOS_BENEFICIO.CD_ESPECIE INNER  JOIN GB_SITUACAO  ON GB_SITUACAO.CD_SITUACAO=GB_PROCESSOS_BENEFICIO.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.CD_FUNDACAO=GB_PROCESSOS_BENEFICIO.CD_FUNDACAO AND CS_FUNCIONARIO.NUM_INSCRICAO=GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO LEFT OUTER JOIN GB_HIST_PROCESSOS  ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=GB_HIST_PROCESSOS.CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=GB_HIST_PROCESSOS.CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=GB_HIST_PROCESSOS.CD_PLANO AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE=GB_HIST_PROCESSOS.CD_ESPECIE AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO=GB_HIST_PROCESSOS.NUM_PROCESSO AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO=GB_HIST_PROCESSOS.ANO_PROCESSO LEFT OUTER JOIN GB_TIPO_CALC_CD  ON GB_TIPO_CALC_CD.CD_TIPO_CALC_CD=GB_PROCESSOS_BENEFICIO.CD_TIPO_CALC_CD WHERE GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=:CD_PLANO ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoFuncionario(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   GB_SITUACAO.DS_SITUACAO,         GB_HIST_PROCESSOS.DT_REQUERIMENTO,          GB_HIST_PROCESSOS.DT_AFASTAMENTO,          GB_HIST_PROCESSOS.DT_INICIO_PREV,          GB_HIST_PROCESSOS.DT_INICIO_FUND   FROM   GB_PROCESSOS_BENEFICIO   INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_PROCESSOS_BENEFICIO.CD_ESPECIE   INNER JOIN GB_SITUACAO ON GB_SITUACAO.CD_SITUACAO = GB_PROCESSOS_BENEFICIO.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO   LEFT OUTER JOIN GB_HIST_PROCESSOS ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = GB_HIST_PROCESSOS.CD_FUNDACAO       AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = GB_HIST_PROCESSOS.CD_EMPRESA       AND GB_PROCESSOS_BENEFICIO.CD_PLANO = GB_HIST_PROCESSOS.CD_PLANO       AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE = GB_HIST_PROCESSOS.CD_ESPECIE       AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO = GB_HIST_PROCESSOS.NUM_PROCESSO       AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO = GB_HIST_PROCESSOS.ANO_PROCESSO   WHERE  CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO     AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO     AND CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA     AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = @CD_EMPRESA     AND CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA     AND GB_PROCESSOS_BENEFICIO.CD_PLANO = @CD_PLANO     AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('1', '3')     AND GB_PROCESSOS_BENEFICIO.CD_SITUACAO <> '06'  ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_SITUACAO.DS_SITUACAO, GB_HIST_PROCESSOS.DT_REQUERIMENTO, GB_HIST_PROCESSOS.DT_AFASTAMENTO, GB_HIST_PROCESSOS.DT_INICIO_PREV, GB_HIST_PROCESSOS.DT_INICIO_FUND FROM GB_PROCESSOS_BENEFICIO INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_PROCESSOS_BENEFICIO.CD_ESPECIE INNER  JOIN GB_SITUACAO  ON GB_SITUACAO.CD_SITUACAO=GB_PROCESSOS_BENEFICIO.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO LEFT OUTER JOIN GB_HIST_PROCESSOS  ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=GB_HIST_PROCESSOS.CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=GB_HIST_PROCESSOS.CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=GB_HIST_PROCESSOS.CD_PLANO AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE=GB_HIST_PROCESSOS.CD_ESPECIE AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO=GB_HIST_PROCESSOS.NUM_PROCESSO AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO=GB_HIST_PROCESSOS.ANO_PROCESSO WHERE CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=:CD_PLANO AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('1', '3') AND GB_PROCESSOS_BENEFICIO.CD_SITUACAO<>'06' ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoNaoEncerrado(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   GB_SITUACAO.DS_SITUACAO,         GB_HIST_PROCESSOS.DT_REQUERIMENTO,          GB_HIST_PROCESSOS.DT_AFASTAMENTO,          GB_HIST_PROCESSOS.DT_INICIO_PREV,          GB_HIST_PROCESSOS.DT_INICIO_FUND   FROM   GB_PROCESSOS_BENEFICIO   INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_PROCESSOS_BENEFICIO.CD_ESPECIE   INNER JOIN GB_SITUACAO ON GB_SITUACAO.CD_SITUACAO = GB_PROCESSOS_BENEFICIO.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO   LEFT OUTER JOIN GB_HIST_PROCESSOS ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = GB_HIST_PROCESSOS.CD_FUNDACAO       AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = GB_HIST_PROCESSOS.CD_EMPRESA       AND GB_PROCESSOS_BENEFICIO.CD_PLANO = GB_HIST_PROCESSOS.CD_PLANO       AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE = GB_HIST_PROCESSOS.CD_ESPECIE       AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO = GB_HIST_PROCESSOS.NUM_PROCESSO       AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO = GB_HIST_PROCESSOS.ANO_PROCESSO   WHERE  CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO     AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO     AND CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA     AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = @CD_EMPRESA     AND CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA     AND GB_PROCESSOS_BENEFICIO.CD_PLANO = @CD_PLANO     AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('1', '3')  ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_SITUACAO.DS_SITUACAO, GB_HIST_PROCESSOS.DT_REQUERIMENTO, GB_HIST_PROCESSOS.DT_AFASTAMENTO, GB_HIST_PROCESSOS.DT_INICIO_PREV, GB_HIST_PROCESSOS.DT_INICIO_FUND FROM GB_PROCESSOS_BENEFICIO INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_PROCESSOS_BENEFICIO.CD_ESPECIE INNER  JOIN GB_SITUACAO  ON GB_SITUACAO.CD_SITUACAO=GB_PROCESSOS_BENEFICIO.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO LEFT OUTER JOIN GB_HIST_PROCESSOS  ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=GB_HIST_PROCESSOS.CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=GB_HIST_PROCESSOS.CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=GB_HIST_PROCESSOS.CD_PLANO AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE=GB_HIST_PROCESSOS.CD_ESPECIE AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO=GB_HIST_PROCESSOS.NUM_PROCESSO AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO=GB_HIST_PROCESSOS.ANO_PROCESSO WHERE CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=:CD_PLANO AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('1', '3') ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoPensionista(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   GB_SITUACAO.DS_SITUACAO,         GB_HIST_PROCESSOS.DT_REQUERIMENTO,          GB_HIST_PROCESSOS.DT_AFASTAMENTO,          GB_HIST_PROCESSOS.DT_INICIO_PREV,          GB_HIST_PROCESSOS.DT_INICIO_FUND   FROM   GB_PROCESSOS_BENEFICIO   INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_PROCESSOS_BENEFICIO.CD_ESPECIE   INNER JOIN GB_SITUACAO ON GB_SITUACAO.CD_SITUACAO = GB_PROCESSOS_BENEFICIO.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO   LEFT OUTER JOIN GB_HIST_PROCESSOS ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = GB_HIST_PROCESSOS.CD_FUNDACAO       AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = GB_HIST_PROCESSOS.CD_EMPRESA       AND GB_PROCESSOS_BENEFICIO.CD_PLANO = GB_HIST_PROCESSOS.CD_PLANO       AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE = GB_HIST_PROCESSOS.CD_ESPECIE       AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO = GB_HIST_PROCESSOS.NUM_PROCESSO       AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO = GB_HIST_PROCESSOS.ANO_PROCESSO   WHERE  CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO     AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO     AND CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA     AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = @CD_EMPRESA     AND CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA     AND GB_PROCESSOS_BENEFICIO.CD_PLANO = @CD_PLANO     AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('2', '4')  ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_SITUACAO.DS_SITUACAO, GB_HIST_PROCESSOS.DT_REQUERIMENTO, GB_HIST_PROCESSOS.DT_AFASTAMENTO, GB_HIST_PROCESSOS.DT_INICIO_PREV, GB_HIST_PROCESSOS.DT_INICIO_FUND FROM GB_PROCESSOS_BENEFICIO INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_PROCESSOS_BENEFICIO.CD_ESPECIE INNER  JOIN GB_SITUACAO  ON GB_SITUACAO.CD_SITUACAO=GB_PROCESSOS_BENEFICIO.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO LEFT OUTER JOIN GB_HIST_PROCESSOS  ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=GB_HIST_PROCESSOS.CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=GB_HIST_PROCESSOS.CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=GB_HIST_PROCESSOS.CD_PLANO AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE=GB_HIST_PROCESSOS.CD_ESPECIE AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO=GB_HIST_PROCESSOS.NUM_PROCESSO AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO=GB_HIST_PROCESSOS.ANO_PROCESSO WHERE CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=:CD_PLANO AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('2', '4') ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorInscricaoPlano(string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*,         EB.DS_ESPECIE,         HP.DT_INICIO_FUND,  	   ST.DS_SITUACAO,  	   HR.VL_PARCELA_MENSAL,  	   OP.DS_OPCAO_RECEB,         HR.OPCAO_RECB_13  FROM GB_PROCESSOS_BENEFICIO PB  	 INNER JOIN GB_HIST_RENDAS HR ON  			PB.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HR.CD_EMPRESA AND  			PB.CD_PLANO     = HR.CD_PLANO AND  			PB.CD_ESPECIE   = HR.CD_ESPECIE AND  			PB.NUM_PROCESSO = HR.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HR.ANO_PROCESSO AND   			PB.VERSAO       = HR.VERSAO  	 INNER JOIN GB_HIST_PROCESSOS HP ON  			PB.CD_FUNDACAO  = HP.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HP.CD_EMPRESA AND  			PB.CD_PLANO     = HP.CD_PLANO AND  			PB.CD_ESPECIE   = HP.CD_ESPECIE AND  			PB.NUM_PROCESSO = HP.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HP.ANO_PROCESSO AND  			PB.VERSAO       = HP.VERSAO  	 INNER JOIN GB_HIST_SALDO HS ON  			PB.CD_FUNDACAO  = HS.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HS.CD_EMPRESA AND  			PB.CD_PLANO     = HS.CD_PLANO AND  			PB.CD_ESPECIE   = HS.CD_ESPECIE AND  			PB.NUM_PROCESSO = HS.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HS.ANO_PROCESSO AND  			PB.VERSAO       = HS.VERSAO  	 INNER JOIN GB_ESPECIE_BENEFICIO EB ON  			EB.CD_ESPECIE = PB.CD_ESPECIE  	 INNER JOIN GB_SITUACAO ST ON  			ST.CD_SITUACAO = PB.CD_SITUACAO  	 INNER JOIN GB_OPCAO_RECEBIMENTO OP ON  	        OP.CD_OPCAO_RECEB = HR.CD_OPCAO_RECEB  WHERE HR.DT_INIC_VALIDADE = (SELECT MAX(HR2.DT_INIC_VALIDADE)                                 FROM GB_HIST_RENDAS HR2                                WHERE HR2.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			                        HR2.CD_EMPRESA   = HR.CD_EMPRESA AND                           			HR2.CD_PLANO     = HR.CD_PLANO AND  			                        HR2.CD_ESPECIE   = HR.CD_ESPECIE AND  			                        HR2.NUM_PROCESSO = HR.NUM_PROCESSO AND   									HR2.ANO_PROCESSO = HR.ANO_PROCESSO AND  			                        HR2.VERSAO       = HR.VERSAO)  	 AND HS.DT_REFERENCIA = (SELECT MAX(HS2.DT_REFERENCIA)                              FROM GB_HIST_SALDO HS2                             WHERE HS2.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			                     HS2.CD_EMPRESA   = HR.CD_EMPRESA AND                           		 HS2.CD_PLANO     = HR.CD_PLANO AND  			                     HS2.CD_ESPECIE   = HR.CD_ESPECIE AND  			                     HS2.NUM_PROCESSO = HR.NUM_PROCESSO AND   								 HS2.ANO_PROCESSO = HR.ANO_PROCESSO AND  			                     HS2.VERSAO       = HR.VERSAO)    AND PB.CD_PLANO = @CD_PLANO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO", new { NUM_INSCRICAO, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*, EB.DS_ESPECIE, HP.DT_INICIO_FUND, ST.DS_SITUACAO, HR.VL_PARCELA_MENSAL, OP.DS_OPCAO_RECEB, HR.OPCAO_RECB_13 FROM GB_PROCESSOS_BENEFICIO  PB  INNER  JOIN GB_HIST_RENDAS   HR  ON PB.CD_FUNDACAO=HR.CD_FUNDACAO AND PB.CD_EMPRESA=HR.CD_EMPRESA AND PB.CD_PLANO=HR.CD_PLANO AND PB.CD_ESPECIE=HR.CD_ESPECIE AND PB.NUM_PROCESSO=HR.NUM_PROCESSO AND PB.ANO_PROCESSO=HR.ANO_PROCESSO AND PB.VERSAO=HR.VERSAO INNER  JOIN GB_HIST_PROCESSOS   HP  ON PB.CD_FUNDACAO=HP.CD_FUNDACAO AND PB.CD_EMPRESA=HP.CD_EMPRESA AND PB.CD_PLANO=HP.CD_PLANO AND PB.CD_ESPECIE=HP.CD_ESPECIE AND PB.NUM_PROCESSO=HP.NUM_PROCESSO AND PB.ANO_PROCESSO=HP.ANO_PROCESSO AND PB.VERSAO=HP.VERSAO INNER  JOIN GB_HIST_SALDO   HS  ON PB.CD_FUNDACAO=HS.CD_FUNDACAO AND PB.CD_EMPRESA=HS.CD_EMPRESA AND PB.CD_PLANO=HS.CD_PLANO AND PB.CD_ESPECIE=HS.CD_ESPECIE AND PB.NUM_PROCESSO=HS.NUM_PROCESSO AND PB.ANO_PROCESSO=HS.ANO_PROCESSO AND PB.VERSAO=HS.VERSAO INNER  JOIN GB_ESPECIE_BENEFICIO   EB  ON EB.CD_ESPECIE=PB.CD_ESPECIE INNER  JOIN GB_SITUACAO   ST  ON ST.CD_SITUACAO=PB.CD_SITUACAO INNER  JOIN GB_OPCAO_RECEBIMENTO   OP  ON OP.CD_OPCAO_RECEB=HR.CD_OPCAO_RECEB WHERE HR.DT_INIC_VALIDADE=(SELECT MAX(HR2.DT_INIC_VALIDADE) FROM GB_HIST_RENDAS  HR2  WHERE HR2.CD_FUNDACAO=HR.CD_FUNDACAO AND HR2.CD_EMPRESA=HR.CD_EMPRESA AND HR2.CD_PLANO=HR.CD_PLANO AND HR2.CD_ESPECIE=HR.CD_ESPECIE AND HR2.NUM_PROCESSO=HR.NUM_PROCESSO AND HR2.ANO_PROCESSO=HR.ANO_PROCESSO AND HR2.VERSAO=HR.VERSAO) AND HS.DT_REFERENCIA=(SELECT MAX(HS2.DT_REFERENCIA) FROM GB_HIST_SALDO  HS2  WHERE HS2.CD_FUNDACAO=HR.CD_FUNDACAO AND HS2.CD_EMPRESA=HR.CD_EMPRESA AND HS2.CD_PLANO=HR.CD_PLANO AND HS2.CD_ESPECIE=HR.CD_ESPECIE AND HS2.NUM_PROCESSO=HR.NUM_PROCESSO AND HS2.ANO_PROCESSO=HR.ANO_PROCESSO AND HS2.VERSAO=HR.VERSAO) AND PB.CD_PLANO=:CD_PLANO AND PB.NUM_INSCRICAO=:NUM_INSCRICAO", new { NUM_INSCRICAO, CD_PLANO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorInscricaoPlanoSemHistSaldo(string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*,         EB.DS_ESPECIE,         HP.DT_INICIO_FUND,  	   ST.DS_SITUACAO,  	   HR.VL_PARCELA_MENSAL,  	   OP.DS_OPCAO_RECEB,         HR.OPCAO_RECB_13  FROM GB_PROCESSOS_BENEFICIO PB  	 INNER JOIN GB_HIST_RENDAS HR ON  			PB.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HR.CD_EMPRESA AND  			PB.CD_PLANO     = HR.CD_PLANO AND  			PB.CD_ESPECIE   = HR.CD_ESPECIE AND  			PB.NUM_PROCESSO = HR.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HR.ANO_PROCESSO AND   			PB.VERSAO       = HR.VERSAO  	 INNER JOIN GB_HIST_PROCESSOS HP ON  			PB.CD_FUNDACAO  = HP.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HP.CD_EMPRESA AND  			PB.CD_PLANO     = HP.CD_PLANO AND  			PB.CD_ESPECIE   = HP.CD_ESPECIE AND  			PB.NUM_PROCESSO = HP.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HP.ANO_PROCESSO AND  			PB.VERSAO       = HP.VERSAO    	 INNER JOIN GB_ESPECIE_BENEFICIO EB ON  			EB.CD_ESPECIE = PB.CD_ESPECIE  	 INNER JOIN GB_SITUACAO ST ON  			ST.CD_SITUACAO = PB.CD_SITUACAO  	 INNER JOIN GB_OPCAO_RECEBIMENTO OP ON  	        OP.CD_OPCAO_RECEB = HR.CD_OPCAO_RECEB  WHERE HR.DT_INIC_VALIDADE = (SELECT MAX(HR2.DT_INIC_VALIDADE)                                 FROM GB_HIST_RENDAS HR2                                WHERE HR2.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			                        HR2.CD_EMPRESA   = HR.CD_EMPRESA AND                           			HR2.CD_PLANO     = HR.CD_PLANO AND  			                        HR2.CD_ESPECIE   = HR.CD_ESPECIE AND  			                        HR2.NUM_PROCESSO = HR.NUM_PROCESSO AND   									HR2.ANO_PROCESSO = HR.ANO_PROCESSO AND  			                        HR2.VERSAO       = HR.VERSAO)    AND PB.CD_PLANO = @CD_PLANO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO", new { NUM_INSCRICAO, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*, EB.DS_ESPECIE, HP.DT_INICIO_FUND, ST.DS_SITUACAO, HR.VL_PARCELA_MENSAL, OP.DS_OPCAO_RECEB, HR.OPCAO_RECB_13 FROM GB_PROCESSOS_BENEFICIO  PB  INNER  JOIN GB_HIST_RENDAS   HR  ON PB.CD_FUNDACAO=HR.CD_FUNDACAO AND PB.CD_EMPRESA=HR.CD_EMPRESA AND PB.CD_PLANO=HR.CD_PLANO AND PB.CD_ESPECIE=HR.CD_ESPECIE AND PB.NUM_PROCESSO=HR.NUM_PROCESSO AND PB.ANO_PROCESSO=HR.ANO_PROCESSO AND PB.VERSAO=HR.VERSAO INNER  JOIN GB_HIST_PROCESSOS   HP  ON PB.CD_FUNDACAO=HP.CD_FUNDACAO AND PB.CD_EMPRESA=HP.CD_EMPRESA AND PB.CD_PLANO=HP.CD_PLANO AND PB.CD_ESPECIE=HP.CD_ESPECIE AND PB.NUM_PROCESSO=HP.NUM_PROCESSO AND PB.ANO_PROCESSO=HP.ANO_PROCESSO AND PB.VERSAO=HP.VERSAO INNER  JOIN GB_ESPECIE_BENEFICIO   EB  ON EB.CD_ESPECIE=PB.CD_ESPECIE INNER  JOIN GB_SITUACAO   ST  ON ST.CD_SITUACAO=PB.CD_SITUACAO INNER  JOIN GB_OPCAO_RECEBIMENTO   OP  ON OP.CD_OPCAO_RECEB=HR.CD_OPCAO_RECEB WHERE HR.DT_INIC_VALIDADE=(SELECT MAX(HR2.DT_INIC_VALIDADE) FROM GB_HIST_RENDAS  HR2  WHERE HR2.CD_FUNDACAO=HR.CD_FUNDACAO AND HR2.CD_EMPRESA=HR.CD_EMPRESA AND HR2.CD_PLANO=HR.CD_PLANO AND HR2.CD_ESPECIE=HR.CD_ESPECIE AND HR2.NUM_PROCESSO=HR.NUM_PROCESSO AND HR2.ANO_PROCESSO=HR.ANO_PROCESSO AND HR2.VERSAO=HR.VERSAO) AND PB.CD_PLANO=:CD_PLANO AND PB.NUM_INSCRICAO=:NUM_INSCRICAO", new { NUM_INSCRICAO, CD_PLANO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual List<ProcessoBeneficioEntidade> BuscarPorInscricaoPlanoSemHistSaldoUltimoAno(string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*,         EB.DS_ESPECIE,         HP.DT_INICIO_FUND,  	   ST.DS_SITUACAO,  	   HR.VL_PARCELA_MENSAL,  	   OP.DS_OPCAO_RECEB,         HR.OPCAO_RECB_13  FROM GB_PROCESSOS_BENEFICIO PB  	 INNER JOIN GB_HIST_RENDAS HR ON  			PB.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HR.CD_EMPRESA AND  			PB.CD_PLANO     = HR.CD_PLANO AND  			PB.CD_ESPECIE   = HR.CD_ESPECIE AND  			PB.NUM_PROCESSO = HR.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HR.ANO_PROCESSO AND   			PB.VERSAO       = HR.VERSAO  	 INNER JOIN GB_HIST_PROCESSOS HP ON  			PB.CD_FUNDACAO  = HP.CD_FUNDACAO AND  			PB.CD_EMPRESA   = HP.CD_EMPRESA AND  			PB.CD_PLANO     = HP.CD_PLANO AND  			PB.CD_ESPECIE   = HP.CD_ESPECIE AND  			PB.NUM_PROCESSO = HP.NUM_PROCESSO AND   			PB.ANO_PROCESSO = HP.ANO_PROCESSO AND  			PB.VERSAO       = HP.VERSAO    	 INNER JOIN GB_ESPECIE_BENEFICIO EB ON  			EB.CD_ESPECIE = PB.CD_ESPECIE  	 INNER JOIN GB_SITUACAO ST ON  			ST.CD_SITUACAO = PB.CD_SITUACAO  	 INNER JOIN GB_OPCAO_RECEBIMENTO OP ON  	        OP.CD_OPCAO_RECEB = HR.CD_OPCAO_RECEB  WHERE HR.DT_INIC_VALIDADE = (SELECT MAX(HR2.DT_INIC_VALIDADE)                                 FROM GB_HIST_RENDAS HR2                                WHERE HR2.CD_FUNDACAO  = HR.CD_FUNDACAO AND  			                        HR2.CD_EMPRESA   = HR.CD_EMPRESA AND                           			HR2.CD_PLANO     = HR.CD_PLANO AND  			                        HR2.CD_ESPECIE   = HR.CD_ESPECIE AND  			                        HR2.NUM_PROCESSO = HR.NUM_PROCESSO AND   									HR2.ANO_PROCESSO = HR.ANO_PROCESSO AND  			                        HR2.VERSAO       = HR.VERSAO)    AND PB.CD_PLANO = @CD_PLANO    AND PB.NUM_INSCRICAO = @NUM_INSCRICAO    ORDER BY PB.ANO_PROCESSO DESC", new { NUM_INSCRICAO, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*, EB.DS_ESPECIE, HP.DT_INICIO_FUND, ST.DS_SITUACAO, HR.VL_PARCELA_MENSAL, OP.DS_OPCAO_RECEB, HR.OPCAO_RECB_13 FROM GB_PROCESSOS_BENEFICIO  PB  INNER  JOIN GB_HIST_RENDAS   HR  ON PB.CD_FUNDACAO=HR.CD_FUNDACAO AND PB.CD_EMPRESA=HR.CD_EMPRESA AND PB.CD_PLANO=HR.CD_PLANO AND PB.CD_ESPECIE=HR.CD_ESPECIE AND PB.NUM_PROCESSO=HR.NUM_PROCESSO AND PB.ANO_PROCESSO=HR.ANO_PROCESSO AND PB.VERSAO=HR.VERSAO INNER  JOIN GB_HIST_PROCESSOS   HP  ON PB.CD_FUNDACAO=HP.CD_FUNDACAO AND PB.CD_EMPRESA=HP.CD_EMPRESA AND PB.CD_PLANO=HP.CD_PLANO AND PB.CD_ESPECIE=HP.CD_ESPECIE AND PB.NUM_PROCESSO=HP.NUM_PROCESSO AND PB.ANO_PROCESSO=HP.ANO_PROCESSO AND PB.VERSAO=HP.VERSAO INNER  JOIN GB_ESPECIE_BENEFICIO   EB  ON EB.CD_ESPECIE=PB.CD_ESPECIE INNER  JOIN GB_SITUACAO   ST  ON ST.CD_SITUACAO=PB.CD_SITUACAO INNER  JOIN GB_OPCAO_RECEBIMENTO   OP  ON OP.CD_OPCAO_RECEB=HR.CD_OPCAO_RECEB WHERE HR.DT_INIC_VALIDADE=(SELECT MAX(HR2.DT_INIC_VALIDADE) FROM GB_HIST_RENDAS  HR2  WHERE HR2.CD_FUNDACAO=HR.CD_FUNDACAO AND HR2.CD_EMPRESA=HR.CD_EMPRESA AND HR2.CD_PLANO=HR.CD_PLANO AND HR2.CD_ESPECIE=HR.CD_ESPECIE AND HR2.NUM_PROCESSO=HR.NUM_PROCESSO AND HR2.ANO_PROCESSO=HR.ANO_PROCESSO AND HR2.VERSAO=HR.VERSAO) AND PB.CD_PLANO=:CD_PLANO AND PB.NUM_INSCRICAO=:NUM_INSCRICAO ORDER BY PB.ANO_PROCESSO DESC", new { NUM_INSCRICAO, CD_PLANO }).ToList();
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
			}
		}

		public virtual ProcessoBeneficioEntidade BuscarPorProcesso(int SQ_PROCESSO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<ProcessoBeneficioEntidade>("SELECT PB.*,         EB.DS_ESPECIE,         MT.DS_MOT_SITUACAO  FROM fi_processo_beneficio PB       INNER JOIN fi_especie_beneficio EB ON EB.SQ_ESPECIE = PB.SQ_ESPECIE       INNER JOIN fi_mot_sit_processo MT ON MT.SQ_MOT_SITUACAO = PB.SQ_MOT_SITUACAO  WHERE PB.SQ_PROCESSO = @SQ_PROCESSO", new { SQ_PROCESSO });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<ProcessoBeneficioEntidade>("SELECT PB.*, EB.DS_ESPECIE, MT.DS_MOT_SITUACAO FROM FI_PROCESSO_BENEFICIO  PB  INNER  JOIN FI_ESPECIE_BENEFICIO   EB  ON EB.SQ_ESPECIE=PB.SQ_ESPECIE INNER  JOIN FI_MOT_SIT_PROCESSO   MT  ON MT.SQ_MOT_SITUACAO=PB.SQ_MOT_SITUACAO WHERE PB.SQ_PROCESSO=:SQ_PROCESSO", new { SQ_PROCESSO });
				else
					throw new Exception("Provider n√£o suportado!");
			}
			finally
			{
				if(Transaction == null)
                    Conexao.Close();
            }
		}

	}
}
