using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Intech.PrevSystem.Dados.DAO
{
	public abstract class WebReqBeneficioDAO : BaseDAO<WebReqBeneficioEntidade>
	{
		public WebReqBeneficioDAO (IDbTransaction tx = null) : base(tx) { }

		public virtual void AtualizarSituacaoPorOid(decimal OID_REQ_BENEFICIO, string IND_SITUACAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					Conexao.Execute("UPDATE WEB_REQ_BENEFICIO   SET IND_SITUACAO = @IND_SITUACAO  WHERE OID_REQ_BENEFICIO = @OID_REQ_BENEFICIO", new { OID_REQ_BENEFICIO, IND_SITUACAO });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					Conexao.Execute("UPDATE WEB_REQ_BENEFICIO SET IND_SITUACAO=:IND_SITUACAO WHERE OID_REQ_BENEFICIO=:OID_REQ_BENEFICIO", new { OID_REQ_BENEFICIO, IND_SITUACAO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<WebReqBeneficioEntidade> BuscarPorFundacaoInscricaoPlano(string CD_FUNDACAO, string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<WebReqBeneficioEntidade>("SELECT  *  FROM WEB_REQ_BENEFICIO  WHERE CD_FUNDACAO = @CD_FUNDACAO  AND NUM_INSCRICAO = @NUM_INSCRICAO  AND CD_PLANO = @CD_PLANO  ORDER BY DTA_SOLICITACAO DESC", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<WebReqBeneficioEntidade>("SELECT * FROM WEB_REQ_BENEFICIO WHERE CD_FUNDACAO=:CD_FUNDACAO AND NUM_INSCRICAO=:NUM_INSCRICAO AND CD_PLANO=:CD_PLANO ORDER BY DTA_SOLICITACAO DESC", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual long Insert(string CD_FUNDACAO, string NUM_INSCRICAO, string CD_PLANO, string CD_ESPECIE, DateTime DTA_SOLICITACAO, string DES_ORIGEM, string IND_SITUACAO, string COD_VALIDACAO, string COD_PROTOCOLO, DateTime? DTA_EFETIVACAO, DateTime? DTA_RECUSA, string TXT_MOTIVO_RECUSA, decimal? NUM_IDADE, decimal? NUM_TEMPO_PATROC, decimal? NUM_TEMPO_PLANO, decimal? NUM_TEMPO_INSS, DateTime? DTA_ULTIMO_RECAD, DateTime? DTA_DEMISSAO, string COD_BANCO, string COD_AGENCIA, string COD_CONTA, string COD_DV_CONTA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<long>("INSERT INTO WEB_REQ_BENEFICIO(  	CD_FUNDACAO,  	NUM_INSCRICAO,  	CD_PLANO,  	CD_ESPECIE,  	DTA_SOLICITACAO,  	DES_ORIGEM,  	IND_SITUACAO,  	COD_VALIDACAO,  	COD_PROTOCOLO,  	DTA_EFETIVACAO,  	DTA_RECUSA,  	TXT_MOTIVO_RECUSA,  	NUM_IDADE,  	NUM_TEMPO_PATROC,  	NUM_TEMPO_PLANO,  	NUM_TEMPO_INSS,  	DTA_ULTIMO_RECAD,  	DTA_DEMISSAO,  	COD_BANCO,  	COD_AGENCIA,  	COD_CONTA,  	COD_DV_CONTA  )  VALUES(  	@CD_FUNDACAO,  	@NUM_INSCRICAO,  	@CD_PLANO,  	@CD_ESPECIE,  	@DTA_SOLICITACAO,  	@DES_ORIGEM,  	@IND_SITUACAO,  	@COD_VALIDACAO,  	@COD_PROTOCOLO,  	@DTA_EFETIVACAO,  	@DTA_RECUSA,  	@TXT_MOTIVO_RECUSA,  	@NUM_IDADE,  	@NUM_TEMPO_PATROC,  	@NUM_TEMPO_PLANO,  	@NUM_TEMPO_INSS,  	@DTA_ULTIMO_RECAD,  	@DTA_DEMISSAO,  	@COD_BANCO,  	@COD_AGENCIA,  	@COD_CONTA,  	@COD_DV_CONTA  )", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO, CD_ESPECIE, DTA_SOLICITACAO, DES_ORIGEM, IND_SITUACAO, COD_VALIDACAO, COD_PROTOCOLO, DTA_EFETIVACAO, DTA_RECUSA, TXT_MOTIVO_RECUSA, NUM_IDADE, NUM_TEMPO_PATROC, NUM_TEMPO_PLANO, NUM_TEMPO_INSS, DTA_ULTIMO_RECAD, DTA_DEMISSAO, COD_BANCO, COD_AGENCIA, COD_CONTA, COD_DV_CONTA });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<long>("INSERT INTO WEB_REQ_BENEFICIO (OID_REQ_BENEFICIO,CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO, CD_ESPECIE, DTA_SOLICITACAO, DES_ORIGEM, IND_SITUACAO, COD_VALIDACAO, COD_PROTOCOLO, DTA_EFETIVACAO, DTA_RECUSA, TXT_MOTIVO_RECUSA, NUM_IDADE, NUM_TEMPO_PATROC, NUM_TEMPO_PLANO, NUM_TEMPO_INSS, DTA_ULTIMO_RECAD, DTA_DEMISSAO, COD_BANCO, COD_AGENCIA, COD_CONTA, COD_DV_CONTA) VALUES (S_WEB_REQ_BENEFICIO.NEXTVAL,:CD_FUNDACAO, :NUM_INSCRICAO, :CD_PLANO, :CD_ESPECIE, :DTA_SOLICITACAO, :DES_ORIGEM, :IND_SITUACAO, :COD_VALIDACAO, :COD_PROTOCOLO, :DTA_EFETIVACAO, :DTA_RECUSA, :TXT_MOTIVO_RECUSA, :NUM_IDADE, :NUM_TEMPO_PATROC, :NUM_TEMPO_PLANO, :NUM_TEMPO_INSS, :DTA_ULTIMO_RECAD, :DTA_DEMISSAO, :COD_BANCO, :COD_AGENCIA, :COD_CONTA, :COD_DV_CONTA)", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO, CD_ESPECIE, DTA_SOLICITACAO, DES_ORIGEM, IND_SITUACAO, COD_VALIDACAO, COD_PROTOCOLO, DTA_EFETIVACAO, DTA_RECUSA, TXT_MOTIVO_RECUSA, NUM_IDADE, NUM_TEMPO_PATROC, NUM_TEMPO_PLANO, NUM_TEMPO_INSS, DTA_ULTIMO_RECAD, DTA_DEMISSAO, COD_BANCO, COD_AGENCIA, COD_CONTA, COD_DV_CONTA });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

	}
}
