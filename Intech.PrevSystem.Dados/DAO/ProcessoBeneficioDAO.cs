#region Usings
using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
#endregion

namespace Intech.PrevSystem.Dados.DAO
{   
    public abstract class ProcessoBeneficioDAO : BaseDAO<ProcessoBeneficioEntidade>
    {
        
		public virtual IEnumerable<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaInscricaoPlano(string CD_FUNDACAO, string CD_EMPRESA, string NUM_INSCRICAO, string CD_PLANO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*,        EB.DS_ESPECIE,        HP.DT_INICIO_FUND, 	   ST.DS_SITUACAO, 	   HR.VL_PARCELA_MENSAL, 	   OP.DS_OPCAO_RECEB,        HR.OPCAO_RECB_13 FROM GB_PROCESSOS_BENEFICIO PB 	 INNER JOIN GB_HIST_RENDAS HR ON 			PB.CD_FUNDACAO  = HR.CD_FUNDACAO AND 			PB.CD_EMPRESA   = HR.CD_EMPRESA AND 			PB.CD_PLANO     = HR.CD_PLANO AND 			PB.CD_ESPECIE   = HR.CD_ESPECIE AND 			PB.NUM_PROCESSO = HR.NUM_PROCESSO AND  			PB.ANO_PROCESSO = HR.ANO_PROCESSO AND  			PB.VERSAO       = HR.VERSAO 	 INNER JOIN GB_HIST_PROCESSOS HP ON 			PB.CD_FUNDACAO  = HP.CD_FUNDACAO AND 			PB.CD_EMPRESA   = HP.CD_EMPRESA AND 			PB.CD_PLANO     = HP.CD_PLANO AND 			PB.CD_ESPECIE   = HP.CD_ESPECIE AND 			PB.NUM_PROCESSO = HP.NUM_PROCESSO AND  			PB.ANO_PROCESSO = HP.ANO_PROCESSO AND 			PB.VERSAO       = HP.VERSAO 	 INNER JOIN GB_HIST_SALDO HS ON 			PB.CD_FUNDACAO  = HS.CD_FUNDACAO AND 			PB.CD_EMPRESA   = HS.CD_EMPRESA AND 			PB.CD_PLANO     = HS.CD_PLANO AND 			PB.CD_ESPECIE   = HS.CD_ESPECIE AND 			PB.NUM_PROCESSO = HS.NUM_PROCESSO AND  			PB.ANO_PROCESSO = HS.ANO_PROCESSO AND 			PB.VERSAO       = HS.VERSAO 	 INNER JOIN GB_ESPECIE_BENEFICIO EB ON 			EB.CD_ESPECIE = PB.CD_ESPECIE 	 INNER JOIN GB_SITUACAO ST ON 			ST.CD_SITUACAO = PB.CD_SITUACAO 	 INNER JOIN GB_OPCAO_RECEBIMENTO OP ON 	        OP.CD_OPCAO_RECEB = HR.CD_OPCAO_RECEB WHERE HR.DT_INIC_VALIDADE = (SELECT MAX(HR2.DT_INIC_VALIDADE)                                FROM GB_HIST_RENDAS HR2                               WHERE HR2.CD_FUNDACAO  = HR.CD_FUNDACAO AND 			                        HR2.CD_EMPRESA   = HR.CD_EMPRESA AND                          			HR2.CD_PLANO     = HR.CD_PLANO AND 			                        HR2.CD_ESPECIE   = HR.CD_ESPECIE AND 			                        HR2.NUM_PROCESSO = HR.NUM_PROCESSO AND  									HR2.ANO_PROCESSO = HR.ANO_PROCESSO AND 			                        HR2.VERSAO       = HR.VERSAO) 	 AND HS.DT_REFERENCIA = (SELECT MAX(HS2.DT_REFERENCIA)                             FROM GB_HIST_SALDO HS2                            WHERE HS2.CD_FUNDACAO  = HR.CD_FUNDACAO AND 			                     HS2.CD_EMPRESA   = HR.CD_EMPRESA AND                          		 HS2.CD_PLANO     = HR.CD_PLANO AND 			                     HS2.CD_ESPECIE   = HR.CD_ESPECIE AND 			                     HS2.NUM_PROCESSO = HR.NUM_PROCESSO AND  								 HS2.ANO_PROCESSO = HR.ANO_PROCESSO AND 			                     HS2.VERSAO       = HR.VERSAO)   AND PB.CD_PLANO = @CD_PLANO   AND PB.CD_EMPRESA = @CD_EMPRESA   AND PB.CD_FUNDACAO = @CD_FUNDACAO   AND PB.NUM_INSCRICAO = @NUM_INSCRICAO", new { CD_FUNDACAO, CD_EMPRESA, NUM_INSCRICAO, CD_PLANO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT PB.*, EB.DS_ESPECIE, HP.DT_INICIO_FUND, ST.DS_SITUACAO, HR.VL_PARCELA_MENSAL, OP.DS_OPCAO_RECEB, HR.OPCAO_RECB_13 FROM GB_PROCESSOS_BENEFICIO  PB  INNER  JOIN GB_HIST_RENDAS   HR  ON PB.CD_FUNDACAO=HR.CD_FUNDACAO AND PB.CD_EMPRESA=HR.CD_EMPRESA AND PB.CD_PLANO=HR.CD_PLANO AND PB.CD_ESPECIE=HR.CD_ESPECIE AND PB.NUM_PROCESSO=HR.NUM_PROCESSO AND PB.ANO_PROCESSO=HR.ANO_PROCESSO AND PB.VERSAO=HR.VERSAO INNER  JOIN GB_HIST_PROCESSOS   HP  ON PB.CD_FUNDACAO=HP.CD_FUNDACAO AND PB.CD_EMPRESA=HP.CD_EMPRESA AND PB.CD_PLANO=HP.CD_PLANO AND PB.CD_ESPECIE=HP.CD_ESPECIE AND PB.NUM_PROCESSO=HP.NUM_PROCESSO AND PB.ANO_PROCESSO=HP.ANO_PROCESSO AND PB.VERSAO=HP.VERSAO INNER  JOIN GB_HIST_SALDO   HS  ON PB.CD_FUNDACAO=HS.CD_FUNDACAO AND PB.CD_EMPRESA=HS.CD_EMPRESA AND PB.CD_PLANO=HS.CD_PLANO AND PB.CD_ESPECIE=HS.CD_ESPECIE AND PB.NUM_PROCESSO=HS.NUM_PROCESSO AND PB.ANO_PROCESSO=HS.ANO_PROCESSO AND PB.VERSAO=HS.VERSAO INNER  JOIN GB_ESPECIE_BENEFICIO   EB  ON EB.CD_ESPECIE=PB.CD_ESPECIE INNER  JOIN GB_SITUACAO   ST  ON ST.CD_SITUACAO=PB.CD_SITUACAO INNER  JOIN GB_OPCAO_RECEBIMENTO   OP  ON OP.CD_OPCAO_RECEB=HR.CD_OPCAO_RECEB WHERE HR.DT_INIC_VALIDADE=(SELECT MAX(HR2.DT_INIC_VALIDADE) FROM GB_HIST_RENDAS  HR2  WHERE HR2.CD_FUNDACAO=HR.CD_FUNDACAO AND HR2.CD_EMPRESA=HR.CD_EMPRESA AND HR2.CD_PLANO=HR.CD_PLANO AND HR2.CD_ESPECIE=HR.CD_ESPECIE AND HR2.NUM_PROCESSO=HR.NUM_PROCESSO AND HR2.ANO_PROCESSO=HR.ANO_PROCESSO AND HR2.VERSAO=HR.VERSAO) AND HS.DT_REFERENCIA=(SELECT MAX(HS2.DT_REFERENCIA) FROM GB_HIST_SALDO  HS2  WHERE HS2.CD_FUNDACAO=HR.CD_FUNDACAO AND HS2.CD_EMPRESA=HR.CD_EMPRESA AND HS2.CD_PLANO=HR.CD_PLANO AND HS2.CD_ESPECIE=HR.CD_ESPECIE AND HS2.NUM_PROCESSO=HR.NUM_PROCESSO AND HS2.ANO_PROCESSO=HR.ANO_PROCESSO AND HS2.VERSAO=HR.VERSAO) AND PB.CD_PLANO=:CD_PLANO AND PB.CD_EMPRESA=:CD_EMPRESA AND PB.CD_FUNDACAO=:CD_FUNDACAO AND PB.NUM_INSCRICAO=:NUM_INSCRICAO", new { CD_FUNDACAO, CD_EMPRESA, NUM_INSCRICAO, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaMatriculaPlano(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   GB_SITUACAO.DS_SITUACAO,         GB_HIST_PROCESSOS.DT_REQUERIMENTO,          GB_HIST_PROCESSOS.DT_AFASTAMENTO,          GB_HIST_PROCESSOS.DT_INICIO_PREV,          GB_HIST_PROCESSOS.DT_INICIO_FUND   FROM   GB_PROCESSOS_BENEFICIO   INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_PROCESSOS_BENEFICIO.CD_ESPECIE   INNER JOIN GB_SITUACAO ON GB_SITUACAO.CD_SITUACAO = GB_PROCESSOS_BENEFICIO.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO   LEFT OUTER JOIN GB_HIST_PROCESSOS ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = GB_HIST_PROCESSOS.CD_FUNDACAO       AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = GB_HIST_PROCESSOS.CD_EMPRESA       AND GB_PROCESSOS_BENEFICIO.CD_PLANO = GB_HIST_PROCESSOS.CD_PLANO       AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE = GB_HIST_PROCESSOS.CD_ESPECIE       AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO = GB_HIST_PROCESSOS.NUM_PROCESSO       AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO = GB_HIST_PROCESSOS.ANO_PROCESSO   WHERE  CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO     AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO     AND CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA     AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = @CD_EMPRESA     AND CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA     AND GB_PROCESSOS_BENEFICIO.CD_PLANO = @CD_PLANO  ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_SITUACAO.DS_SITUACAO, GB_HIST_PROCESSOS.DT_REQUERIMENTO, GB_HIST_PROCESSOS.DT_AFASTAMENTO, GB_HIST_PROCESSOS.DT_INICIO_PREV, GB_HIST_PROCESSOS.DT_INICIO_FUND FROM GB_PROCESSOS_BENEFICIO INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_PROCESSOS_BENEFICIO.CD_ESPECIE INNER  JOIN GB_SITUACAO  ON GB_SITUACAO.CD_SITUACAO=GB_PROCESSOS_BENEFICIO.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO LEFT OUTER JOIN GB_HIST_PROCESSOS  ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=GB_HIST_PROCESSOS.CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=GB_HIST_PROCESSOS.CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=GB_HIST_PROCESSOS.CD_PLANO AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE=GB_HIST_PROCESSOS.CD_ESPECIE AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO=GB_HIST_PROCESSOS.NUM_PROCESSO AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO=GB_HIST_PROCESSOS.ANO_PROCESSO WHERE CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=:CD_PLANO ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoFuncionario(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   GB_SITUACAO.DS_SITUACAO,         GB_HIST_PROCESSOS.DT_REQUERIMENTO,          GB_HIST_PROCESSOS.DT_AFASTAMENTO,          GB_HIST_PROCESSOS.DT_INICIO_PREV,          GB_HIST_PROCESSOS.DT_INICIO_FUND   FROM   GB_PROCESSOS_BENEFICIO   INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_PROCESSOS_BENEFICIO.CD_ESPECIE   INNER JOIN GB_SITUACAO ON GB_SITUACAO.CD_SITUACAO = GB_PROCESSOS_BENEFICIO.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO   LEFT OUTER JOIN GB_HIST_PROCESSOS ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = GB_HIST_PROCESSOS.CD_FUNDACAO       AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = GB_HIST_PROCESSOS.CD_EMPRESA       AND GB_PROCESSOS_BENEFICIO.CD_PLANO = GB_HIST_PROCESSOS.CD_PLANO       AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE = GB_HIST_PROCESSOS.CD_ESPECIE       AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO = GB_HIST_PROCESSOS.NUM_PROCESSO       AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO = GB_HIST_PROCESSOS.ANO_PROCESSO   WHERE  CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO     AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO     AND CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA     AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = @CD_EMPRESA     AND CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA     AND GB_PROCESSOS_BENEFICIO.CD_PLANO = @CD_PLANO     AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('1', '3')  ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_SITUACAO.DS_SITUACAO, GB_HIST_PROCESSOS.DT_REQUERIMENTO, GB_HIST_PROCESSOS.DT_AFASTAMENTO, GB_HIST_PROCESSOS.DT_INICIO_PREV, GB_HIST_PROCESSOS.DT_INICIO_FUND FROM GB_PROCESSOS_BENEFICIO INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_PROCESSOS_BENEFICIO.CD_ESPECIE INNER  JOIN GB_SITUACAO  ON GB_SITUACAO.CD_SITUACAO=GB_PROCESSOS_BENEFICIO.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO LEFT OUTER JOIN GB_HIST_PROCESSOS  ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=GB_HIST_PROCESSOS.CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=GB_HIST_PROCESSOS.CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=GB_HIST_PROCESSOS.CD_PLANO AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE=GB_HIST_PROCESSOS.CD_ESPECIE AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO=GB_HIST_PROCESSOS.NUM_PROCESSO AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO=GB_HIST_PROCESSOS.ANO_PROCESSO WHERE CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=:CD_PLANO AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('1', '3') ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

		public virtual IEnumerable<ProcessoBeneficioEntidade> BuscarPorFundacaoEmpresaMatriculaPlanoPensionista(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if(AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*,         GB_ESPECIE_BENEFICIO.DS_ESPECIE,   	   GB_SITUACAO.DS_SITUACAO,         GB_HIST_PROCESSOS.DT_REQUERIMENTO,          GB_HIST_PROCESSOS.DT_AFASTAMENTO,          GB_HIST_PROCESSOS.DT_INICIO_PREV,          GB_HIST_PROCESSOS.DT_INICIO_FUND   FROM   GB_PROCESSOS_BENEFICIO   INNER JOIN GB_ESPECIE_BENEFICIO ON GB_ESPECIE_BENEFICIO.CD_ESPECIE = GB_PROCESSOS_BENEFICIO.CD_ESPECIE   INNER JOIN GB_SITUACAO ON GB_SITUACAO.CD_SITUACAO = GB_PROCESSOS_BENEFICIO.CD_SITUACAO  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO   LEFT OUTER JOIN GB_HIST_PROCESSOS ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = GB_HIST_PROCESSOS.CD_FUNDACAO       AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = GB_HIST_PROCESSOS.CD_EMPRESA       AND GB_PROCESSOS_BENEFICIO.CD_PLANO = GB_HIST_PROCESSOS.CD_PLANO       AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE = GB_HIST_PROCESSOS.CD_ESPECIE       AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO = GB_HIST_PROCESSOS.NUM_PROCESSO       AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO = GB_HIST_PROCESSOS.ANO_PROCESSO   WHERE  CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO     AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO     AND CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA     AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA = @CD_EMPRESA     AND CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA     AND GB_PROCESSOS_BENEFICIO.CD_PLANO = @CD_PLANO     AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('2', '4')  ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else if(AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<ProcessoBeneficioEntidade>("SELECT GB_PROCESSOS_BENEFICIO.*, GB_ESPECIE_BENEFICIO.DS_ESPECIE, GB_SITUACAO.DS_SITUACAO, GB_HIST_PROCESSOS.DT_REQUERIMENTO, GB_HIST_PROCESSOS.DT_AFASTAMENTO, GB_HIST_PROCESSOS.DT_INICIO_PREV, GB_HIST_PROCESSOS.DT_INICIO_FUND FROM GB_PROCESSOS_BENEFICIO INNER  JOIN GB_ESPECIE_BENEFICIO  ON GB_ESPECIE_BENEFICIO.CD_ESPECIE=GB_PROCESSOS_BENEFICIO.CD_ESPECIE INNER  JOIN GB_SITUACAO  ON GB_SITUACAO.CD_SITUACAO=GB_PROCESSOS_BENEFICIO.CD_SITUACAO INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=GB_PROCESSOS_BENEFICIO.NUM_INSCRICAO LEFT OUTER JOIN GB_HIST_PROCESSOS  ON GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=GB_HIST_PROCESSOS.CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=GB_HIST_PROCESSOS.CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=GB_HIST_PROCESSOS.CD_PLANO AND GB_PROCESSOS_BENEFICIO.CD_ESPECIE=GB_HIST_PROCESSOS.CD_ESPECIE AND GB_PROCESSOS_BENEFICIO.NUM_PROCESSO=GB_HIST_PROCESSOS.NUM_PROCESSO AND GB_PROCESSOS_BENEFICIO.ANO_PROCESSO=GB_HIST_PROCESSOS.ANO_PROCESSO WHERE CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO AND GB_PROCESSOS_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO AND CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA AND GB_PROCESSOS_BENEFICIO.CD_EMPRESA=:CD_EMPRESA AND CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA AND GB_PROCESSOS_BENEFICIO.CD_PLANO=:CD_PLANO AND GB_ESPECIE_BENEFICIO.CD_GRUPO_ESPECIE IN ('2', '4') ORDER BY GB_HIST_PROCESSOS.DT_INICIO_FUND DESC", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				Conexao.Close();
			}
		}

    }
}
