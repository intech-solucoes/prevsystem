using Dapper;
using Intech.Lib.Dapper;
using Intech.Lib.Web;
using Intech.PrevSystem.Entidades;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Intech.PrevSystem.Dados.DAO
{
	public abstract class PlanoVinculadoDAO : BaseDAO<PlanoVinculadoEntidade>
	{
		public PlanoVinculadoDAO (IDbTransaction tx = null) : base(tx) { }

		public virtual List<PlanoVinculadoEntidade> BuscarPorContratoTrabalho(int SQ_CONTRATO_TRABALHO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT       FI_PLANO_PREVIDENCIAL.DS_PLANO_PREVIDENCIAL,       FI_SIT_PLANO.DS_SIT_PLANO,       FI_SIT_INSCRICAO.DS_SIT_INSCRICAO,       FI_MOT_SIT_PLANO.DS_MOT_SIT_PLANO,       FI_PLANO_PREVIDENCIAL.NR_CODIGO_CNPB,       FI_PLANO_VINCULADO.DT_INSC_PLANO,      FI_PLANO_VINCULADO.DT_SITUACAO,      FI_PLANO_PREVIDENCIAL.CD_INDICE_VALORIZACAO,      FI_PLANO_VINCULADO.*  FROM FI_PLANO_VINCULADO   INNER JOIN FI_PLANO_PREVIDENCIAL ON FI_PLANO_PREVIDENCIAL.SQ_PLANO_PREVIDENCIAL = FI_PLANO_VINCULADO.SQ_PLANO_PREVIDENCIAL  INNER JOIN FI_SIT_PLANO ON FI_SIT_PLANO.SQ_SIT_PLANO = FI_PLANO_VINCULADO.SQ_SIT_PLANO  INNER JOIN FI_MOT_SIT_PLANO ON FI_MOT_SIT_PLANO.SQ_MOT_SIT_PLANO = FI_PLANO_VINCULADO.SQ_MOT_SIT_PLANO  LEFT JOIN FI_SIT_INSCRICAO ON FI_SIT_INSCRICAO.SQ_SIT_INSCRICAO = FI_PLANO_VINCULADO.SQ_SIT_INSCRICAO  WHERE SQ_CONTRATO_TRABALHO = @SQ_CONTRATO_TRABALHO    AND FI_PLANO_VINCULADO.SQ_SIT_PLANO NOT IN (2, 6, 7)", new { SQ_CONTRATO_TRABALHO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT FI_PLANO_PREVIDENCIAL.DS_PLANO_PREVIDENCIAL, FI_SIT_PLANO.DS_SIT_PLANO, FI_SIT_INSCRICAO.DS_SIT_INSCRICAO, FI_MOT_SIT_PLANO.DS_MOT_SIT_PLANO, FI_PLANO_PREVIDENCIAL.NR_CODIGO_CNPB, FI_PLANO_VINCULADO.DT_INSC_PLANO, FI_PLANO_VINCULADO.DT_SITUACAO, FI_PLANO_PREVIDENCIAL.CD_INDICE_VALORIZACAO, FI_PLANO_VINCULADO.* FROM FI_PLANO_VINCULADO INNER  JOIN FI_PLANO_PREVIDENCIAL  ON FI_PLANO_PREVIDENCIAL.SQ_PLANO_PREVIDENCIAL=FI_PLANO_VINCULADO.SQ_PLANO_PREVIDENCIAL INNER  JOIN FI_SIT_PLANO  ON FI_SIT_PLANO.SQ_SIT_PLANO=FI_PLANO_VINCULADO.SQ_SIT_PLANO INNER  JOIN FI_MOT_SIT_PLANO  ON FI_MOT_SIT_PLANO.SQ_MOT_SIT_PLANO=FI_PLANO_VINCULADO.SQ_MOT_SIT_PLANO LEFT JOIN FI_SIT_INSCRICAO  ON FI_SIT_INSCRICAO.SQ_SIT_INSCRICAO=FI_PLANO_VINCULADO.SQ_SIT_INSCRICAO WHERE SQ_CONTRATO_TRABALHO=:SQ_CONTRATO_TRABALHO AND FI_PLANO_VINCULADO.SQ_SIT_PLANO NOT  IN (2, 6, 7)", new { SQ_CONTRATO_TRABALHO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual PlanoVinculadoEntidade BuscarPorContratoTrabalhoPlano(int SQ_CONTRATO_TRABALHO, int SQ_PLANO_PREVIDENCIAL)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<PlanoVinculadoEntidade>("SELECT       FI_PLANO_PREVIDENCIAL.DS_PLANO_PREVIDENCIAL,       FI_SIT_PLANO.DS_SIT_PLANO,       FI_SIT_INSCRICAO.DS_SIT_INSCRICAO,       FI_MOT_SIT_PLANO.DS_MOT_SIT_PLANO,       FI_PLANO_PREVIDENCIAL.NR_CODIGO_CNPB,       FI_PLANO_VINCULADO.DT_INSC_PLANO,      FI_PLANO_VINCULADO.DT_SITUACAO,      FI_PLANO_PREVIDENCIAL.CD_INDICE_VALORIZACAO,  	FI_OPCAO_TRIBUTACAO.DS_OPCAO_TRIBUTACAO,      FI_PLANO_VINCULADO.*  FROM FI_PLANO_VINCULADO   INNER JOIN FI_PLANO_PREVIDENCIAL ON FI_PLANO_PREVIDENCIAL.SQ_PLANO_PREVIDENCIAL = FI_PLANO_VINCULADO.SQ_PLANO_PREVIDENCIAL  INNER JOIN FI_SIT_PLANO ON FI_SIT_PLANO.SQ_SIT_PLANO = FI_PLANO_VINCULADO.SQ_SIT_PLANO  INNER JOIN FI_MOT_SIT_PLANO ON FI_MOT_SIT_PLANO.SQ_MOT_SIT_PLANO = FI_PLANO_VINCULADO.SQ_MOT_SIT_PLANO  INNER JOIN FI_SIT_INSCRICAO ON FI_SIT_INSCRICAO.SQ_SIT_INSCRICAO = FI_PLANO_VINCULADO.SQ_SIT_INSCRICAO  INNER JOIN FI_OPCAO_TRIBUTACAO ON FI_OPCAO_TRIBUTACAO.SQ_OPCAO_TRIBUTACAO = FI_PLANO_VINCULADO.SQ_OPCAO_TRIBUTACAO  WHERE SQ_CONTRATO_TRABALHO = @SQ_CONTRATO_TRABALHO    AND FI_PLANO_VINCULADO.SQ_SIT_PLANO NOT IN (2, 6)    AND FI_PLANO_PREVIDENCIAL.SQ_PLANO_PREVIDENCIAL = @SQ_PLANO_PREVIDENCIAL", new { SQ_CONTRATO_TRABALHO, SQ_PLANO_PREVIDENCIAL });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<PlanoVinculadoEntidade>("SELECT FI_PLANO_PREVIDENCIAL.DS_PLANO_PREVIDENCIAL, FI_SIT_PLANO.DS_SIT_PLANO, FI_SIT_INSCRICAO.DS_SIT_INSCRICAO, FI_MOT_SIT_PLANO.DS_MOT_SIT_PLANO, FI_PLANO_PREVIDENCIAL.NR_CODIGO_CNPB, FI_PLANO_VINCULADO.DT_INSC_PLANO, FI_PLANO_VINCULADO.DT_SITUACAO, FI_PLANO_PREVIDENCIAL.CD_INDICE_VALORIZACAO, FI_OPCAO_TRIBUTACAO.DS_OPCAO_TRIBUTACAO, FI_PLANO_VINCULADO.* FROM FI_PLANO_VINCULADO INNER  JOIN FI_PLANO_PREVIDENCIAL  ON FI_PLANO_PREVIDENCIAL.SQ_PLANO_PREVIDENCIAL=FI_PLANO_VINCULADO.SQ_PLANO_PREVIDENCIAL INNER  JOIN FI_SIT_PLANO  ON FI_SIT_PLANO.SQ_SIT_PLANO=FI_PLANO_VINCULADO.SQ_SIT_PLANO INNER  JOIN FI_MOT_SIT_PLANO  ON FI_MOT_SIT_PLANO.SQ_MOT_SIT_PLANO=FI_PLANO_VINCULADO.SQ_MOT_SIT_PLANO INNER  JOIN FI_SIT_INSCRICAO  ON FI_SIT_INSCRICAO.SQ_SIT_INSCRICAO=FI_PLANO_VINCULADO.SQ_SIT_INSCRICAO INNER  JOIN FI_OPCAO_TRIBUTACAO  ON FI_OPCAO_TRIBUTACAO.SQ_OPCAO_TRIBUTACAO=FI_PLANO_VINCULADO.SQ_OPCAO_TRIBUTACAO WHERE SQ_CONTRATO_TRABALHO=:SQ_CONTRATO_TRABALHO AND FI_PLANO_VINCULADO.SQ_SIT_PLANO NOT  IN (2, 6) AND FI_PLANO_PREVIDENCIAL.SQ_PLANO_PREVIDENCIAL=:SQ_PLANO_PREVIDENCIAL", new { SQ_CONTRATO_TRABALHO, SQ_PLANO_PREVIDENCIAL });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> BuscarPorCpf(string CPF)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT CS_PLANOS_VINC.*,  TB_SIT_PLANO.CD_CATEGORIA  FROM CS_PLANOS_VINC  INNER JOIN TB_SIT_PLANO ON TB_SIT_PLANO.CD_SIT_PLANO = CS_PLANOS_VINC.CD_SIT_PLANO  INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO  INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID  WHERE EE_ENTIDADE.CPF_CGC = @CPF", new { CPF }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT CS_PLANOS_VINC.*, TB_SIT_PLANO.CD_CATEGORIA FROM CS_PLANOS_VINC INNER  JOIN TB_SIT_PLANO  ON TB_SIT_PLANO.CD_SIT_PLANO=CS_PLANOS_VINC.CD_SIT_PLANO INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID WHERE EE_ENTIDADE.CPF_CGC=:CPF", new { CPF }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> BuscarPorFundacaoEmpresaCpf(string CD_FUNDACAO, string CD_EMPRESA, string CPF)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,          TB_CATEGORIA.CD_CATEGORIA,          TB_CATEGORIA.DS_CATEGORIA,          TB_PLANOS.DS_PLANO,         CS_PLANOS_VINC.*  FROM   CS_PLANOS_VINC   INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                       AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO   INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO   LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST   INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO   INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = CS_FUNCIONARIO.COD_ENTID  INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA   WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )          AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA )          AND ( EE_ENTIDADE.CPF_CGC = @CPF )", new { CD_FUNDACAO, CD_EMPRESA, CPF }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_PLANOS.DS_PLANO, CS_PLANOS_VINC.* FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=CS_FUNCIONARIO.COD_ENTID INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA) AND (EE_ENTIDADE.CPF_CGC=:CPF)", new { CD_FUNDACAO, CD_EMPRESA, CPF }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> BuscarPorFundacaoEmpresaCpfPensionista(string CD_FUNDACAO, string CD_EMPRESA, string CPF)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,          TB_CATEGORIA.CD_CATEGORIA,          TB_CATEGORIA.DS_CATEGORIA,          TB_PLANOS.DS_PLANO,         CS_PLANOS_VINC.*  FROM   CS_PLANOS_VINC   INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                       AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO   INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO   LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST   INNER JOIN GB_RECEBEDOR_BENEFICIO ON GB_RECEBEDOR_BENEFICIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO   INNER JOIN EE_ENTIDADE ON EE_ENTIDADE.COD_ENTID = GB_RECEBEDOR_BENEFICIO.COD_ENTID  INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA   WHERE  ( GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )          AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )          AND ( GB_RECEBEDOR_BENEFICIO.CD_EMPRESA = @CD_EMPRESA )          AND ( EE_ENTIDADE.CPF_CGC =  @CPF )", new { CD_FUNDACAO, CD_EMPRESA, CPF }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_PLANOS.DS_PLANO, CS_PLANOS_VINC.* FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN GB_RECEBEDOR_BENEFICIO  ON GB_RECEBEDOR_BENEFICIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN EE_ENTIDADE  ON EE_ENTIDADE.COD_ENTID=GB_RECEBEDOR_BENEFICIO.COD_ENTID INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (GB_RECEBEDOR_BENEFICIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (GB_RECEBEDOR_BENEFICIO.CD_EMPRESA=:CD_EMPRESA) AND (EE_ENTIDADE.CPF_CGC=:CPF)", new { CD_FUNDACAO, CD_EMPRESA, CPF }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> BuscarPorFundacaoEmpresaMatricula(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,          TB_CATEGORIA.CD_CATEGORIA,          TB_CATEGORIA.DS_CATEGORIA,          TB_SIT_PLANO.DS_SIT_PLANO,         TB_PLANOS.DS_PLANO,         TB_PLANOS.COD_CNPB,         CS_PLANOS_VINC.*  FROM   CS_PLANOS_VINC   INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                       AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO   INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO   LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST   INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO   INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA   WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )          AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA )          AND ( CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA )", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.* FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA) AND (CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA)", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> BuscarPorFundacaoEmpresaMatriculaPermiteEmprestimo(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,          TB_CATEGORIA.CD_CATEGORIA,          TB_CATEGORIA.DS_CATEGORIA,          TB_SIT_PLANO.DS_SIT_PLANO,         TB_PLANOS.DS_PLANO,         TB_PLANOS.COD_CNPB,         CS_PLANOS_VINC.*  FROM   CS_PLANOS_VINC   INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                       AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO   INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO   LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST   INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO   INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA   INNER JOIN TB_EMPRESA_PLANOS ON TB_EMPRESA_PLANOS.CD_PLANO = CS_PLANOS_VINC.CD_PLANO  WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )          AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA )          AND ( CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA )         AND ( TB_CATEGORIA.CD_CATEGORIA <> '2' )         AND ( TB_CATEGORIA.PERMITE_EMPRESTIMO = 'S')         AND ( TB_EMPRESA_PLANOS.PERMITE_EMPRESTIMO = 'S' )         AND ( TB_EMPRESA_PLANOS.CD_EMPRESA = @CD_EMPRESA )", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.* FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA INNER  JOIN TB_EMPRESA_PLANOS  ON TB_EMPRESA_PLANOS.CD_PLANO=CS_PLANOS_VINC.CD_PLANO WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA) AND (CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA) AND (TB_CATEGORIA.CD_CATEGORIA<>'2') AND (TB_CATEGORIA.PERMITE_EMPRESTIMO='S') AND (TB_EMPRESA_PLANOS.PERMITE_EMPRESTIMO='S') AND (TB_EMPRESA_PLANOS.CD_EMPRESA=:CD_EMPRESA)", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual PlanoVinculadoEntidade BuscarPorFundacaoEmpresaMatriculaPlano(string CD_FUNDACAO, string CD_EMPRESA, string NUM_MATRICULA, string CD_PLANO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,          TB_CATEGORIA.CD_CATEGORIA,          TB_CATEGORIA.DS_CATEGORIA,          TB_SIT_PLANO.DS_SIT_PLANO,         TB_PLANOS.DS_PLANO,         TB_PLANOS.COD_CNPB,         CS_PLANOS_VINC.*  FROM   CS_PLANOS_VINC   INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                       AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO   INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO   LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST   INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO   INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA   WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )          AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_FUNCIONARIO.CD_EMPRESA = @CD_EMPRESA )          AND ( CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA )         AND ( CS_PLANOS_VINC.CD_PLANO = @CD_PLANO )", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.* FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.CD_EMPRESA=:CD_EMPRESA) AND (CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA) AND (CS_PLANOS_VINC.CD_PLANO=:CD_PLANO)", new { CD_FUNDACAO, CD_EMPRESA, NUM_MATRICULA, CD_PLANO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> BuscarPorFundacaoInscricao(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,          TB_CATEGORIA.CD_CATEGORIA,          TB_CATEGORIA.DS_CATEGORIA,          TB_SIT_PLANO.DS_SIT_PLANO,         TB_PLANOS.DS_PLANO,         TB_PLANOS.COD_CNPB,         CS_PLANOS_VINC.*,  	   CS_FUNCIONARIO.CD_EMPRESA  FROM   CS_PLANOS_VINC   INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                       AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO   INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO   LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST   INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO   INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA   WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )          AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )           AND ( CS_FUNCIONARIO.NUM_INSCRICAO = @NUM_INSCRICAO )", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.*, CS_FUNCIONARIO.CD_EMPRESA FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.NUM_INSCRICAO=:NUM_INSCRICAO)", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> BuscarPorFundacaoInscricaoNotDesligado(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,          TB_CATEGORIA.CD_CATEGORIA,          TB_CATEGORIA.DS_CATEGORIA,          TB_SIT_PLANO.CD_SIT_PLANO,         TB_SIT_PLANO.DS_SIT_PLANO,         TB_PLANOS.DS_PLANO,         TB_PLANOS.COD_CNPB,         CS_PLANOS_VINC.*,  	   CS_FUNCIONARIO.CD_EMPRESA  FROM   CS_PLANOS_VINC   INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                       AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO   INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO   LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST   INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO   INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA   WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )          AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )           AND ( CS_FUNCIONARIO.NUM_INSCRICAO = @NUM_INSCRICAO )  	   AND ( TB_CATEGORIA.CD_CATEGORIA <> 2)", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.CD_SIT_PLANO, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.*, CS_FUNCIONARIO.CD_EMPRESA FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.NUM_INSCRICAO=:NUM_INSCRICAO) AND (TB_CATEGORIA.CD_CATEGORIA<>2)", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> BuscarPorFundacaoInscricaoOrderByDtInscPlano(string CD_FUNDACAO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,          TB_CATEGORIA.CD_CATEGORIA,          TB_CATEGORIA.DS_CATEGORIA,          TB_SIT_PLANO.DS_SIT_PLANO,         TB_PLANOS.DS_PLANO,         TB_PLANOS.COD_CNPB,         CS_PLANOS_VINC.*,  	   CS_FUNCIONARIO.CD_EMPRESA  FROM   CS_PLANOS_VINC   INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                       AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO   INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO   LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST   INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO   INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA   WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )          AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )           AND ( CS_FUNCIONARIO.NUM_INSCRICAO = @NUM_INSCRICAO )  	   ORDER BY DT_INSC_PLANO DESC", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.*, CS_FUNCIONARIO.CD_EMPRESA FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.NUM_INSCRICAO=:NUM_INSCRICAO) ORDER BY DT_INSC_PLANO DESC", new { CD_FUNDACAO, NUM_INSCRICAO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> BuscarPorFundacaoMatricula(string CD_FUNDACAO, string NUM_MATRICULA)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST,          TB_CATEGORIA.CD_CATEGORIA,          TB_CATEGORIA.DS_CATEGORIA,          TB_SIT_PLANO.DS_SIT_PLANO,         TB_PLANOS.DS_PLANO,         TB_PLANOS.COD_CNPB,         CS_PLANOS_VINC.*,  	   CS_FUNCIONARIO.CD_EMPRESA  FROM   CS_PLANOS_VINC   INNER JOIN TB_PLANOS ON CS_PLANOS_VINC.CD_FUNDACAO = TB_PLANOS.CD_FUNDACAO                       AND CS_PLANOS_VINC.CD_PLANO = TB_PLANOS.CD_PLANO   INNER JOIN TB_SIT_PLANO ON CS_PLANOS_VINC.CD_SIT_PLANO = TB_SIT_PLANO.CD_SIT_PLANO   LEFT OUTER JOIN TB_PERFIL_INVEST ON CS_PLANOS_VINC.CD_PERFIL_INVEST = TB_PERFIL_INVEST.CD_PERFIL_INVEST   INNER JOIN CS_FUNCIONARIO ON CS_FUNCIONARIO.NUM_INSCRICAO = CS_PLANOS_VINC.NUM_INSCRICAO   INNER JOIN TB_CATEGORIA ON TB_CATEGORIA.CD_CATEGORIA = TB_SIT_PLANO.CD_CATEGORIA   WHERE  ( CS_FUNCIONARIO.CD_FUNDACAO = @CD_FUNDACAO )          AND ( CS_PLANOS_VINC.CD_FUNDACAO = @CD_FUNDACAO )          AND ( TB_PLANOS.CD_FUNDACAO = @CD_FUNDACAO )           AND ( CS_FUNCIONARIO.NUM_MATRICULA = @NUM_MATRICULA )", new { CD_FUNDACAO, NUM_MATRICULA }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT TB_PERFIL_INVEST.DS_PERFIL_INVEST, TB_CATEGORIA.CD_CATEGORIA, TB_CATEGORIA.DS_CATEGORIA, TB_SIT_PLANO.DS_SIT_PLANO, TB_PLANOS.DS_PLANO, TB_PLANOS.COD_CNPB, CS_PLANOS_VINC.*, CS_FUNCIONARIO.CD_EMPRESA FROM CS_PLANOS_VINC INNER  JOIN TB_PLANOS  ON CS_PLANOS_VINC.CD_FUNDACAO=TB_PLANOS.CD_FUNDACAO AND CS_PLANOS_VINC.CD_PLANO=TB_PLANOS.CD_PLANO INNER  JOIN TB_SIT_PLANO  ON CS_PLANOS_VINC.CD_SIT_PLANO=TB_SIT_PLANO.CD_SIT_PLANO LEFT OUTER JOIN TB_PERFIL_INVEST  ON CS_PLANOS_VINC.CD_PERFIL_INVEST=TB_PERFIL_INVEST.CD_PERFIL_INVEST INNER  JOIN CS_FUNCIONARIO  ON CS_FUNCIONARIO.NUM_INSCRICAO=CS_PLANOS_VINC.NUM_INSCRICAO INNER  JOIN TB_CATEGORIA  ON TB_CATEGORIA.CD_CATEGORIA=TB_SIT_PLANO.CD_CATEGORIA WHERE (CS_FUNCIONARIO.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_PLANOS_VINC.CD_FUNDACAO=:CD_FUNDACAO) AND (TB_PLANOS.CD_FUNDACAO=:CD_FUNDACAO) AND (CS_FUNCIONARIO.NUM_MATRICULA=:NUM_MATRICULA)", new { CD_FUNDACAO, NUM_MATRICULA }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual List<PlanoVinculadoEntidade> FSFBuscarSaldado(string CD_FUNDACAO, string CD_PLANO, string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT PL.CD_PLANO,         ST.DS_SIT_PLANO,         PV.DT_INSC_PLANO,         HR.DT_INIC_VALIDADE,         HR2.VL_RENDA_FUNDACAO as VL_BENEF_SALDADO_INICIAL,         HR.VL_RENDA_FUNDACAO as VL_BENEF_SALDADO_ATUAL  FROM CS_PLANOS_VINC PV        INNER JOIN CS_FUNCIONARIO FN ON               FN.CD_FUNDACAO   = PV.CD_FUNDACAO AND              FN.NUM_INSCRICAO = PV.NUM_INSCRICAO        INNER JOIN TB_SIT_PLANO ST ON              ST.CD_SIT_PLANO = PV.CD_SIT_PLANO        INNER JOIN TB_PLANOS PL ON              PL.CD_FUNDACAO = PV.CD_FUNDACAO AND              PL.CD_PLANO    = PV.CD_PLANO        INNER JOIN GB_PROCESSOS_BENEFICIO PB ON              PB.CD_FUNDACAO   = PV.CD_FUNDACAO AND              PB.NUM_INSCRICAO = PV.NUM_INSCRICAO AND              PB.CD_PLANO = PV.CD_PLANO        INNER JOIN GB_HIST_RENDAS HR ON              HR.CD_FUNDACAO  = PB.CD_FUNDACAO AND              HR.CD_EMPRESA   = PB.CD_EMPRESA AND              HR.CD_PLANO     = PB.CD_PLANO AND              HR.CD_ESPECIE   = PB.CD_ESPECIE AND              HR.ANO_PROCESSO = PB.ANO_PROCESSO AND              HR.NUM_PROCESSO = PB.NUM_PROCESSO        INNER JOIN GB_HIST_RENDAS HR2 ON              HR2.CD_FUNDACAO  = PB.CD_FUNDACAO AND              HR2.CD_EMPRESA   = PB.CD_EMPRESA AND              HR2.CD_PLANO     = PB.CD_PLANO AND              HR2.CD_ESPECIE   = PB.CD_ESPECIE AND              HR2.ANO_PROCESSO = PB.ANO_PROCESSO AND              HR2.NUM_PROCESSO = PB.NUM_PROCESSO  WHERE PV.CD_FUNDACAO = @CD_FUNDACAO    AND PV.CD_PLANO = @CD_PLANO    AND PV.NUM_INSCRICAO = @NUM_INSCRICAO    AND HR.DT_INIC_VALIDADE = (SELECT MAX(HR2.DT_INIC_VALIDADE)                                 FROM GB_HIST_RENDAS HR2                                 WHERE HR2.CD_FUNDACAO  = PB.CD_FUNDACAO                                   AND    HR2.CD_EMPRESA   = PB.CD_EMPRESA                                   AND    HR2.CD_PLANO     = PB.CD_PLANO                                   AND    HR2.CD_ESPECIE   = PB.CD_ESPECIE                                   AND    HR2.ANO_PROCESSO = PB.ANO_PROCESSO                                   AND    HR2.NUM_PROCESSO = PB.NUM_PROCESSO)    AND HR2.DT_INIC_VALIDADE = (SELECT MIN(HR2.DT_INIC_VALIDADE)                                 FROM GB_HIST_RENDAS HR2                                 WHERE HR2.CD_FUNDACAO  = PB.CD_FUNDACAO                                   AND    HR2.CD_EMPRESA   = PB.CD_EMPRESA                                   AND    HR2.CD_PLANO     = PB.CD_PLANO                                   AND    HR2.CD_ESPECIE   = PB.CD_ESPECIE                                   AND    HR2.ANO_PROCESSO = PB.ANO_PROCESSO                                   AND    HR2.NUM_PROCESSO = PB.NUM_PROCESSO)", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO }).ToList();
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.Query<PlanoVinculadoEntidade>("SELECT PL.CD_PLANO, ST.DS_SIT_PLANO, PV.DT_INSC_PLANO, HR.DT_INIC_VALIDADE, HR2.VL_RENDA_FUNDACAO AS VL_BENEF_SALDADO_INICIAL, HR.VL_RENDA_FUNDACAO AS VL_BENEF_SALDADO_ATUAL FROM CS_PLANOS_VINC  PV  INNER  JOIN CS_FUNCIONARIO   FN  ON FN.CD_FUNDACAO=PV.CD_FUNDACAO AND FN.NUM_INSCRICAO=PV.NUM_INSCRICAO INNER  JOIN TB_SIT_PLANO   ST  ON ST.CD_SIT_PLANO=PV.CD_SIT_PLANO INNER  JOIN TB_PLANOS   PL  ON PL.CD_FUNDACAO=PV.CD_FUNDACAO AND PL.CD_PLANO=PV.CD_PLANO INNER  JOIN GB_PROCESSOS_BENEFICIO   PB  ON PB.CD_FUNDACAO=PV.CD_FUNDACAO AND PB.NUM_INSCRICAO=PV.NUM_INSCRICAO AND PB.CD_PLANO=PV.CD_PLANO INNER  JOIN GB_HIST_RENDAS   HR  ON HR.CD_FUNDACAO=PB.CD_FUNDACAO AND HR.CD_EMPRESA=PB.CD_EMPRESA AND HR.CD_PLANO=PB.CD_PLANO AND HR.CD_ESPECIE=PB.CD_ESPECIE AND HR.ANO_PROCESSO=PB.ANO_PROCESSO AND HR.NUM_PROCESSO=PB.NUM_PROCESSO INNER  JOIN GB_HIST_RENDAS   HR2  ON HR2.CD_FUNDACAO=PB.CD_FUNDACAO AND HR2.CD_EMPRESA=PB.CD_EMPRESA AND HR2.CD_PLANO=PB.CD_PLANO AND HR2.CD_ESPECIE=PB.CD_ESPECIE AND HR2.ANO_PROCESSO=PB.ANO_PROCESSO AND HR2.NUM_PROCESSO=PB.NUM_PROCESSO WHERE PV.CD_FUNDACAO=:CD_FUNDACAO AND PV.CD_PLANO=:CD_PLANO AND PV.NUM_INSCRICAO=:NUM_INSCRICAO AND HR.DT_INIC_VALIDADE=(SELECT MAX(HR2.DT_INIC_VALIDADE) FROM GB_HIST_RENDAS  HR2  WHERE HR2.CD_FUNDACAO=PB.CD_FUNDACAO AND HR2.CD_EMPRESA=PB.CD_EMPRESA AND HR2.CD_PLANO=PB.CD_PLANO AND HR2.CD_ESPECIE=PB.CD_ESPECIE AND HR2.ANO_PROCESSO=PB.ANO_PROCESSO AND HR2.NUM_PROCESSO=PB.NUM_PROCESSO) AND HR2.DT_INIC_VALIDADE=(SELECT MIN(HR2.DT_INIC_VALIDADE) FROM GB_HIST_RENDAS  HR2  WHERE HR2.CD_FUNDACAO=PB.CD_FUNDACAO AND HR2.CD_EMPRESA=PB.CD_EMPRESA AND HR2.CD_PLANO=PB.CD_PLANO AND HR2.CD_ESPECIE=PB.CD_ESPECIE AND HR2.ANO_PROCESSO=PB.ANO_PROCESSO AND HR2.NUM_PROCESSO=PB.NUM_PROCESSO)", new { CD_FUNDACAO, CD_PLANO, NUM_INSCRICAO }).ToList();
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual void Insert(string CD_FUNDACAO, string NUM_INSCRICAO, string CD_PLANO, DateTime DT_INSC_PLANO, string CD_SIT_PLANO, DateTime DT_SITUACAO_ATUAL, string CD_MOTIVO_DESLIG, DateTime? DT_DESLIG_PLANO, string FUNDADOR, decimal? PERC_TAXA_MAXIMA, string GRUPO, DateTime? DT_PRIMEIRA_CONTRIB, DateTime? DT_VENC_CARENCIA, string CD_SIT_INSCRICAO, string TIPO_IRRF, decimal? IDADE_RECEB_BENEF, string CD_TIPO_COBRANCA, string NUM_BANCO, string NUM_AGENCIA, string NUM_CONTA, decimal? DIA_VENC, string CD_GRUPO, decimal? CD_PERFIL_INVEST, string NUM_PROTOCOLO, string VITALICIO, decimal? VL_PERC_VITALICIO, string LEI_108, decimal? SALDO_PROJ, decimal? PECULIO_INV, decimal? PECULIO_MORTE, string INTEGRALIZA_SALDO, string CK_EXTRATO_CST, DateTime? DT_EMISSAO_CERTIFICADO, string TIPO_IRRF_CANC, string IND_OPTANTE_MAXIMA_BASICA, string IND_AFA_JUDICIAL)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					Conexao.Execute("INSERT INTO CS_PLANOS_VINC  (       CD_FUNDACAO      ,NUM_INSCRICAO      ,CD_PLANO      ,DT_INSC_PLANO      ,CD_SIT_PLANO      ,DT_SITUACAO_ATUAL      ,CD_MOTIVO_DESLIG      ,DT_DESLIG_PLANO      ,FUNDADOR      ,PERC_TAXA_MAXIMA      ,GRUPO      ,DT_PRIMEIRA_CONTRIB      ,DT_VENC_CARENCIA      ,CD_SIT_INSCRICAO      ,TIPO_IRRF      ,IDADE_RECEB_BENEF      ,cd_tipo_cobranca      ,NUM_BANCO      ,NUM_AGENCIA      ,NUM_CONTA      ,DIA_VENC      ,CD_GRUPO      ,cd_perfil_invest      ,NUM_PROTOCOLO      ,VITALICIO      ,VL_PERC_VITALICIO      ,LEI_108      ,SALDO_PROJ      ,PECULIO_INV      ,PECULIO_MORTE      ,INTEGRALIZA_SALDO      ,CK_EXTRATO_CST      ,DT_EMISSAO_CERTIFICADO      ,TIPO_IRRF_CANC      ,IND_OPTANTE_MAXIMA_BASICA      ,IND_AFA_JUDICIAL  )  VALUES  (       @CD_FUNDACAO      ,@NUM_INSCRICAO      ,@CD_PLANO      ,@DT_INSC_PLANO      ,@CD_SIT_PLANO      ,@DT_SITUACAO_ATUAL      ,@CD_MOTIVO_DESLIG      ,@DT_DESLIG_PLANO      ,@FUNDADOR      ,@PERC_TAXA_MAXIMA      ,@GRUPO      ,@DT_PRIMEIRA_CONTRIB      ,@DT_VENC_CARENCIA      ,@CD_SIT_INSCRICAO      ,@TIPO_IRRF      ,@IDADE_RECEB_BENEF      ,@cd_tipo_cobranca      ,@NUM_BANCO      ,@NUM_AGENCIA      ,@NUM_CONTA      ,@DIA_VENC      ,@CD_GRUPO      ,@cd_perfil_invest      ,@NUM_PROTOCOLO      ,@VITALICIO      ,@VL_PERC_VITALICIO      ,@LEI_108      ,@SALDO_PROJ      ,@PECULIO_INV      ,@PECULIO_MORTE      ,@INTEGRALIZA_SALDO      ,@CK_EXTRATO_CST      ,@DT_EMISSAO_CERTIFICADO      ,@TIPO_IRRF_CANC      ,@IND_OPTANTE_MAXIMA_BASICA      ,@IND_AFA_JUDICIAL  )", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO, DT_INSC_PLANO, CD_SIT_PLANO, DT_SITUACAO_ATUAL, CD_MOTIVO_DESLIG, DT_DESLIG_PLANO, FUNDADOR, PERC_TAXA_MAXIMA, GRUPO, DT_PRIMEIRA_CONTRIB, DT_VENC_CARENCIA, CD_SIT_INSCRICAO, TIPO_IRRF, IDADE_RECEB_BENEF, CD_TIPO_COBRANCA, NUM_BANCO, NUM_AGENCIA, NUM_CONTA, DIA_VENC, CD_GRUPO, CD_PERFIL_INVEST, NUM_PROTOCOLO, VITALICIO, VL_PERC_VITALICIO, LEI_108, SALDO_PROJ, PECULIO_INV, PECULIO_MORTE, INTEGRALIZA_SALDO, CK_EXTRATO_CST, DT_EMISSAO_CERTIFICADO, TIPO_IRRF_CANC, IND_OPTANTE_MAXIMA_BASICA, IND_AFA_JUDICIAL });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					Conexao.Execute("INSERT INTO CS_PLANOS_VINC (CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO, DT_INSC_PLANO, CD_SIT_PLANO, DT_SITUACAO_ATUAL, CD_MOTIVO_DESLIG, DT_DESLIG_PLANO, FUNDADOR, PERC_TAXA_MAXIMA, GRUPO, DT_PRIMEIRA_CONTRIB, DT_VENC_CARENCIA, CD_SIT_INSCRICAO, TIPO_IRRF, IDADE_RECEB_BENEF, CD_TIPO_COBRANCA, NUM_BANCO, NUM_AGENCIA, NUM_CONTA, DIA_VENC, CD_GRUPO, CD_PERFIL_INVEST, NUM_PROTOCOLO, VITALICIO, VL_PERC_VITALICIO, LEI_108, SALDO_PROJ, PECULIO_INV, PECULIO_MORTE, INTEGRALIZA_SALDO, CK_EXTRATO_CST, DT_EMISSAO_CERTIFICADO, TIPO_IRRF_CANC, IND_OPTANTE_MAXIMA_BASICA, IND_AFA_JUDICIAL) VALUES (:CD_FUNDACAO, :NUM_INSCRICAO, :CD_PLANO, :DT_INSC_PLANO, :CD_SIT_PLANO, :DT_SITUACAO_ATUAL, :CD_MOTIVO_DESLIG, :DT_DESLIG_PLANO, :FUNDADOR, :PERC_TAXA_MAXIMA, :GRUPO, :DT_PRIMEIRA_CONTRIB, :DT_VENC_CARENCIA, :CD_SIT_INSCRICAO, :TIPO_IRRF, :IDADE_RECEB_BENEF, :CD_TIPO_COBRANCA, :NUM_BANCO, :NUM_AGENCIA, :NUM_CONTA, :DIA_VENC, :CD_GRUPO, :CD_PERFIL_INVEST, :NUM_PROTOCOLO, :VITALICIO, :VL_PERC_VITALICIO, :LEI_108, :SALDO_PROJ, :PECULIO_INV, :PECULIO_MORTE, :INTEGRALIZA_SALDO, :CK_EXTRATO_CST, :DT_EMISSAO_CERTIFICADO, :TIPO_IRRF_CANC, :IND_OPTANTE_MAXIMA_BASICA, :IND_AFA_JUDICIAL)", new { CD_FUNDACAO, NUM_INSCRICAO, CD_PLANO, DT_INSC_PLANO, CD_SIT_PLANO, DT_SITUACAO_ATUAL, CD_MOTIVO_DESLIG, DT_DESLIG_PLANO, FUNDADOR, PERC_TAXA_MAXIMA, GRUPO, DT_PRIMEIRA_CONTRIB, DT_VENC_CARENCIA, CD_SIT_INSCRICAO, TIPO_IRRF, IDADE_RECEB_BENEF, CD_TIPO_COBRANCA, NUM_BANCO, NUM_AGENCIA, NUM_CONTA, DIA_VENC, CD_GRUPO, CD_PERFIL_INVEST, NUM_PROTOCOLO, VITALICIO, VL_PERC_VITALICIO, LEI_108, SALDO_PROJ, PECULIO_INV, PECULIO_MORTE, INTEGRALIZA_SALDO, CK_EXTRATO_CST, DT_EMISSAO_CERTIFICADO, TIPO_IRRF_CANC, IND_OPTANTE_MAXIMA_BASICA, IND_AFA_JUDICIAL });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

		public virtual int MigradoPlano1(string NUM_INSCRICAO)
		{
			try
			{
				if (AppSettings.IS_SQL_SERVER_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT COUNT(CD_SIT_PLANO)  FROM CS_PLANOS_VINC  WHERE NUM_INSCRICAO = @NUM_INSCRICAO    AND CD_PLANO = '0001'    AND CD_SIT_PLANO = '09'", new { NUM_INSCRICAO });
				else if (AppSettings.IS_ORACLE_PROVIDER)
					return Conexao.QuerySingleOrDefault<int>("SELECT COUNT(CD_SIT_PLANO) FROM CS_PLANOS_VINC WHERE NUM_INSCRICAO=:NUM_INSCRICAO AND CD_PLANO='0001' AND CD_SIT_PLANO='09'", new { NUM_INSCRICAO });
				else
					throw new Exception("Provider não suportado!");
			}
			finally
			{
				if(Transaction == null)
					Conexao.Close();
			}
		}

	}
}
